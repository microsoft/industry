{
    "$schema": "https://schema.management.azure.com/schemas/2019-08-01/tenantDeploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "healthPrefix": {
            "type": "string",
            "maxLength": 10,
            "metadata": {
                "description": "Provide a prefix (max 10 characters, unique at tenant-scope) for the Management Group hierarchy and other resources created by the deployment."
            }
        },
        "managementSubscriptionId": {
            "type": "string",
            "defaultValue": "",
            "maxLength": 36,
            "metadata": {
                "description": "Provide the subscription id of an existing, empty subscription you want to dedicate for management. If you don't want to bring a subscription, leave this parameter empty as is."
            }
        },
        "connectivitySubscriptionId": {
            "type": "string",
            "defaultValue": "",
            "maxLength": 36,
            "metadata": {
                "description": "Provide the subscription id of an existing, empty subscription you want to dedicate for networking."
            }
        },
        "identitySubscriptionId": {
            "type": "string",
            "defaultValue": "",
            "maxLength": 36,
            "metadata": {
                "description": "Provide the subscription id of an existing, empty subscription you want to dedicate for identity."
            }
        },
        "denySubnetWithoutNsgForIdentity": {
            "type": "string",
            "allowedValues": [
                "Yes",
                "Audit",
                "No"
            ],
            "defaultValue": "No"
        },
        "denyRdpForIdentity": {
            "type": "string",
            "allowedValues": [
                "Yes",
                "Audit",
                "No"
            ],
            "defaultValue": "No"
        },
        "denyPipForIdentity": {
            "type": "string",
            "allowedValues": [
                "Yes",
                "Audit",
                "No"
            ],
            "defaultValue": "No"
        },
        "enableVmBackupForIdentity": {
            "type": "string",
            "allowedValues": [
                "Yes",
                "Audit",
                "No"
            ],
            "defaultValue": "No"
        },
        "onlineLzSubscriptionId": {
            "type": "array",
            "defaultValue": [],
            "metadata": {
                "description": "Provide the subscription ids for existing, empty subscriptions you want to move in as your first online landing zones."
            }
        },
        "corpLzSubscriptionId": {
            "type": "array",
            "defaultValue": [],
            "metadata": {
                "description": "Provide the subscription ids for existing, empty subscriptions you want to move in as your first corp landing zones."
            }
        },
        "corpConnectedLzSubscriptionId": {
            "type": "array",
            "defaultValue": [],
            "metadata": {
                "description": "Provide the subscription ids for existing, empty subscriptions you want to move in as your first corp landing zones and connect to virtual networking hub."
            }
        },
        "enableLogAnalytics": {
            "type": "string",
            "defaultValue": "No",
            "allowedValues": [
                "Yes",
                "No"
            ],
            "metadata": {
                "description": "If 'Yes' is selected when also adding a subscription for management, ARM will assign two policies to enable auditing in your environment, into the Log Analytics workspace for platform monitoring. If 'No', it will be ignored."
            }
        },
        "retentionInDays": {
            "type": "string",
            "defaultValue": ""
        },
        "enableAsc": {
            "type": "string",
            "defaultValue": "No",
            "allowedValues": [
                "Yes",
                "No"
            ],
            "metadata": {
                "description": "If 'Yes' is selected when also adding a subscription for management, ARM will assign two policies to enable auditing in your environment, into the Log Analytics workspace for platform monitoring. If 'No', it will be ignored."
            }
        },
        "enableAksPolicy": {
            "type": "string",
            "defaultValue": "No",
            "allowedValues": [
                "Yes",
                "Audit",
                "No"
            ]
        },
        "emailContactAsc": {
            "type": "string",
            "metadata": {
                "description": "Email address for Azure Security Center contact details."
            },
            "defaultValue": ""
        },
        "enableAscForServers": {
            "type": "string",
            "defaultValue": "Disabled",
            "allowedValues": [
                "DeployIfNotExists",
                "Disabled"
            ]
        },
        "enableAscForAppServices": {
            "type": "string",
            "allowedValues": [
                "Disabled",
                "DeployIfNotExists"
            ],
            "defaultValue": "Disabled"            
        },
        "enableAscForStorage": {
            "type": "string",
            "allowedValues": [
                "Disabled",
                "DeployIfNotExists"
            ],
            "defaultValue": "Disabled"            
        },
        "enableAscForSql": {
            "type": "string",
            "allowedValues": [
                "Disabled",
                "DeployIfNotExists"
            ],
            "defaultValue": "Disabled"            
        },
        "enableAscForSqlOnVm": {
            "type": "string",
            "allowedValues": [
                "Disabled",
                "DeployIfNotExists"
            ],
            "defaultValue": "Disabled"            
        },
        "enableAscForKeyVault": {
            "type": "string",
            "allowedValues": [
                "Disabled",
                "DeployIfNotExists"
            ],
            "defaultValue": "Disabled"            
        },
        "enableAscForArm": {
            "type": "string",
            "allowedValues": [
                "Disabled",
                "DeployIfNotExists"
            ],
            "defaultValue": "Disabled"            
        },
        "enableAscForDns": {
            "type": "string",
            "allowedValues": [
                "Disabled",
                "DeployIfNotExists"
            ],
            "defaultValue": "Disabled"            
        },
        "enableAscForContainers": {
            "type": "string",
            "allowedValues": [
                "Disabled",
                "DeployIfNotExists"
            ],
            "defaultValue": "Disabled"            
        },
        "enableAscForOssDb": {
            "type": "string",
            "allowedValues": [
                "Disabled",
                "DeployIfNotExists"
            ],
            "defaultValue": "Disabled"
        },
        "denyAksPrivileged": {
            "type": "string",
            "defaultValue": "No",
            "allowedValues": [
                "Yes",
                "Audit",
                "No"
            ]
        },
        "denyAksPrivilegedEscalation": {
            "type": "string",
            "defaultValue": "No",
            "allowedValues": [
                "Yes",
                "Audit",
                "No"
            ]
        },
        "denyHttpIngressForAks": {
            "type": "string",
            "defaultValue": "No",
            "allowedValues": [
                "Yes",
                "Audit",
                "No"
            ]
        },
        "enableVmMonitoring": {
            "type": "string",
            "defaultValue": "No",
            "allowedValues": [
                "Yes",
                "Audit",
                "No"
            ],
            "metadata": {
                "description": "If 'Yes' is selected, policy will be assigned to enforce VM monitoring."
            }
        },
        "enableVmssMonitoring": {
            "type": "string",
            "defaultValue": "No",
            "allowedValues": [
                "Yes",
                "Audit",
                "No"
            ],
            "metadata": {
                "description": "If 'Yes' is selected, policy will be assigned to enforce VMSS monitoring."
            }
        },
        "enableSecuritySolution": {
            "type": "string",
            "defaultValue": "No",
            "allowedValues": [
                "Yes",
                "No"
            ]
        },
        "enableEncryptionInTransit": {
            "type": "string",
            "defaultValue": "No",
            "allowedValues": [
                "Yes",
                "Audit",
                "No"
            ]
        },
        "enableAgentHealth": {
            "type": "string",
            "defaultValue": "No",
            "allowedValues": [
                "Yes",
                "No"
            ]
        },
        "enableChangeTracking": {
            "type": "string",
            "defaultValue": "No",
            "allowedValues": [
                "Yes",
                "No"
            ]
        },
        "enableUpdateMgmt": {
            "type": "string",
            "allowedValues": [
                "Yes",
                "No"
            ],
            "defaultValue": "Yes"
        },
        "enableActivityLog": {
            "type": "string",
            "allowedValues": [
                "Yes",
                "No"
            ],
            "defaultValue": "Yes"
        },
        "enableVmInsights": {
            "type": "string",
            "allowedValues": [
                "Yes",
                "No"
            ],
            "defaultValue": "Yes"
        },
        "enableServiceMap": {
            "type": "string",
            "allowedValues": [
                "Yes",
                "No"
            ],
            "defaultValue": "Yes"
        },
        "enableSqlAssessment": {
            "type": "string",
            "allowedValues": [
                "Yes",
                "No"
            ],
            "defaultValue": "Yes"
        },
        "enableSqlAudit": {
            "type": "string",
            "defaultValue": "No",
            "allowedValues": [
                "Yes",
                "Audit",
                "No"
            ]
        },
        "enableSqlEncryption": {
            "type": "string",
            "defaultValue": "No",
            "allowedValues": [
                "Yes",
                "Audit",
                "No"
            ]
        },
        "enableVmBackup": {
            "type": "string",
            "defaultValue": "No",
            "allowedValues": [
                "Yes",
                "Audit",
                "No"
            ]
        },
        "denyRdp": {
            "type": "string",
            "defaultValue": "No",
            "allowedValues": [
                "Yes",
                "Audit",
                "No"
            ]
        },
        "denyPublicEndpoints": {
            "type": "string",
            "defaultValue": "No",
            "allowedValues": [
                "Yes",
                "Audit",
                "No"
            ]
        },
        "enableStorageHttps": {
            "type": "string",
            "defaultValue": "No",
            "allowedValues": [
                "Yes",
                "Audit",
                "No"
            ]
        },
        "enableLzDdoS": {
            "type": "string",
            "defaultValue": "No",
            "allowedValues": [
                "Yes",
                "Audit",
                "No"
            ]
        },
        "denyIpForwarding": {
            "type": "string",
            "defaultValue": "No",
            "allowedValues": [
                "Yes",
                "Audit",
                "No"
            ]
        },
        "denySubnetWithoutNsg": {
            "type": "string",
            "allowedValues": [
                "Yes",
                "Audit",
                "No"
            ],
            "defaultValue": "No"
        },
        "addressPrefix": {
            "type": "string",
            "defaultValue": ""
        },
        "enableVpnGw": {
            "type": "string",
            "defaultValue": "No",
            "allowedValues": [
                "Yes",
                "No"
            ]
        },
        "enableErGw": {
            "type": "string",
            "defaultValue": "No",
            "allowedValues": [
                "Yes",
                "No"
            ]
        },
        "location": {
            "type": "string",
            "defaultValue": "[deployment().location]"
        },
        "enableHub": {
            "type": "string",
            "allowedValues": [
                "vhub",
                "vwan",
                "nva",
                "No"
            ],
            "defaultValue": "No"
        },
        "enableAzFw": {
            "type": "string",
            "allowedValues": [
                "Yes",
                "No"
            ],
            "defaultValue": "No"
        },
        "enableAzFwDnsProxy": {
            "type": "string",
            "allowedValues": [
                "Yes",
                "No"
            ],
            "defaultValue": "No"
        },
        "enableDdoS": {
            "type": "string",
            "defaultValue": "No",
            "allowedValues": [
                "Yes",
                "Audit",
                "No"
            ]
        },
        "enablePrivateDnsZones": {
            "type": "string",
            "defaultValue": "No",
            "allowedValues": [
                "Yes",
                "No"
            ]
        },
        "enablePrivateDnsZonesForLzs": {
            "type": "string",
            "defaultValue": "No",
            "allowedValues": [
                "Yes",
                "Audit",
                "No"
            ]
        },
        "subnetMaskForAzFw": {
            "type": "string",
            "defaultValue": ""
        },
        "subnetMaskForGw": {
            "type": "string",
            "defaultValue": ""
        },
        "gwRegionalOrAz": {
            "type": "string",
            "defaultValue": ""
        },
        "gwAzSku": {
            "type": "string",
            "defaultValue": ""
        },
        "gwRegionalSku": {
            "type": "string",
            "defaultValue": ""
        },
        "erRegionalOrAz": {
            "type": "string",
            "defaultValue": ""
        },
        "erAzSku": {
            "type": "string",
            "defaultValue": ""
        },
        "erRegionalSku": {
            "type": "string",
            "defaultValue": ""
        },
        "firewallSku": {
            "type": "string",
            "allowedValues": [
                "Standard",
                "Premium"
            ],
            "defaultValue": "Standard"
        },
        "firewallZones": {
            "type": "array",
            "defaultValue": []
        },
        "singlePlatformSubscriptionId": {
            "type": "string",
            "defaultValue": "",
            "maxLength": 36
        },
        "expressRouteScaleUnit": {
            "type": "string",
            "defaultValue": "1"
        },
        "vpnGateWayScaleUnit": {
            "type": "string",
            "defaultValue": "1"
        },
        "identityAddressPrefix": {
            "type": "string",
            "defaultValue": ""
        },
        "denyDatabricksPip": {
            "type": "string",
            "defaultValue": "No",
            "allowedValues": [
                "Yes",
                "Audit",
                "No"
            ]
        },
        "denyDatabricksVnet": {
            "type": "string",
            "defaultValue": "No",
            "allowedValues": [
                "Yes",
                "Audit",
                "No"
            ]
        },
        "denyDatabricksSku": {
            "type": "string",
            "defaultValue": "No",
            "allowedValues": [
                "Yes",
                "Audit",
                "No"
            ]
        },
        "healthLzSubscriptionId": {
            "type": "array",
            "defaultValue": [],
            "metadata": {
                "description": "Provide the subscription ids for existing, empty subscriptions you want to move in as your first healthcare landing zones."
            }
        },
        "enableNetworkWatcher": {
            "type": "string",
            "defaultValue": "No",
            "allowedValues": [
                "Yes",
                "No"
            ]
        },
        "enableRegulatoryCompliance": {
            "type": "string",
            "defaultValue": "None",
            "allowedValues": [
                "HIPAAHITRUST",
                "PCI",
                "FEDRAMPHIGH",
                "FEDRAMPMODERATE",
                "None"
            ]
        }
    },
    "variables": {
        // Declaring the prescriptive management group structure that will be used in the scope construction
        "mgmtGroups": {
            "healthRoot": "[parameters('healthPrefix')]",
            "platform": "[concat(parameters('healthPrefix'), '-', 'platform')]",
            "management": "[concat(parameters('healthPrefix'), '-', 'management')]",
            "connectivity": "[concat(parameters('healthPrefix'), '-', 'connectivity')]",
            "identity": "[concat(parameters('healthPrefix'), '-', 'identity')]",
            "lzs": "[concat(parameters('healthPrefix'), '-', 'landingzones')]",
            "corp": "[concat(parameters('healthPrefix'), '-', 'corp')]",
            "online": "[concat(parameters('healthPrefix'), '-', 'online')]",
            "healthcare": "[concat(parameters('healthPrefix'), '-', 'healthcare')]"
        },
        // Declaring scopes that will be used for optional deployments, such as platform components (monitoring, networking, identity), policy assignments, subscription placement etc.
        "scopes": {
            "healthRootManagementGroup": "[tenantResourceId('Microsoft.Management/managementGroups/', variables('mgmtGroups').healthRoot)]",
            "platformManagementGroup": "[tenantResourceId('Microsoft.Management/managementGroups/', variables('mgmtGroups').platform)]",
            "managementManagementGroup": "[tenantResourceId('Microsoft.Management/managementGroups/', variables('mgmtGroups').management)]",
            "connectivityManagementGroup": "[tenantResourceId('Microsoft.Management/managementGroups/', variables('mgmtGroups').connectivity)]",
            "identityManagementGroup": "[tenantResourceId('Microsoft.Management/managementGroups/', variables('mgmtGroups').identity)]",
            "lzsManagementGroup": "[tenantResourceId('Microsoft.Management/managementGroups/', variables('mgmtGroups').lzs)]",
            "corpManagementGroup": "[tenantResourceId('Microsoft.Management/managementGroups/', variables('mgmtGroups').corp)]",
            "onlineManagementGroup": "[tenantResourceId('Microsoft.Management/managementGroups/', variables('mgmtGroups').online)]",
            "healthManagementGroup": "[tenantResourceId('Microsoft.Management/managementGroups/', variables('mgmtGroups').healthcare)]"
        },
        // Declaring all required deployment uri's used for deployments of composite ARM templates for Healthcare
       "azPrivateDnsPolicyMapping": {
            "https://management.azure.com/": "https://raw.githubusercontent.com/Azure/Enterprise-Scale/main/eslzArm/managementGroupTemplates/policyDefinitions/DINE-PrivateDNSZonesPolicySetDefinition.json",
            "https://management.usgovcloudapi.net": "managementGroupTemplates/policyDefinitions/gov/fairfaxDINE-PrivateDNSZonesPolicySetDefinition.json"
        },
        "azPrivateDnsArmTemplate": "[variables('azPrivateDnsPolicyMapping')[environment().resourceManager]]",
        "azPublicEndpointsPolicyMapping": {
            "https://management.azure.com/": "https://raw.githubusercontent.com/Azure/Enterprise-Scale/main/eslzArm/managementGroupTemplates/policyDefinitions/DENY-PublicEndpointsPolicySetDefinition.json",
            "https://management.usgovcloudapi.net": "managementGroupTemplates/policyDefinitions/gov/fairfaxDENY-PublicEndpointsPolicySetDefinition.json"
        },
        "azPublicEndpointArmTemplate": "[variables('azPublicEndpointsPolicyMapping')[environment().resourceManager]]",
        "azPolicyPoliciesMapping": {
            "https://management.azure.com/": "https://raw.githubusercontent.com/Azure/Enterprise-Scale/main/eslzArm/managementGroupTemplates/policyDefinitions/policies.json",
            "https://management.usgovcloudapi.net": "managementGroupTemplates/policyDefinitions/gov/fairfaxPolicies.json"
        },
        "azPolicyArmTemplate": "[variables('azPolicyPoliciesMapping')[environment().resourceManager]]",
        "azPrivateDnsPolicyAssignmentMapping": {
            "https://management.azure.com/": "https://raw.githubusercontent.com/Azure/Enterprise-Scale/main/eslzArm/managementGroupTemplates/policyAssignments/DINE-PrivateDNSZonesPolicyAssignment.json",
            "https://management.usgovcloudapi.net": "managementGroupTemplates/policyAssignments/gov/fairfaxDINE-PrivateDNSZonesPolicyAssignment.json"
        },
        "azPrivateDnsPolicyAssignment": "[variables('azPrivateDnsPolicyAssignmentMapping')[environment().resourceManager]]",
        "deploymentUris": {
            "managementGroups": "[uri(deployment().properties.templateLink.uri, 'industrySpecific/managementGroupTemplates/mgmtGroupStructure/mgmtGroups.json')]",
            "managementGroupsLite": "[uri(deployment().properties.templateLink.uri, 'industrySpecific/managementGroupTemplates/mgmtGroupStructure/mgmtGroupsLite.json')]",
            "policyDefinitions": "[uri(deployment().properties.templateLink.uri, variables('azPolicyArmTemplate'))]",
            "healthPolicyDefinitions": "[uri(deployment().properties.templateLink.uri, 'industrySpecific/managementGroupTemplates/policyDefinitions/healthPolicies.json')]",
            "dataPolicyDefinitions": "https://raw.githubusercontent.com/Azure/Enterprise-Scale/main/eslzArm/managementGroupTemplates/policyDefinitions/dataPolicies.json",
            "vnetConnectivityHub": "[uri(deployment().properties.templateLink.uri, 'industrySpecific/subscriptionTemplates/hubspoke-connectivity.json')]",
            "vwanConnectivityHub": "[uri(deployment().properties.templateLink.uri, 'industrySpecific/subscriptionTemplates/vwan-connectivity.json')]",
            "nvaConnectivityHub": "[uri(deployment().properties.templateLink.uri, 'industrySpecific/subscriptionTemplates/nvahubspoke-connectivity.json')]",
            "subscriptionPlacement": "[uri(deployment().properties.templateLink.uri, 'industrySpecific/managementGroupTemplates/subscriptionOrganization/subscriptionOrganization.json')]",
            "monitoring": "[uri(deployment().properties.templateLink.uri, 'industrySpecific/subscriptionTemplates/logAnalyticsWorkspace.json')]",
            "resourceGroup": "[uri(deployment().properties.templateLink.uri, 'industrySpecific/subscriptionTemplates/resourceGroup.json')]",
            "ddosProtection": "[uri(deployment().properties.templateLink.uri, 'industrySpecific/resourceGroupTemplates/ddosProtection.json')]",
            "logAnalyticsPolicyAssignment": "[uri(deployment().properties.templateLink.uri, 'industrySpecific/managementGroupTemplates/policyAssignments/DINE-LogAnalyticsPolicyAssignment.json')]",
            "monitoringSolutions": "[uri(deployment().properties.templateLink.uri, 'industrySpecific/subscriptionTemplates/logAnalyticsSolutions.json')]",
            "asbPolicyInitiative": "[uri(deployment().properties.templateLink.uri, 'industrySpecific/managementGroupTemplates/policyAssignments/DINE-ASBPolicyAssignment.json')]",
            "resourceDiagnosticsInitiative": "[uri(deployment().properties.templateLink.uri, 'industrySpecific/managementGroupTemplates/policyAssignments/DINE-ResourceDiagnosticsPolicyAssignment.json')]",
            "activityDiagnosticsPolicyAssignment": "[uri(deployment().properties.templateLink.uri, 'industrySpecific/managementGroupTemplates/policyAssignments/DINE-ActivityLogPolicyAssignment.json')]",
            "ascConfigPolicyInitiative": "[uri(deployment().properties.templateLink.uri, 'industrySpecific/managementGroupTemplates/policyAssignments/DINE-ASCConfigPolicyAssignment.json')]",
            "azVmMonitorPolicyAssignment": "[uri(deployment().properties.templateLink.uri, 'industrySpecific/managementGroupTemplates/policyAssignments/DINE-VMMonitoringPolicyAssignment.json')]",
            "azVmssMonitorPolicyAssignment": "[uri(deployment().properties.templateLink.uri, 'industrySpecific/managementGroupTemplates/policyAssignments/DINE-VMSSMonitoringPolicyAssignment.json')]",
            "azVmBackupPolicyAssignment": "[uri(deployment().properties.templateLink.uri, 'industrySpecific/managementGroupTemplates/policyAssignments/DINE-VMBackupPolicyAssignment.json')]",
            "azPolicyForAksPolicyAssignment": "[uri(deployment().properties.templateLink.uri, 'industrySpecific/managementGroupTemplates/policyAssignments/DINE-AksPolicyPolicyAssignment.json')]",
            "aksPrivEscalationPolicyAssignment": "[uri(deployment().properties.templateLink.uri, 'industrySpecific/managementGroupTemplates/policyAssignments/DENY-AksPrivEscalationPolicyAssignment.json')]",
            "aksPrivilegedPolicyAssignment": "[uri(deployment().properties.templateLink.uri, 'industrySpecific/managementGroupTemplates/policyAssignments/DENY-AksPrivilegedPolicyAssignment.json')]",
            "tlsSslPolicyAssignment": "[uri(deployment().properties.templateLink.uri, 'industrySpecific/managementGroupTemplates/policyAssignments/DENY-DINE-APPEND-TLS-SSL-PolicyAssignment.json')]",
            "aksHttpsPolicyAssignment": "[uri(deployment().properties.templateLink.uri, 'industrySpecific/managementGroupTemplates/policyAssignments/DENY-AksWithoutHttpsPolicyAssignment.json')]",            
            "ipFwdPolicyAssignment": "[uri(deployment().properties.templateLink.uri, 'industrySpecific/managementGroupTemplates/policyAssignments/DENY-IPForwardingPolicyAssignment.json')]",
            "publicEndpointPolicySetDefinition": "[uri(deployment().properties.templateLink.uri, variables('azPublicEndpointArmTemplate'))]",
            "publicEndpointPolicyAssignment": "[uri(deployment().properties.templateLink.uri, 'industrySpecific/managementGroupTemplates/policyAssignments/DENY-PublicEndpointPolicyAssignment.json')]",
            "privateDnsZonePolicySetDefinition": "[uri(deployment().properties.templateLink.uri, variables('azPrivateDnsArmTemplate'))]",
            "privateDnsZonePolicyAssignment": "[uri(deployment().properties.templateLink.uri, variables('azPrivateDnsPolicyAssignment'))]",
            "pipPolicyAssignment": "[uri(deployment().properties.templateLink.uri, 'industrySpecific/managementGroupTemplates/policyAssignments/DENY-PublicIpAddressPolicyAssignment.json')]",
            "rdpFromInternetPolicyAssignment": "[uri(deployment().properties.templateLink.uri, 'industrySpecific/managementGroupTemplates/policyAssignments/DENY-RDPFromInternetPolicyAssignment.json')]",
            "storageHttpsPolicyAssignment": "[uri(deployment().properties.templateLink.uri, 'industrySpecific/managementGroupTemplates/policyAssignments/DENY-StorageWithoutHttpsPolicyAssignment.json')]",
            "subnetNsgPolicyAssignment": "[uri(deployment().properties.templateLink.uri, 'industrySpecific/managementGroupTemplates/policyAssignments/DENY-SubnetWithoutNsgPolicyAssignment.json')]",
            "sqlAuditPolicyAssignment": "[uri(deployment().properties.templateLink.uri, 'industrySpecific/managementGroupTemplates/policyAssignments/DINE-SQLAuditingPolicyAssignment.json')]",
            "sqlEncryptionPolicyAssignment": "[uri(deployment().properties.templateLink.uri, 'industrySpecific/managementGroupTemplates/policyAssignments/DINE-SQLEncryptionPolicyAssignment.json')]",
            "ddosPolicyAssignment": "[uri(deployment().properties.templateLink.uri, 'industrySpecific/managementGroupTemplates/policyAssignments/MODIFY-DDoSPolicyAssignment.json')]",
            "corpVnetPeering": "[uri(deployment().properties.templateLink.uri, 'industrySpecific/subscriptionTemplates/vnetPeering.json')]",
            "corpVwanPeering": "[uri(deployment().properties.templateLink.uri, 'industrySpecific/subscriptionTemplates/vnetPeeringVwan.json')]",
            "privateDnsZones": "[uri(deployment().properties.templateLink.uri, 'industrySpecific/resourceGroupTemplates/privateDnsZones.json')]",
            "roleAssignments": "[uri(deployment().properties.templateLink.uri, 'industrySpecific/managementGroupTemplates/roleAssignments/roleAssignment.json')]",
            "databricksSku": "[uri(deployment().properties.templateLink.uri, 'industrySpecific/managementGroupTemplates/policyAssignments/DENY-DatabricksSkuPolicyAssignment.json')]",
            "databricksPip": "[uri(deployment().properties.templateLink.uri, 'industrySpecific/managementGroupTemplates/policyAssignments/DENY-DatabricksPipPolicyAssignment.json')]",
            "databricksVnet": "[uri(deployment().properties.templateLink.uri, 'industrySpecific/managementGroupTemplates/policyAssignments/DENY-DatabricksVnetPolicyAssignment.json')]",
            "govAscPolicyAssignment": "[uri(deployment().properties.templateLink.uri, 'industrySpecific/managementGroupTemplates/policyAssignments/gov/fairfaxDINE-ASCConfigPolicyAssignment.json')]",
            "logStorageAccount": "[uri(deployment().properties.templateLink.uri, 'industrySpecific/subscriptionTemplates/logStorageAccount.json')]",
            "nwRgPolicyAssignment": "[uri(deployment().properties.templateLink.uri, 'industrySpecific/managementGroupTemplates/policyAssignments/DINE-NwResourceGroupPolicyAssignment.json')]",
            "hitrustHipaaPolicyAssignment": "[uri(deployment().properties.templateLink.uri, 'industrySpecific/managementGroupTemplates/policyAssignments/HIPAAHITRUST-PolicyAssignment.json')]",
            "pciPolicyAssignment": "[uri(deployment().properties.templateLink.uri, 'industrySpecific/managementGroupTemplates/policyAssignments/PCI-PolicyAssignment.json')]",
            "fedrampHighPolicyAssignment": "[uri(deployment().properties.templateLink.uri, 'industrySpecific/managementGroupTemplates/policyAssignments/FEDRAMPHIGH-PolicyAssignment.json')]",
            "fedrampMediumPolicyAssignment": "[uri(deployment().properties.templateLink.uri, 'industrySpecific/managementGroupTemplates/policyAssignments/FEDRAMMEDIUM-PolicyAssignment.json')]"
        },
        // Declaring deterministic deployment names
        "deploymentSuffix": "[concat('-', deployment().location, guid(parameters('healthPrefix')))]",
        "industry": "Health",
        "deploymentNames": {
            "mgmtGroupDeploymentName": "[take(concat(variables('industry'), '-Mgs', variables('deploymentSuffix')), 64)]",
            "mgmtSubscriptionPlacement": "[take(concat(variables('industry'), '-MgmtSub', variables('deploymentSuffix')), 64)]",
            "databricksSkuDeploymentName": "[take(concat(variables('industry'), '-DBSku', variables('deploymentSuffix')), 64)]",
            "databricksPipDeploymentName": "[take(concat(variables('industry'), '-DBPip', variables('deploymentSuffix')), 64)]",
            "databricksVnetDeploymentName": "[take(concat(variables('industry'), '-DBVnet', variables('deploymentSuffix')), 64)]",
            "corpPeeringDeploymentName": "[take(concat(variables('industry'), '-CorpPeering', variables('deploymentSuffix')), 60)]",
            "connectivitySubscriptionPlacement": "[take(concat(variables('industry'), '-ConnectivitySub', variables('deploymentSuffix')), 64)]",
            "identitySubscriptionPlacement": "[take(concat(variables('industry'), '-IdentitySub', variables('deploymentSuffix')), 64)]",
            "policyDeploymentName": "[take(concat(variables('industry'), '-Policy', variables('deploymentSuffix')), 64)]",
            "dataPolicyDeploymentName": "[take(concat(variables('industry'),'-Data-Policy', variables('deploymentSuffix')), 64)]",
            "ddosRgDeploymentName": "[take(concat(variables('industry'), '-DDoSRg', variables('deploymentSuffix')), 64)]",
            "ddosDeploymentName": "[take(concat(variables('industry'), '-DDoS', variables('deploymentSuffix')), 64)]",
            "ddosHubPolicyDeploymentName": "[take(concat(variables('industry'), '-DDoSHubPolicy', variables('deploymentSuffix')), 64)]",
            "ddosLzPolicyDeploymentName": "[take(concat(variables('industry'), '-DDoSLZPolicy', variables('deploymentSuffix')), 64)]",
            "monitoringDeploymentName": "[take(concat(variables('industry'), '-Monitoring', variables('deploymentSuffix')), 64)]",
            "logAnalyticsPolicyDeploymentName": "[take(concat(variables('industry'), '-LAPolicy', variables('deploymentSuffix')), 64)]",
            "monitoringSolutionsDeploymentName": "[take(concat(variables('industry'), '-Solutions', variables('deploymentSuffix')), 64)]",
            "asbPolicyDeploymentName": "[take(concat(variables('industry'), '-ASB', variables('deploymentSuffix')), 64)]",
            "resourceDiagnosticsPolicyDeploymentName": "[take(concat(variables('industry'), '-ResourceDiagnostics', variables('deploymentSuffix')), 64)]",
            "activityDiagnosticsPolicyDeploymentName": "[take(concat(variables('industry'), '-ActivityDiagnostics', variables('deploymentSuffix')), 64)]",
            "ascPolicyDeploymentName": "[take(concat(variables('industry'), '-ASC', variables('deploymentSuffix')), 64)]",
            "ascGovPolicyDeploymentName": "[take(concat(variables('industry'), '-Gov-ASC', variables('deploymentSuffix')), 64)]",
            "vnetConnectivityHubDeploymentName": "[take(concat(variables('industry'), '-HubSpoke', variables('deploymentSuffix')), 64)]",
            "vwanConnectivityHubDeploymentName": "[take(concat(variables('industry'), '-VWanHub', variables('deploymentSuffix')), 64)]",
            "nvaConnectivityHubDeploymentName": "[take(concat(variables('industry'), '-NVAHub', variables('deploymentSuffix')), 64)]",
            "azVmMonitorPolicyDeploymentName": "[take(concat(variables('industry'), '-AzVmMonitor', variables('deploymentSuffix')), 64)]",
            "azVmssMonitorPolicyDeploymentName": "[take(concat(variables('industry'),'-AzVmssMonitor', variables('deploymentSuffix')), 64)]",
            "azBackupLzPolicyDeploymentName": "[take(concat(variables('industry'),'-AzBackupLz', variables('deploymentSuffix')), 64)]",
            "azBackupIdentityPolicyDeploymentName": "[take(concat(variables('industry'), '-AzBackupIdentity', variables('deploymentSuffix')), 64)]",
            "azPolicyForAksPolicyDeploymentName": "[take(concat(variables('industry'), '-AksPolicy', variables('deploymentSuffix')), 64)]",
            "aksPrivEscalationPolicyDeploymentName": "[take(concat(variables('industry'), '-AksPrivEsc', variables('deploymentSuffix')), 64)]",
            "aksHttpsPolicyDeploymentName": "[take(concat(variables('industry'), '-AksHttps', variables('deploymentSuffix')), 64)]",
            "aksPrivilegedPolicyDeploymentName": "[take(concat(variables('industry'), '-AksPrivileged', variables('deploymentSuffix')), 64)]",
            "tlsSslPolicyDeploymentName": "[take(concat(variables('industry'), '-TLSSSL', variables('deploymentSuffix')), 64)]",
            "ipFwPolicyDeploymentName": "[take(concat(variables('industry'), '-IPFwd', variables('deploymentSuffix')), 64)]",
            "publicEndpointPolicyDeploymentName": "[take(concat(variables('industry'), '-PEndpoint', variables('deploymentSuffix')), 64)]",
            "publicEndpointPolicyDefinitionName": "[take(concat(variables('industry'), '-Policy-PEndpoints', variables('deploymentSuffix')), 64)]",
            "privateDnsPolicyDefinitionName": "[take(concat(variables('industry'), '-Policy-PrivateDns', variables('deploymentSuffix')), 64)]",
            "privateDnsPolicyDeploymentName": "[take(concat(variables('industry'), '-PrivDNSAssignment', variables('deploymentSuffix')), 64)]",
            "pipPolicyDeploymentName": "[take(concat(variables('industry'), '-PIP', variables('deploymentSuffix')), 64)]",
            "rdpFromInternetPolicyDeploymentName": "[take(concat(variables('industry'), '-RDP', variables('deploymentSuffix')), 64)]",
            "rdpFromInternetIdentityPolicyDeploymentName": "[take(concat(variables('industry'), '-RDPIdentity', variables('deploymentSuffix')), 64)]",
            "storageHttpsPolicyDeploymentName": "[take(concat(variables('industry'), '-StorageHttps', variables('deploymentSuffix')), 64)]",
            "subnetNsgPolicyDeploymentName": "[take(concat(variables('industry'), '-SubnetNsg', variables('deploymentSuffix')), 64)]",
            "subnetNsgIdentityPolicyDeploymentName": "[take(concat(variables('industry'), '-SubnetNsgIdentity', variables('deploymentSuffix')), 64)]",
            "sqlAuditPolicyDeploymentName": "[take(concat(variables('industry'), '-SqlAudit', variables('deploymentSuffix')), 64)]",
            "sqlEncryptionPolicyDeploymentName": "[take(concat(variables('industry'), '-SqlEncrypt', variables('deploymentSuffix')), 64)]",
            "onlineLzSubs": "[take(concat(variables('industry'), '-OnlineLzs', variables('deploymentSuffix')), 60)]",
            "corpLzSubs": "[take(concat(variables('industry'), '-CorpLzs', variables('deploymentSuffix')), 60)]",
            "corpConnectedMoveLzSubs": "[take(concat(variables('industry'), '-CorpConnLzs', variables('deploymentSuffix')), 50)]",
            "corpConnectedLzSubs": "[take(concat(variables('industry'), '-CorpPeering', variables('deploymentSuffix')), 50)]",
            "privateDnsZoneRgDeploymentName": "[take(concat(variables('industry'), '-PrivDNSRG', variables('deploymentSuffix')), 64)]",
            "privateDnsZonesDeploymentName": "[take(concat(variables('industry'), '-PrivDNSZones', variables('deploymentSuffix')), 35)]",
            "dnsZoneRoleAssignmentDeploymentName": "[take(concat(variables('industry'), '-DNSZoneRole', variables('deploymentSuffix')), 64)]",
            "identityPeeringDeploymentName": "[take(concat(variables('industry'), '-IDPeering', variables('deploymentSuffix')), 64)]",
            "identityVwanPeeringDeploymentName": "[take(concat(variables('industry'), '-IDVwanPeering', variables('deploymentSuffix')), 64)]",
            "corpConnectedLzVwanSubs": "[take(concat(variables('industry'), '-CorpConnLzsVwan', variables('deploymentSuffix')), 50)]",
            "healthIndustry": "[take(concat(variables('industry'), '-Industry-', deployment().location, '-', deployment().name), 64)]",
            "healthPolicyDefinitons": "[take(concat(variables('industry'), '-HealthPolicy', deployment().location, '-', deployment().name), 64)]",
            "nwRgPlatformPolicyAssignment": "[take(concat(variables('industry'), '-NwRgPlatform'), 64)]",
            "nwRgLzPolicyAssignment": "[take(concat(variables('industry'), '-NwRgLz'), 64)]",
            "healthLzSubs": "[take(concat(variables('industry'), '-HealthLzs', deployment().location, '-', deployment().name), 60)]",
            "hitrustHipaaPolicyAssignment": "[take(concat(variables('industry'), '-HipaaHitrust', deployment().location, '-', deployment().name), 60)]",
            "pciPolicyAssignment": "[take(concat(variables('industry'), '-PCI', deployment().location, '-', deployment().name), 60)]",
            "fedrampHighPolicyAssignment": "[take(concat(variables('industry'), '-FedRampHigh', deployment().location, '-', deployment().name), 60)]",
            "fedrampMediumPolicyAssignment": "[take(concat(variables('industry'), '-FedRampMed', deployment().location, '-', deployment().name), 60)]",
            "logStorageDeploymentName": "[take(concat(variables('industry'), '-LogStorage', deployment().location, '-', deployment().name), 64)]"
        },
        "esLiteDeploymentNames": {
            "mgmtGroupLiteDeploymentName": "[take(concat(variables('industry'), '-MgsLite', variables('deploymentSuffix')), 64)]",
            "rdpFromInternetIdentityLitePolicyDeploymentName": "[take(concat(variables('industry'), '-RDPIdentity', variables('deploymentSuffix')), 64)]",
            "azBackupIdentityLitePolicyDeploymentName": "[take(concat(variables('industry'), '-AzBackupIdentity', variables('deploymentSuffix')), 64)]",
            "subnetNsgIdentityLitePolicyDeploymentName": "[take(concat(variables('industry'), '-SubnetNsgIdentity', variables('deploymentSuffix')), 64)]",
            "monitoringLiteDeploymentName": "[take(concat(variables('industry'), '-MonitoringLite', variables('deploymentSuffix')), 64)]",
            "logAnalyticsLitePolicyDeploymentName": "[take(concat(variables('industry'),'-LAPolicyLite', variables('deploymentSuffix')), 64)]",
            "monitoringSolutionsLiteDeploymentName": "[take(concat(variables('industry'), '-SolutionsLite', variables('deploymentSuffix')), 64)]",
            "platformLiteSubscriptionPlacement": "[take(concat(variables('industry'), '-PlatformSubLite', variables('deploymentSuffix')), 64)]",
            "logLiteStorageDeploymentName": "[take(concat(variables('industry'), '-LogStorageLite', deployment().location, '-', deployment().name), 64)]",
            "vnetConnectivityHubLiteDeploymentName": "[take(concat(variables('industry'), '-VnetHubLite', variables('deploymentSuffix')), 64)]",
            "vwanConnectivityHubLiteDeploymentName": "[take(concat(variables('industry'), '-VWanHubLite', variables('deploymentSuffix')), 64)]",
            "nvaConnectivityHubLiteDeploymentName": "[take(concat(variables('industry'), '-NVAHubLite', variables('deploymentSuffix')), 64)]",
            "ddosRgLiteDeploymentName": "[take(concat(variables('industry'), '-DDoSRgLite', variables('deploymentSuffix')), 64)]",
            "ddosLiteDeploymentName": "[take(concat(variables('industry'), '-DDoSLite', variables('deploymentSuffix')), 64)]",
            "ddosHubLitePolicyDeploymentName": "[take(concat(variables('industry'), '-DDoSHubPolicyLite', variables('deploymentSuffix')), 64)]",
            "privateDnsZoneRgLiteDeploymentName": "[take(concat(variables('industry'), '-PrivDNSRGLite', variables('deploymentSuffix')), 64)]",
            "privateDnsZonesLiteDeploymentName": "[take(concat(variables('industry'), '-PrivDNSLite', variables('deploymentSuffix')), 35)]"            

        },
        // Declaring deterministic names for Resource Groups that will be created for platform resources
        "platformRgNames": {
            "mgmtRg": "[concat(parameters('healthPrefix'), '-mgmt')]",
            "connectivityRg": "[concat(parameters('healthPrefix'), '-vnethub-', parameters('location'))]",
            "ddosRg": "[concat(parameters('healthPrefix'), '-ddos')]",
            "privateDnsRg": "[concat(parameters('healthPrefix'), '-privatedns')]",
            "identityVnetRg": "[concat(parameters('healthPrefix'), '-vnet-', parameters('location'))]",
            "lzVnetRg": "[concat(parameters('healthPrefix'), '-vnet-', parameters('location'))]",
            "logNwRg": "[concat(parameters('healthPrefix'), '-nwlog-', parameters('location'))]"
        },
        // Declaring deterministic names for platform resources that will be created
        "platformResourceNames": {
            "logAnalyticsWorkspace": "[concat(parameters('healthPrefix'), '-law')]",
            "logNwStorageAccount": "[take(concat(parameters('healthPrefix'), parameters('location'), uniqueString(deployment().name)), 23)]",
            "automationAccount": "[concat(parameters('healthPrefix'), '-aauto')]",
            "vpnGwName": "[concat(parameters('healthPrefix'), '-vpngw-', parameters('location'))]",
            "erGwName": "[concat(parameters('healthPrefix'), '-ergw-', parameters('location'))]",
            "ddosName": "[concat(parameters('healthPrefix'), '-ddos-', parameters('location'))]",
            "azFwPolicyName": "[concat(parameters('healthPrefix'), '-azfwpolicy-', parameters('location'))]",
            "azFwName": "[concat(parameters('healthPrefix'), '-fw-', parameters('location'))]",
            "azErGwIpName": "[concat(parameters('healthPrefix'), '-erpip-', parameters('location'))]",
            "hubName": "[concat(parameters('healthPrefix'), '-hub-', parameters('location'))]",
            "vwanName": "[concat(parameters('healthPrefix'), '-vwan-', parameters('location'))]",
            "azVpnGwIpName": "[concat(parameters('healthPrefix'), '-gwpip-', parameters('location'))]",
            "azFwIpName": "[concat(parameters('healthPrefix'), '-fwpip-', parameters('location'))]",
            "identityVnet": "[concat(parameters('healthPrefix'), '-vnet-', parameters('location'))]",
            "lzVnet": "[concat(parameters('healthPrefix'), '-vnet-', parameters('location'))]"
        },
        // Declaring deterministic resourceId's for platform resources that will be created
        "singleVsDedicatedMgmtSub": "[if(empty(parameters('managementSubscriptionId')), parameters('singlePlatformSubscriptionId'), parameters('managementSubscriptionId'))]",
        "singleVsDedicatedConnectivitySub": "[if(empty(parameters('connectivitySubscriptionId')), parameters('singlePlatformSubscriptionId'), parameters('connectivitySubscriptionId'))]",
        "singleVsDedicatedIdentitySub": "[if(empty(parameters('identitySubscriptionId')), parameters('singlePlatformSubscriptionId'), parameters('identitySubscriptionId'))]",                
        "platformResourceIds": {
            "logStorageResourceId": "[concat('/subscriptions/', variables('singleVsDedicatedMgmtSub'), '/resourceGroups/', variables('platformRgNames').logNwRg, '/providers/Microsoft.Storage/storageAccounts/', variables('platformResourceNames').logNwStorageAccount)]",
            "logAnalyticsResourceId": "[concat('/subscriptions/', variables('singleVsDedicatedMgmtSub'), '/resourceGroups/', variables('platformRgNames').mgmtRg, '/providers/Microsoft.OperationalInsights/workspaces/', variables('platformResourceNames').logAnalyticsWorkspace)]",
            "automationResourceId": "[concat('/subscriptions/', variables('singleVsDedicatedMgmtSub'), '/resourceGroups/', variables('platformRgNames').mgmtRg, '/providers/Microsoft.Automation/automationAccounts/', variables('platformResourceNames').automationAccount)]",
            "ddosProtectionResourceId": "[concat('/subscriptions/', variables('singleVsDedicatedConnectivitySub'), '/resourceGroups/', variables('platformRgNames').ddosRg, '/providers/Microsoft.Network/ddosProtectionPlans/', variables('platformResourceNames').ddosName)]",
            "vNetHubResourceId": "[concat('/subscriptions/', variables('singleVsDedicatedConnectivitySub'), '/resourceGroups/', variables('platformRgNames').connectivityRg, '/providers/Microsoft.Network/virtualNetworks/', variables('platformResourceNames').hubName)]",
            "vWanHubResourceId": "[concat('/subscriptions/', variables('singleVsDedicatedConnectivitySub'), '/resourceGroups/', variables('platformRgNames').connectivityRg, '/providers/Microsoft.Network/virtualHubs/', variables('platformResourceNames').hubName)]",
            "privateDnsRgResourceId": "[concat('/subscriptions/', variables('singleVsDedicatedConnectivitySub'), '/resourceGroups/', variables('platformRgNames').privateDnsRg)]",
            "azFirewallResourceId": "[concat('/subscriptions/', variables('singleVsDedicatedConnectivitySub'), '/resourceGroups/', variables('platformRgNames').connectivityRg, '/providers/Microsoft.Network/azureFirewalls/', variables('platformResourceNames').azFwName)]"
        },
        // Declaring deterministic resourceId's for ES Lite platform resources (as they will be consolidated into a single platform subscription)
        "deterministicRoleAssignmentGuids": {
            "ddosForConnectivity": "[take(guid(concat(parameters('healthPrefix'), 'ddos')), 10)]",
            "backupForIdentity": "[take(guid(concat(parameters('healthPrefix'), 'idbackup')), 10)]"
        },
        "privateDnsZones": [
            "privatelink.azure-automation.net",
            "privatelink.database.windows.net",
            "privatelink.sql.azuresynapse.net",
            "privatelink.blob.core.windows.net",
            "privatelink.table.core.windows.net",
            "privatelink.queue.core.windows.net",
            "privatelink.file.core.windows.net",
            "privatelink.web.core.windows.net",
            "privatelink.dfs.core.windows.net",
            "privatelink.documents.azure.com",
            "privatelink.mongo.cosmos.azure.com",
            "privatelink.cassandra.cosmos.azure.com",
            "privatelink.gremlin.cosmos.azure.com",
            "privatelink.postgres.database.azure.com",
            "privatelink.mysql.database.azure.com",
            "privatelink.mariadb.database.azure.com",
            "privatelink.vaultcore.azure.net",
            "[concat('privatelink.', parameters('location'), '.azmk8s.io')]",
            "privatelink.search.windows.net",
            "privatelink.azurecr.io",
            "privatelink.azconfig.io",
            "[concat('privatelink.', parameters('location'), '.backup.windowsazure.com')]",
            "[concat(parameters('location'), '.privatelink.siterecovery.windowsazure.com')]",
            "privatelink.servicebus.windows.net",
            "privatelink.azure-devices.net",
            "privatelink.eventgrid.azure.net",
            "privatelink.azurewebsites.net",
            "privatelink.api.azureml.ms",
            "privatelink.notebooks.azure.net",
            "privatelink.service.signalr.net",
            "privatelink.monitor.azure.com",
            "privatelink.oms.opsinsights.azure.com",
            "privatelink.ods.opsinsights.azure.com",
            "privatelink.agentsvc.azure-automation.net",
            "privatelink.cognitiveservices.azure.com",
            "privatelink.afs.azure.net",
            "privatelink.datafactory.azure.com",
            "privatelink.adf.azure.com",
            "privatelink.redis.cache.windows.net"
        ],
        "roleDefinitions": {
            "networkContributor": "4d97b98b-1d4f-4787-a291-c67834d212e7"
        }
    },
    "resources": [
        /*
            The following deployment will create the management group structure and ensure the sustainable, scalable architecture
        */
        {
            // Creating the management group structure
            "condition": "[empty(parameters('singlePlatformSubscriptionId'))]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2019-10-01",
            "name": "[variables('deploymentNames').mgmtGroupDeploymentName]",
            "location": "[deployment().location]",
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').managementGroups]"
                },
                "parameters": {
                    "topLevelManagementGroupPrefix": {
                        "value": "[parameters('healthPrefix')]"
                    }
                }
            }
        },     
        /*
            The following deployments will deploy the required proactive and preventive Azure policies for policy driven governance
        */
        {
            // Deploying Healthcare custom policies. Note: all policies will eventually be moved to built-in policies and codebase will be reduced
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2019-10-01",
            "name": "[variables('deploymentNames').policyDeploymentName]",
            "location": "[deployment().location]",
            "scope": "[concat('Microsoft.Management/managementGroups/', parameters('healthPrefix'))]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').mgmtGroupDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('esLiteDeploymentNames').mgmtGroupLiteDeploymentName)]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').policyDefinitions]"
                },
                "parameters": {
                    "topLevelManagementGroupPrefix": {
                        "value": "[parameters('healthPrefix')]"
                    }
                }
            }
        },
        {
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2021-04-01",
            "location": "[deployment().location]",
            "name": "[variables('deploymentNames').healthPolicyDefinitons]",
            "scope": "[tenantResourceId('Microsoft.Management/managementGroups/', parameters('healthPrefix'))]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').mgmtGroupDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('esLiteDeploymentNames').mgmtGroupLiteDeploymentName)]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').healthPolicyDefinitions]"
                },
                "parameters": {
                    "topLevelManagementGroupPrefix": {
                        "value": "[parameters('healthPrefix')]"
                    }
                }
            }
        },        
        {
            // Deploying Healthcare Policy Initiative to prevent usage of public endpoints for PaaS services using built-in policies
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2019-10-01",
            "name": "[variables('deploymentNames').publicEndpointPolicyDefinitionName]",
            "location": "[deployment().location]",
            "scope": "[concat('Microsoft.Management/managementGroups/', parameters('healthPrefix'))]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').mgmtGroupDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('esLiteDeploymentNames').mgmtGroupLiteDeploymentName)]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').publicEndpointPolicySetDefinition]"
                },
                "parameters": {}
            }
        },
        {
            // Deploying Healthcare Policy Initiative to deploy Private DNS Zones for PaaS services using built-in policies
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2019-10-01",
            "name": "[variables('deploymentNames').privateDnsPolicyDefinitionName]",
            "location": "[deployment().location]",
            "scope": "[concat('Microsoft.Management/managementGroups/', parameters('healthPrefix'))]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').mgmtGroupDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('esLiteDeploymentNames').mgmtGroupLiteDeploymentName)]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').privateDnsZonePolicySetDefinition]"
                },
                "parameters": {}
            }
        },
        {
            // Deploying Healthcare custom data policies
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2019-10-01",
            "name": "[variables('deploymentNames').dataPolicyDeploymentName]",
            "location": "[deployment().location]",
            "scope": "[concat('Microsoft.Management/managementGroups/', parameters('healthPrefix'))]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').mgmtGroupDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('esLiteDeploymentNames').mgmtGroupLiteDeploymentName)]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').dataPolicyDefinitions]"
                },
                "parameters": {
                    "topLevelManagementGroupPrefix": {
                        "value": "[parameters('healthPrefix')]"
                    }
                }
            }
        },                            
        {
            // One of Azure's untold stories.....
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-10-01",
            "name": "[concat('preparingToLaunch', copyIndex())]",
            "location": "[deployment().location]",
            "scope": "[concat('Microsoft.Management/managementGroups/', parameters('healthPrefix'))]",
            "dependsOn": [
                "[variables('deploymentNames').policyDeploymentName]",
                "[variables('deploymentNames').privateDnsPolicyDefinitionName]",
                "[variables('deploymentNames').publicEndpointPolicyDefinitionName]"
            ],
            "copy": {
                "batchSize": 1,
                "count": 20,
                "mode": "Serial",
                "name": "policyCompletion"
            },
            "properties": {
                "mode": "Incremental",
                "template": {
                    "$schema": "https://schema.management.azure.com/schemas/2019-08-01/managementGroupDeploymentTemplate.json#",
                    "contentVersion": "1.0.0.0",
                    "parameters": {},
                    "resources": [],
                    "outputs": {}
                }
            }
        },
        /*
            The following deployments will organize the dedicated platform subscriptions into their respective management groups
        */       
        {
            // Placing management subscription into dedicated management group
            "condition": "[not(empty(parameters('managementSubscriptionId')))]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-10-01",
            "name": "[variables('deploymentNames').mgmtSubscriptionPlacement]",
            "location": "[deployment().location]",
            "scope": "[variables('scopes').managementManagementGroup]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').mgmtGroupDeploymentName)]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').subscriptionPlacement]"
                },
                "parameters": {
                    "targetManagementGroupId": {
                        "value": "[variables('mgmtGroups').management]"
                    },
                    "subscriptionId": {
                        "value": "[parameters('managementSubscriptionId')]"
                    }
                }
            }
        },
        {
            // Placing connectivity subscription into dedicated management group
            "condition": "[not(empty(parameters('connectivitySubscriptionId')))]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-10-01",
            "name": "[variables('deploymentNames').connectivitySubscriptionPlacement]",
            "location": "[deployment().location]",
            "scope": "[variables('scopes').connectivityManagementGroup]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').mgmtGroupDeploymentName)]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').subscriptionPlacement]"
                },
                "parameters": {
                    "targetManagementGroupId": {
                        "value": "[variables('mgmtGroups').connectivity]"
                    },
                    "subscriptionId": {
                        "value": "[parameters('connectivitySubscriptionId')]"
                    }
                }
            }
        },
        {
            // Placing identity subscription into dedicated management group
            "condition": "[not(empty(parameters('identitySubscriptionId')))]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-10-01",
            "name": "[variables('deploymentNames').identitySubscriptionPlacement]",
            "location": "[deployment().location]",
            "scope": "[variables('scopes').identityManagementGroup]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').mgmtGroupDeploymentName)]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').subscriptionPlacement]"
                },
                "parameters": {
                    "targetManagementGroupId": {
                        "value": "[variables('mgmtGroups').identity]"
                    },
                    "subscriptionId": {
                        "value": "[parameters('identitySubscriptionId')]"
                    }
                }
            }
        },
        /*
            The following deployments will optionally configure the governance, security, and monitoring for the Azure platform and landing zones
        */
        {
            // Deploying Log Analytics workspace to management subscription if condition is true
            "condition": "[and(equals(parameters('enableLogAnalytics'), 'Yes'), not(empty(parameters('managementSubscriptionId'))))]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-10-01",
            "name": "[variables('deploymentNames').monitoringDeploymentName]",
            "location": "[deployment().location]",
            "subscriptionId": "[parameters('managementSubscriptionId')]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').mgmtSubscriptionPlacement)]",
                "policyCompletion"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').monitoring]"
                },
                "parameters": {
                    "rgName": {
                        "value": "[variables('platformRgNames').mgmtRg]"
                    },
                    "workspaceName": {
                        "value": "[variables('platformResourceNames').logAnalyticsWorkspace]"
                    },
                    "workspaceRegion": {
                        "value": "[deployment().location]"
                    },
                    "automationAccountName": {
                        "value": "[variables('platformResourceNames').automationAccount]"
                    },
                    "automationRegion": {
                        "value": "[deployment().location]"
                    },
                    "retentionInDays": {
                        "value": "[parameters('retentionInDays')]"
                    }
                }
            }
        },
        {
            // Create storage account for NSG Flow Logs in the management subscription for networking observability
            "condition": "[and(not(empty(parameters('managementSubscriptionId'))), equals(parameters('enableRegulatoryCompliance'), 'HIPAAHITRUST'))]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-10-01",
            "name": "[variables('deploymentNames').logStorageDeploymentName]",
            "location": "[if(empty(parameters('location')), deployment().location, parameters('location'))]",
            "subscriptionId": "[parameters('managementSubscriptionId')]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').mgmtSubscriptionPlacement)]",
                "policyCompletion",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').monitoringDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('esLiteDeploymentNames').monitoringLiteDeploymentName)]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').logStorageAccount]"
                },
                "parameters": {
                    "mgmtStorageRgName": {
                        "value": "[variables('platformRgNames').logNwRg]"
                    },
                    "storageAccountName": {
                        "value": "[variables('platformResourceNames').logNwStorageAccount]"
                    },
                    "storageLocation": {
                        "value": "[if(empty(parameters('location')), deployment().location, parameters('location'))]"
                    }
                }
            }
        },        
        {
            // Deploying Log Analytics solutions to Log Analytics workspace if condition is true
            "condition": "[and(and(not(empty(parameters('managementSubscriptionId'))), equals(parameters('enableLogAnalytics'), 'Yes')),  equals(parameters('enableLogAnalytics'), 'Yes'), or(or(or(or(or(equals(parameters('enableSecuritySolution'), 'Yes'), equals(parameters('enableAgentHealth'), 'Yes')), equals(parameters('enableChangeTracking'), 'Yes')), equals(parameters('enableUpdateMgmt'), 'Yes'), equals(parameters('enableActivityLog'), 'Yes')), equals(parameters('enableVmInsights'), 'Yes')), equals(parameters('enableServiceMap'), 'Yes'), equals(parameters('enableSqlAssessment'), 'Yes')))]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-10-01",
            "name": "[variables('deploymentNames').monitoringSolutionsDeploymentName]",
            "location": "[deployment().location]",
            "subscriptionId": "[parameters('managementSubscriptionId')]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').monitoringDeploymentName)]",
                "policyCompletion"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').monitoringSolutions]"
                },
                "parameters": {
                    "rgName": {
                        "value": "[variables('platformRgNames').mgmtRg]"
                    },
                    "workspaceName": {
                        "value": "[variables('platformResourceNames').logAnalyticsWorkspace]"
                    },
                    "workspaceRegion": {
                        "value": "[deployment().location]"
                    },
                    "enableSecuritySolution": {
                        "value": "[parameters('enableSecuritySolution')]"
                    },
                    "enableAgentHealth": {
                        "value": "[parameters('enableAgentHealth')]"
                    },
                    "enableChangeTracking": {
                        "value": "[parameters('enableChangeTracking')]"
                    },
                    "enableUpdateMgmt": {
                        "value": "[parameters('enableUpdateMgmt')]"
                    },
                    "enableActivityLog": {
                        "value": "[parameters('enableActivityLog')]"
                    },
                    "enableVmInsights": {
                        "value": "[parameters('enableVmInsights')]"
                    },
                    "enableServiceMap": {
                        "value": "[parameters('enableServiceMap')]"
                    },
                    "enableSqlAssessment": {
                        "value": "[parameters('enableSqlAssessment')]"
                    }
                }
            }
        },
        {
            // Assigning Log Analytics workspace policy to management management group if condition is true
            "condition": "[and(equals(parameters('enableLogAnalytics'), 'Yes'), not(empty(parameters('managementSubscriptionId'))))]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-10-01",
            "name": "[variables('deploymentNames').logAnalyticsPolicyDeploymentName]",
            "scope": "[variables('scopes').managementManagementGroup]",
            "location": "[deployment().location]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').mgmtSubscriptionPlacement)]",
                "policyCompletion"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').logAnalyticsPolicyAssignment]"
                },
                "parameters": {
                    "topLevelManagementGroupPrefix": {
                        "value": "[parameters('healthPrefix')]"
                    },
                    "rgName": {
                        "value": "[variables('platformRgNames').mgmtRg]"
                    },
                    "logAnalyticsWorkspaceName": {
                        "value": "[variables('platformResourceNames').logAnalyticsWorkspace]"
                    },
                    "workspaceRegion": {
                        "value": "[deployment().location]"
                    },
                    "automationAccountName": {
                        "value": "[variables('platformResourceNames').automationAccount]"
                    },
                    "automationRegion": {
                        "value": "[deployment().location]"
                    },
                    "retentionInDays": {
                        "value": "[parameters('retentionInDays')]"
                    }
                }
            }
        },
        {
            // Assigning FedRAMP High policy initiative to Healthcare management group if condition is true
            "condition": "[equals(parameters('enableRegulatoryCompliance'), 'FEDRAMPMEDIUM')]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-10-01",
            "name": "[variables('deploymentNames').fedrampMediumPolicyAssignment]",
            "scope": "[variables('scopes').healthManagementGroup]",
            "location": "[deployment().location]",
            "dependsOn": [
                "policyCompletion"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').fedrampMediumPolicyAssignment]"
                },
                "parameters": {
                    "topLevelManagementGroupPrefix": {
                        "value": "[parameters('healthPrefix')]"
                    }
                }
            }
        },
        {
            // Assigning FedRAMP High policy initiative to Healthcare management group if condition is true
            "condition": "[equals(parameters('enableRegulatoryCompliance'), 'FEDRAMPHIGH')]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-10-01",
            "name": "[variables('deploymentNames').fedrampHighPolicyAssignment]",
            "scope": "[variables('scopes').healthManagementGroup]",
            "location": "[deployment().location]",
            "dependsOn": [
                "policyCompletion"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').fedrampHighPolicyAssignment]"
                },
                "parameters": {
                    "topLevelManagementGroupPrefix": {
                        "value": "[parameters('healthPrefix')]"
                    }
                }
            }
        },        
        {
            // Assigning PCI policy initiative to Healthcare management group if condition is true
            "condition": "[equals(parameters('enableRegulatoryCompliance'), 'PCI')]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-10-01",
            "name": "[variables('deploymentNames').pciPolicyAssignment]",
            "scope": "[variables('scopes').healthManagementGroup]",
            "location": "[deployment().location]",
            "dependsOn": [
                "policyCompletion"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').pciPolicyAssignment]"
                },
                "parameters": {
                    "topLevelManagementGroupPrefix": {
                        "value": "[parameters('healthPrefix')]"
                    }
                }
            }
        },        
        {
            // Assigning HIPAA/HITRUST policy initiative to Healthcare management group if condition is true
            "condition": "[equals(parameters('enableRegulatoryCompliance'), 'HIPAAHITRUST')]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-10-01",
            "name": "[variables('deploymentNames').hitrustHipaaPolicyAssignment]",
            "scope": "[variables('scopes').healthManagementGroup]",
            "location": "[deployment().location]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').mgmtSubscriptionPlacement)]",
                "policyCompletion",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').logStorageDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('esLiteDeploymentNames').logLiteStorageDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').monitoringDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('esLiteDeploymentNames').monitoringLiteDeploymentName)]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').hitrustHipaaPolicyAssignment]"
                },
                "parameters": {
                    "topLevelManagementGroupPrefix": {
                        "value": "[parameters('healthPrefix')]"
                    },
                    "DeployDiagnosticSettingsforNetworkSecurityGroupsstoragePrefix": {
                        "value": "[variables('platformResourceNames').logNwStorageAccount]"
                    },
                    "DeployDiagnosticSettingsforNetworkSecurityGroupsrgName": {
                        "value": "[variables('platformRgNames').logNwRg]"
                    }
                }
            }
        },
        {
            // Assigning Azure Security Benchmark policy to intermediate root management group if condition is true
            "condition": "[and(or(not(empty(parameters('singlePlatformSubscriptionId'))), not(empty(parameters('managementSubscriptionId')))), or(equals(parameters('enableLogAnalytics'), 'Yes'), equals(parameters('enableAsc'), 'Yes')))]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-10-01",
            "name": "[variables('deploymentNames').asbPolicyDeploymentName]",
            "scope": "[variables('scopes').healthRootManagementGroup]",
            "location": "[deployment().location]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').mgmtSubscriptionPlacement)]",
                "policyCompletion",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').monitoringDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('esLiteDeploymentNames').monitoringLiteDeploymentName)]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').asbPolicyInitiative]"
                },
                "parameters": {}
            }
        },
        {
            // Assigning Azure Monitor Resource Diagnostics policy to intermediate root management group if condition is true
            "condition": "[and(or(not(empty(parameters('singlePlatformSubscriptionId'))), not(empty(parameters('managementSubscriptionId')))), equals(parameters('enableLogAnalytics'), 'Yes'))]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-10-01",
            "name": "[variables('deploymentNames').resourceDiagnosticsPolicyDeploymentName]",
            "scope": "[variables('scopes').healthRootManagementGroup]",
            "location": "[deployment().location]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').mgmtSubscriptionPlacement)]",
                "[resourceId('Microsoft.Resources/deployments', variables('esLitedeploymentNames').platformLiteSubscriptionPlacement)]",                
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').monitoringDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('esLiteDeploymentNames').monitoringLiteDeploymentName)]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').resourceDiagnosticsInitiative]"
                },
                "parameters": {
                    "topLevelManagementGroupPrefix": {
                        "value": "[parameters('healthPrefix')]"
                    },
                    "logAnalyticsResourceId": {
                        "value": "[variables('platformResourceIds').logAnalyticsResourceId]"
                    }
                }
            }   
        },
        {
            // Assigning Azure Activity Diagnostics Log policy to intermediate root management group if condition is true
            "condition": "[and(or(not(empty(parameters('singlePlatformSubscriptionId'))), not(empty(parameters('managementSubscriptionId')))), equals(parameters('enableLogAnalytics'), 'Yes'))]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-10-01",
            "name": "[variables('deploymentNames').activityDiagnosticsPolicyDeploymentName]",
            "scope": "[variables('scopes').healthRootManagementGroup]",
            "location": "[deployment().location]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').monitoringDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('esLiteDeploymentNames').monitoringLiteDeploymentName)]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').activityDiagnosticsPolicyAssignment]"
                },
                "parameters": {
                    "logAnalyticsResourceId": {
                        "value": "[variables('platformResourceIds').logAnalyticsResourceId]"
                    },
                    "topLevelManagementGroupPrefix": {
                        "value": "[parameters('healthPrefix')]"
                    }
                }
            }   
        },
        {
            // Assigning Azure Security Center configuration policy initiative to intermediate root management group if condition is true
            "condition": "[and(or(not(empty(parameters('managementSubscriptionId'))), not(empty(parameters('singlePlatformSubscriptionId')))), equals(parameters('enableAsc'), 'Yes'), equals(environment().resourceManager, 'https://management.azure.com/'))]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-10-01",
            "name": "[variables('deploymentNames').ascPolicyDeploymentName]",
            "scope": "[variables('scopes').healthRootManagementGroup]",
            "location": "[deployment().location]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').monitoringDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('esLiteDeploymentNames').monitoringLiteDeploymentName)]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').ascConfigPolicyInitiative]"
                },
                "parameters": {
                    "logAnalyticsResourceId": {
                        "value": "[variables('platformResourceIds').logAnalyticsResourceId]"
                    },
                    "topLevelManagementGroupPrefix": {
                        "value": "[parameters('healthPrefix')]"
                    },
                    "emailContactAsc": {
                        "value": "[parameters('emailContactAsc')]"
                    },
                    "enableAscForServers": {
                        "value": "[parameters('enableAscForServers')]"
                    },
                    "enableAscForSql": {
                        "value": "[parameters('enableAscForSql')]"
                    },
                    "enableAscForAppServices": {
                        "value": "[parameters('enableAscForAppServices')]"
                    },
                    "enableAscForStorage": {
                        "value": "[parameters('enableAscForStorage')]"
                    },
                    "enableAscForKeyVault": {
                        "value": "[parameters('enableAscForKeyVault')]"
                    },
                    "enableAscForSqlOnVm": {
                        "value": "[parameters('enableAscForSqlOnVm')]"
                    },
                    "enableAscForContainers": {
                        "value": "[parameters('enableAscForContainers')]"
                    },
                    "enableAscForArm": {
                        "value": "[parameters('enableAscForArm')]"
                    },
                    "enableAscForDns": {
                        "value": "[parameters('enableAscForDns')]"
                    },
                    "enableAscForOssDb": {
                        "value": "[parameters('enableAscForOssDb')]"
                    }
                }
            }   
        },
        {
            // Az Gov Only - Assigning Azure Security Center configuration policy initiative to intermediate root management group if condition is true
            "condition": "[and(or(not(empty(parameters('managementSubscriptionId'))), not(empty(parameters('singlePlatformSubscriptionId')))), equals(parameters('enableAsc'), 'Yes'), equals(environment().resourceManager, 'https://management.usgovcloudapi.net'))]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-10-01",
            "name": "[variables('deploymentNames').ascGovPolicyDeploymentName]",
            "scope": "[variables('scopes').healthRootManagementGroup]",
            "location": "[deployment().location]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').monitoringDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('esLiteDeploymentNames').monitoringLiteDeploymentName)]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').govAscPolicyAssignment]"
                },
                "parameters": {
                    "logAnalyticsResourceId": {
                        "value": "[variables('platformResourceIds').logAnalyticsResourceId]"
                    },
                    "topLevelManagementGroupPrefix": {
                        "value": "[parameters('healthPrefix')]"
                    },
                    "emailContactAsc": {
                        "value": "[parameters('emailContactAsc')]"
                    },
                    "enableAscForServers": {
                        "value": "[parameters('enableAscForServers')]"
                    },
                    "enableAscForSql": {
                        "value": "[parameters('enableAscForSql')]"
                    },
                    "enableAscForStorage": {
                        "value": "[parameters('enableAscForStorage')]"
                    },
                    "enableAscForContainers": {
                        "value": "[parameters('enableAscForContainers')]"
                    },
                    "enableAscForArm": {
                        "value": "[parameters('enableAscForArm')]"
                    },
                    "enableAscForDns": {
                        "value": "[parameters('enableAscForDns')]"
                    }
                }
            }   
        },        
        /*
            The following optional deployment will configure virtual network hub into the connectivity subscription
        */
        {
            // Creating resource group for DDoS Standard Protection
            "condition": "[and(equals(parameters('enableDdoS'), 'Yes'), not(empty(parameters('connectivitySubscriptionId'))))]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-10-01",
            "name": "[variables('deploymentNames').ddosRgDeploymentName]",
            "subscriptionId": "[parameters('connectivitySubscriptionId')]",
            "location": "[deployment().location]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').connectivitySubscriptionPlacement)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').activityDiagnosticsPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').asbPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').ascPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').ascGovPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').resourceDiagnosticsPolicyDeploymentName)]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').resourceGroup]"
                },
                "parameters": {
                    "rgName": {
                        "value": "[variables('platformRgNames').ddosRg]"
                    },
                    "location": {
                        "value": "[parameters('location')]"
                    }
                }
            }
        },
        {
            // Creating DDoS protection plan into the connectivity subscription
            "condition": "[and(equals(parameters('enableDdoS'), 'Yes'), not(empty(parameters('connectivitySubscriptionId'))))]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-10-01",
            "name": "[variables('deploymentNames').ddosDeploymentName]",
            "subscriptionId": "[parameters('connectivitySubscriptionId')]",
            "resourceGroup": "[variables('platformRgNames').ddosRg]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').ddosRgDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').activityDiagnosticsPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').resourceDiagnosticsPolicyDeploymentName)]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').ddosProtection]"
                },
                "parameters": {
                    "ddosName": {
                        "value": "[variables('platformResourceNames').ddosName]"
                    },
                    "location": {
                        "value": "[parameters('location')]"
                    }
                }
            }
        },
        {
            // Assigning DDoS Policy to enforce DDoS on virtual networks if condition evaluates to true
            "condition": "[and(or(equals(parameters('enableDdoS'), 'Yes'), equals(parameters('enableDdoS'), 'Audit')), not(empty(parameters('connectivitySubscriptionId'))))]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-10-01",
            "name": "[variables('deploymentNames').ddosHubPolicyDeploymentName]",
            "scope": "[variables('scopes').connectivityManagementGroup]",
            "location": "[deployment().location]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').ddosDeploymentName)]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').ddosPolicyAssignment]"
                },
                "parameters": {
                    "ddosPlanResourceId": {
                        "value": "[variables('platformResourceIds').ddosProtectionResourceId]"
                    },
                    "topLevelManagementGroupPrefix": {
                        "value": "[variables('deterministicRoleAssignmentGuids').ddosForConnectivity]"
                    },
                    "enforcementMode": {
                        "value": "[if(equals(parameters('enableDdoS'), 'Yes'), 'Default', 'DoNotEnforce')]"
                    }
                }
            }   
        },
        {
            // Creating the virtual network hub (hub and spoke)
            "condition": "[and(not(empty(parameters('connectivitySubscriptionId'))),equals(parameters('enableHub'), 'vhub'))]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-10-01",
            "scope": "[variables('scopes').connectivityManagementGroup]",
            "name": "[variables('deploymentNames').vnetConnectivityHubDeploymentName]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').connectivitySubscriptionPlacement)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').activityDiagnosticsPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').resourceDiagnosticsPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').asbPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').ascPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').ascGovPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').ddosDeploymentName)]"
            ],
            "location": "[deployment().location]",
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').vnetConnectivityHub]"
                },
                "parameters": {
                    "topLevelManagementGroupPrefix": {
                        "value": "[parameters('healthPrefix')]"
                    },
                    "ddosPlanResourceId": {
                        "value": "[variables('platformResourceIds').ddosProtectionResourceId]"
                    },
                    "enableHub": {
                        "value": "[parameters('enableHub')]"
                    },
                    "enableAzFw": {
                        "value": "[parameters('enableAzFw')]"
                    },
                    "addressPrefix": {
                        "value": "[parameters('addressPrefix')]"
                    },
                    "enableVpnGw": {
                        "value": "[parameters('enableVpnGw')]"
                    },
                    "enableErGw": {
                        "value": "[parameters('enableErGw')]"
                    },
                    "enableDdoS": {
                        "value": "[parameters('enableDdoS')]"
                    },
                    "location": {
                        "value": "[parameters('location')]"
                    },
                    "connectivitySubscriptionId": {
                        "value": "[parameters('connectivitySubscriptionId')]"
                    },
                    "subnetMaskForAzFw": {
                        "value": "[parameters('subnetMaskForAzFw')]"
                    },
                    "subnetMaskForGw": {
                        "value": "[parameters('subnetMaskForGw')]"
                    },
                    "firewallSku": {
                        "value": "[parameters('firewallSku')]"
                    },
                    "firewallZones": {
                        "value": "[parameters('firewallZones')]"
                    },
                    "enableAzFwDnsProxy": {
                        "value": "[parameters('enableAzFwDnsProxy')]"
                    },
                    "gwRegionalOrAz": {
                        "value": "[parameters('gwRegionalOrAz')]"
                    },
                    "gwAzSku": {
                        "value": "[parameters('gwAzSku')]"
                    },
                    "gwRegionalSku": {
                        "value": "[parameters('gwRegionalSku')]"
                    },
                    "erRegionalOrAz": {
                        "value": "[parameters('erRegionalOrAz')]"
                    },
                    "erAzSku": {
                        "value": "[parameters('erAzSku')]"
                    },
                    "erRegionalSku": {
                        "value": "[parameters('erRegionalSku')]"
                    }
                }
            }
        },
        {
            // Creating the virtual network hub (with NVA)
            "condition": "[and(not(empty(parameters('connectivitySubscriptionId'))),equals(parameters('enableHub'), 'nva'))]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-10-01",
            "scope": "[variables('scopes').connectivityManagementGroup]",
            "name": "[variables('deploymentNames').nvaConnectivityHubDeploymentName]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').connectivitySubscriptionPlacement)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').activityDiagnosticsPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').resourceDiagnosticsPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').asbPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').ascPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').ascGovPolicyDeploymentName)]",                
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').ddosDeploymentName)]"
            ],
            "location": "[deployment().location]",
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').nvaConnectivityHub]"
                },
                "parameters": {
                    "topLevelManagementGroupPrefix": {
                        "value": "[parameters('healthPrefix')]"
                    },
                    "ddosPlanResourceId": {
                        "value": "[variables('platformResourceIds').ddosProtectionResourceId]"
                    },
                    "enableHub": {
                        "value": "[parameters('enableHub')]"
                    },
                    "addressPrefix": {
                        "value": "[parameters('addressPrefix')]"
                    },
                    "enableVpnGw": {
                        "value": "[parameters('enableVpnGw')]"
                    },
                    "enableErGw": {
                        "value": "[parameters('enableErGw')]"
                    },
                    "enableDdoS": {
                        "value": "[parameters('enableDdoS')]"
                    },
                    "location": {
                        "value": "[parameters('location')]"
                    },
                    "connectivitySubscriptionId": {
                        "value": "[parameters('connectivitySubscriptionId')]"
                    },
                    "subnetMaskForGw": {
                        "value": "[parameters('subnetMaskForGw')]"
                    },
                    "gwRegionalOrAz": {
                        "value": "[parameters('gwRegionalOrAz')]"
                    },
                    "gwAzSku": {
                        "value": "[parameters('gwAzSku')]"
                    },
                    "gwRegionalSku": {
                        "value": "[parameters('gwRegionalSku')]"
                    },
                    "erRegionalOrAz": {
                        "value": "[parameters('erRegionalOrAz')]"
                    },
                    "erAzSku": {
                        "value": "[parameters('erAzSku')]"
                    },
                    "erRegionalSku": {
                        "value": "[parameters('erRegionalSku')]"
                    }
                }
            }
        },        
        {
            // Creating the VWAN network hub (Microsoft managed)
            "condition": "[and(not(empty(parameters('connectivitySubscriptionId'))),equals(parameters('enableHub'), 'vwan'))]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-10-01",
            "scope": "[variables('scopes').connectivityManagementGroup]",
            "name": "[variables('deploymentNames').vwanConnectivityHubDeploymentName]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').connectivitySubscriptionPlacement)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').activityDiagnosticsPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').resourceDiagnosticsPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').asbPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').ascPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').ascGovPolicyDeploymentName)]",                
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').ddosDeploymentName)]"
            ],
            "location": "[deployment().location]",
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').vwanConnectivityHub]"
                },
                "parameters": {
                    "topLevelManagementGroupPrefix": {
                        "value": "[parameters('healthPrefix')]"
                    },
                    "enableHub": {
                        "value": "[parameters('enableHub')]"
                    },
                    "enableAzFw": {
                        "value": "[parameters('enableAzFw')]"
                    },
                    "firewallSku": {
                        "value": "[parameters('firewallSku')]"
                    },
                    "addressPrefix": {
                        "value": "[parameters('addressPrefix')]"
                    },
                    "enableVpnGw": {
                        "value": "[parameters('enableVpnGw')]"
                    },
                    "enableErGw": {
                        "value": "[parameters('enableErGw')]"
                    },
                    "location": {
                        "value": "[parameters('location')]"
                    },
                    "connectivitySubscriptionId": {
                        "value": "[parameters('connectivitySubscriptionId')]"
                    },
                    "expressRouteScaleUnit": {
                        "value": "[parameters('expressRouteScaleUnit')]"
                    },
                    "vpnGateWayScaleUnit": {
                        "value": "[parameters('vpnGateWayScaleUnit')]"
                    }
                }
            }
        },
        {
            // Creating resource group for Private DNS Zones
            "condition": "[and(equals(parameters('enablePrivateDnsZones'), 'Yes'), not(empty(parameters('connectivitySubscriptionId'))))]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-10-01",
            "name": "[variables('deploymentNames').privateDnsZoneRgDeploymentName]",
            "subscriptionId": "[parameters('connectivitySubscriptionId')]",
            "location": "[deployment().location]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').connectivitySubscriptionPlacement)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').activityDiagnosticsPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').asbPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').ascPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').ascGovPolicyDeploymentName)]",                
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').resourceDiagnosticsPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').vnetConnectivityHubDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').vwanConnectivityHubDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').nvaConnectivityHubDeploymentName)]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').resourceGroup]"
                },
                "parameters": {
                    "rgName": {
                        "value": "[variables('platformRgNames').privateDnsRg]"
                    },
                    "location": {
                        "value": "[parameters('location')]"
                    }
                }
            }
        },
        {
            // Creating Private DNS Zones into the connectivity subscription
            "condition": "[and(equals(parameters('enablePrivateDnsZones'), 'Yes'), not(empty(parameters('connectivitySubscriptionId'))))]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-10-01",
            "name": "[concat(variables('deploymentNames').privateDnsZonesDeploymentName, copyIndex())]",
            "subscriptionId": "[parameters('connectivitySubscriptionId')]",
            "resourceGroup": "[variables('platformRgNames').privateDnsRg]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').privateDnsZoneRgDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').activityDiagnosticsPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').resourceDiagnosticsPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').vnetConnectivityHubDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').vwanConnectivityHubDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').nvaConnectivityHubDeploymentName)]"
            ],
            "copy": {
                "name": "dnsZones",
                "count": "[length(variables('privateDnsZones'))]"
            },
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').privateDnsZones]"
                },
                "parameters": {
                    "privateDnsZoneName": {
                        "value": "[concat(variables('privateDnsZones')[copyIndex()])]"
                    },
                    "connectivityHubResourceId": {
                        "value": "[variables('platformResourceIds').vNetHubResourceId]"
                    }
                }
            }
        },           
        {   // Creating Policy Assignment for NetworkWatcherRG on Platform scope
            "condition": "[equals(parameters('enableNetworkWatcher'), 'Yes')]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2021-04-01",
            "location": "[deployment().location]",
            "name": "[variables('deploymentNames').nwRgPlatformPolicyAssignment]",
            "scope": "[variables('scopes').platformManagementGroup]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').healthPolicyDefinitons)]",
                "policyCompletion"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').nwRgPolicyAssignment]"
                },
                "parameters": {
                    "topLevelManagementGroupPrefix": {
                        "value": "[parameters('healthPrefix')]"
                    },
                    "enforcementMode": {
                        "value": "[if(equals(parameters('enableNetworkWatcher'), 'Yes'), 'Default', 'DoNotEnforce')]"
                    },
                    "location": {
                        "value": "[if(empty(parameters('location')), deployment().location, parameters('location'))]"
                    }
                }
            }
        },
        /*
            The following deployments will deploy and configure the Azure policy governance for the landing zones
        */     
        {
            // Creating Policy Assignment for NetworkWatcherRG on Landing Zone scope
            "condition": "[equals(parameters('enableNetworkWatcher'), 'Yes')]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2021-04-01",
            "location": "[deployment().location]",
            "name": "[variables('deploymentNames').nwRgLzPolicyAssignment]",
            "scope": "[variables('scopes').lzsManagementGroup]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').healthPolicyDefinitons)]",
                "policyCompletion"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').nwRgPolicyAssignment]"
                },
                "parameters": {
                    "topLevelManagementGroupPrefix": {
                        "value": "[parameters('healthPrefix')]"
                    },
                    "enforcementMode": {
                        "value": "[if(equals(parameters('enableNetworkWatcher'), 'Yes'), 'Default', 'DoNotEnforce')]"
                    },
                    "location": {
                        "value": "[if(empty(parameters('location')), deployment().location, parameters('location'))]"
                    }
                }
            }
        },
        {
            // Deploying Private DNS Zones policy assignment for PaaS services using built-in policies
            "condition": "[or(equals(parameters('enablePrivateDnsZonesForLzs'), 'Yes'), equals(parameters('enablePrivateDnsZonesForLzs'), 'Audit'))]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2019-10-01",
            "name": "[variables('deploymentNames').privateDnsPolicyDeploymentName]",
            "location": "[deployment().location]",
            "scope": "[variables('scopes').corpManagementGroup]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').mgmtGroupDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('esLiteDeploymentNames').mgmtGroupLiteDeploymentName)]",
                "dnsZones",
                "dnsZonesLite",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').privateDnsPolicyDefinitionName)]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').privateDnsZonePolicyAssignment]"
                },
                "parameters": {
                    "topLevelManagementGroupPrefix": {
                        "value": "[parameters('healthPrefix')]"
                    },
                    "location": {
                        "value": "[parameters('location')]"
                    },
                    "dnsZoneResourceGroupId": {
                        "value": "[variables('platformResourceIds').privateDnsRgResourceId]"
                    },
                    "enforcementMode": {
                        "value": "[if(equals(parameters('enablePrivateDnsZonesForLzs'), 'Yes'), 'Default', 'DoNotEnforce')]"
                    }
                }
            }
        },
        {
            // Assigning RBAC for Private DNS Zone Policy assignment to the connectivity hub
            "condition": "[equals(parameters('enablePrivateDnsZonesForLzs'), 'Yes')]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2019-10-01",
            "name": "[variables('deploymentNames').dnsZoneRoleAssignmentDeploymentName]",
            "location": "[deployment().location]",
            "subscriptionId": "[variables('singleVsDedicatedConnectivitySub')]",
            "dependsOn": [
                "[variables('deploymentNames').privateDnsPolicyDeploymentName]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').roleAssignments]"
                },
                "parameters": {
                    "topLevelManagementGroupPrefix": {
                        "value": "[parameters('healthPrefix')]"
                    },
                    "principalId": {
                        "value": "[if(equals(parameters('enablePrivateDnsZonesForLzs'), 'Yes'), reference(variables('deploymentNames').privateDnsPolicyDeploymentName).outputs.principalId.value, 'na')]"
                    },
                    "roleDefinitionId": {
                        "value": "[variables('roleDefinitions').networkContributor]"
                    }
                }
            }
        },        
        {
            // Assigning Azure Monitor for VMs policy initiative to intermediate root management group if condition is true
            "condition": "[and(or(not(empty(parameters('managementSubscriptionId'))), not(empty(parameters('singlePlatformSubscriptionId')))), equals(parameters('enableLogAnalytics'), 'Yes'), or(equals(parameters('enableVmMonitoring'), 'Yes'), equals(parameters('enableVmMonitoring'), 'Audit')))]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-10-01",
            "name": "[variables('deploymentNames').azVmMonitorPolicyDeploymentName]",
            "scope": "[variables('scopes').healthRootManagementGroup]",
            "location": "[deployment().location]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').monitoringDeploymentName)]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').azVmMonitorPolicyAssignment]"
                },
                "parameters": {
                    "logAnalyticsResourceId": {
                        "value": "[variables('platformResourceIds').logAnalyticsResourceId]"
                    },
                    "topLevelManagementGroupPrefix": {
                        "value": "[parameters('healthPrefix')]"
                    },
                    "enforcementMode": {
                        "value": "[if(equals(parameters('enableVmMonitoring'), 'Yes'), 'Default', 'DoNotEnforce')]"
                    }
                }
            }   
        },
        {
            // Assigning Azure Monitor for VMSS policy initiative to intermediate root management group if condition is true
            "condition": "[and(or(not(empty(parameters('managementSubscriptionId'))), not(empty(parameters('singlePlatformSubscriptionId')))), equals(parameters('enableLogAnalytics'), 'Yes'), or(equals(parameters('enableVmssMonitoring'), 'Yes'), equals(parameters('enableVmMonitoring'), 'Audit')))]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-10-01",
            "name": "[variables('deploymentNames').azVmssMonitorPolicyDeploymentName]",
            "scope": "[variables('scopes').healthRootManagementGroup]",
            "location": "[deployment().location]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').monitoringDeploymentName)]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').azVmssMonitorPolicyAssignment]"
                },
                "parameters": {
                    "logAnalyticsResourceId": {
                        "value": "[variables('platformResourceIds').logAnalyticsResourceId]"
                    },
                    "topLevelManagementGroupPrefix": {
                        "value": "[parameters('healthPrefix')]"
                    },
                    "enforcementMode": {
                        "value": "[if(equals(parameters('enableVmssMonitoring'), 'Yes'), 'Default', 'DonNotEnforce')]"
                    }
                }
            }
        },        
        {
            // Assigning Azure Backup policy to landing zones management group if condition is true
            "condition": "[or(equals(parameters('enableVmBackup'), 'Yes'), equals(parameters('enableVmBackup'), 'Audit'))]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-10-01",
            "name": "[variables('deploymentNames').azBackupLzPolicyDeploymentName]",
            "scope": "[variables('scopes').lzsManagementGroup]",
            "location": "[deployment().location]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').policyDeploymentName)]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').azVmBackupPolicyAssignment]"
                },
                "parameters": {
                    "topLevelManagementGroupPrefix": {
                        "value": "[parameters('healthPrefix')]"
                    },
                    "enforcementMode": {
                        "value": "[if(equals(parameters('enableVmBackup'), 'Yes'), 'Default', 'DoNotEnforce')]"
                    }                    
                }
            }
        },
        {
            // Assigning DDoS Policy to enforce DDoS on virtual networks in landing zones management group if condition evaluates to true
            "condition": "[and(or(equals(parameters('enableLzDdoS'), 'Yes'), equals(parameters('enableLzDdoS'), 'Audit')), not(empty(parameters('connectivitySubscriptionId'))))]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-10-01",
            "name": "[variables('deploymentNames').ddosLzPolicyDeploymentName]",
            "scope": "[variables('scopes').lzsManagementGroup]",
            "location": "[deployment().location]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').ddosDeploymentName)]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').ddosPolicyAssignment]"
                },
                "parameters": {
                    "ddosPlanResourceId": {
                        "value": "[variables('platformResourceIds').ddosProtectionResourceId]"
                    },
                    "topLevelManagementGroupPrefix": {
                        "value": "[parameters('healthPrefix')]"
                    },
                    "enforcementMode": {
                        "value": "[if(equals(parameters('enableLzDdoS'), 'Yes'), 'Default', 'DoNotEnforce')]"
                    }
                }
            }   
        },
        {
            // Assigning Azure Policy to prevent Databricks using public IP
            "condition": "[or(equals(parameters('denyDatabricksPip'), 'Yes'), equals(parameters('denyDatabricksPip'), 'Audit'))]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-10-01",
            "name": "[variables('deploymentNames').databricksPipDeploymentName]",
            "scope": "[variables('scopes').corpManagementGroup]",
            "location": "[deployment().location]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').dataPolicyDeploymentName)]",
                "policyCompletion"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').databricksPip]"
                },
                "parameters": {
                    "topLevelManagementGroupPrefix": {
                        "value": "[parameters('healthPrefix')]"
                    },
                    "enforcementMode": {
                        "value": "[if(equals(parameters('denyDatabricksPip'), 'Yes'), 'Default', 'DoNotEnforce')]"
                    }                    
                }
            }
        },
        {
            // Assigning Azure Policy to prevent Databricks sku
            "condition": "[or(equals(parameters('denyDatabricksSku'), 'Yes'), equals(parameters('denyDatabricksSku'), 'Audit'))]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-10-01",
            "name": "[variables('deploymentNames').databricksSkuDeploymentName]",
            "scope": "[variables('scopes').corpManagementGroup]",
            "location": "[deployment().location]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').dataPolicyDeploymentName)]",
                "policyCompletion"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').databricksSku]"
                },
                "parameters": {
                    "topLevelManagementGroupPrefix": {
                        "value": "[parameters('healthPrefix')]"
                    },
                    "enforcementMode": {
                        "value": "[if(equals(parameters('denyDatabricksSku'), 'Yes'), 'Default', 'DoNotEnforce')]"
                    }                    
                }
            }
        },
        {
            // Assigning Azure Policy to prevent Databricks sku
            "condition": "[or(equals(parameters('denyDatabricksVnet'), 'Yes'), equals(parameters('denyDatabricksVnet'), 'Audit'))]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-10-01",
            "name": "[variables('deploymentNames').databricksVnetDeploymentName]",
            "scope": "[variables('scopes').corpManagementGroup]",
            "location": "[deployment().location]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').dataPolicyDeploymentName)]",
                "policyCompletion"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').databricksVnet]"
                },
                "parameters": {
                    "topLevelManagementGroupPrefix": {
                        "value": "[parameters('healthPrefix')]"
                    },
                    "enforcementMode": {
                        "value": "[if(equals(parameters('denyDatabricksVnet'), 'Yes'), 'Default', 'DoNotEnforce')]"
                    }                    
                }
            }
        },               
        {
            // Assigning Azure Policy enablement policy for AKS to landing zones management group if condition is true
            "condition": "[or(equals(parameters('enableAksPolicy'), 'Yes'), equals(parameters('enableAksPolicy'), 'Audit'))]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-10-01",
            "name": "[variables('deploymentNames').azPolicyForAksPolicyDeploymentName]",
            "scope": "[variables('scopes').lzsManagementGroup]",
            "location": "[deployment().location]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').policyDeploymentName)]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').azPolicyForAksPolicyAssignment]"
                },
                "parameters": {
                    "topLevelManagementGroupPrefix": {
                        "value": "[parameters('healthPrefix')]"
                    },
                    "enforcementMode": {
                        "value": "[if(equals(parameters('enableaksPolicy'), 'Yes'), 'Default', 'DoNotEnforce')]"
                    }                    
                }
            }
        },
        {
            // Assigning Aks Priv Escalation policy to landing zones management group if condition is true
            "condition": "[or(equals(parameters('denyAksPrivilegedEscalation'), 'Yes'), equals(parameters('denyAksPrivilegedEscalation'), 'Audit'))]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-10-01",
            "name": "[variables('deploymentNames').aksPrivEscalationPolicyDeploymentName]",
            "scope": "[variables('scopes').lzsManagementGroup]",
            "location": "[deployment().location]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').policyDeploymentName)]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').aksPrivEscalationPolicyAssignment]"
                },
                "parameters": {
                    "enforcementMode": {
                        "value": "[if(equals(parameters('denyAksPrivilegedEscalation'), 'Yes'), 'Default', 'DoNotEnforce')]"
                    }
                }
            }
        },
        {
            // Assigning Aks Priviliged policy to landing zones management group if condition is true
            "condition": "[or(equals(parameters('denyAksPrivileged'), 'Yes'), equals(parameters('denyAksPrivileged'), 'Audit'))]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-10-01",
            "name": "[variables('deploymentNames').aksPrivilegedPolicyDeploymentName]",
            "scope": "[variables('scopes').lzsManagementGroup]",
            "location": "[deployment().location]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').policyDeploymentName)]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').aksPrivilegedPolicyAssignment]"
                },
                "parameters": {
                    "enforcementMode": {
                        "value": "[if(equals(parameters('denyAksPrivileged'), 'Yes'), 'Default', 'DoNotEnforce')]"
                    }                    
                }
            }
        },
        {
            // Assigning Https enforcement for AKS policy to landing zones management group if condition is true
            "condition": "[or(equals(parameters('denyHttpIngressForAks'), 'Yes'), equals(parameters('denyHttpIngressForAks'), 'Audit'))]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-10-01",
            "name": "[variables('deploymentNames').aksHttpsPolicyDeploymentName]",
            "scope": "[variables('scopes').lzsManagementGroup]",
            "location": "[deployment().location]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').policyDeploymentName)]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').aksHttpsPolicyAssignment]"
                },
                "parameters": {
                    "enforcementMode": {
                        "value": "[if(equals(parameters('denyHttpIngressForAks'), 'Yes'), 'Default', 'DoNotEnforce')]"
                    }                    
                }
            }
        },
        {
            // Assigning TLS-SSL policy initiative to landing zones management group if condition is true
            "condition": "[or(equals(parameters('enableEncryptionInTransit'), 'Yes'), equals(parameters('enableEncryptionInTransit'), 'Audit'))]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-10-01",
            "name": "[variables('deploymentNames').tlsSslPolicyDeploymentName]",
            "scope": "[variables('scopes').lzsManagementGroup]",
            "location": "[deployment().location]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').policyDeploymentName)]",
                "policyCompletion"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').tlsSslPolicyAssignment]"
                },
                "parameters": {
                    "topLevelManagementGroupPrefix": {
                        "value": "[parameters('healthPrefix')]"
                    },
                    "enforcementMode": {
                        "value": "[if(equals(parameters('enableEncryptionInTransit'), 'Yes'), 'Default', 'DoNotEnforce')]"
                    }                    
                }
            }
        },
        {
            // Assigning IP Fwd policy to landing zones management group if condition is true
            "condition": "[equals(parameters('denyIpForwarding'), 'Yes')]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-10-01",
            "name": "[variables('deploymentNames').ipFwPolicyDeploymentName]",
            "scope": "[variables('scopes').lzsManagementGroup]",
            "location": "[deployment().location]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').policyDeploymentName)]",
                "policyCompletion"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').ipFwdPolicyAssignment]"
                },
                "parameters": {
                    "enforcementMode": {
                        "value": "Default"
                    }                    
                }
            }
        },
        {
            // Assigning deny public endpoint initiative to corp connected landing zones management group if condition is true
            "condition": "[equals(parameters('denyPublicEndpoints'), 'Yes')]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-10-01",
            "name": "[variables('deploymentNames').publicEndpointPolicyDeploymentName]",
            "scope": "[variables('scopes').corpManagementGroup]",
            "location": "[deployment().location]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').policyDeploymentName)]",
                "policyCompletion"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').publicEndpointPolicyAssignment]"
                },
                "parameters": {
                    "topLevelManagementGroupPrefix": {
                        "value": "[parameters('healthPrefix')]"
                    },
                    "enforcementMode": {
                        "value": "Default"
                    }                    
                }
            }
        },
        {
            // Assigning deny rpd from internet policy landing zones management group if condition is true
            "condition": "[equals(parameters('denyRdp'), 'Yes')]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-10-01",
            "name": "[variables('deploymentNames').rdpFromInternetPolicyDeploymentName]",
            "scope": "[variables('scopes').lzsManagementGroup]",
            "location": "[deployment().location]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').policyDeploymentName)]",
                "policyCompletion"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').rdpFromInternetPolicyAssignment]"
                },
                "parameters": {
                    "topLevelManagementGroupPrefix": {
                        "value": "[parameters('healthPrefix')]"
                    },
                    "enforcementMode": {
                        "value": "Default"
                    }                    
                }
            }
        },
        {
            // Assigning deny storage without https policy to landing zones management group if condition is true
            "condition": "[equals(parameters('enableStorageHttps'), 'Yes')]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-10-01",
            "name": "[variables('deploymentNames').storageHttpsPolicyDeploymentName]",
            "scope": "[variables('scopes').lzsManagementGroup]",
            "location": "[deployment().location]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').policyDeploymentName)]",
                "policyCompletion"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').storageHttpsPolicyAssignment]"
                },
                "parameters": {
                    "enforcementMode": {
                        "value": "Default"
                    }                    
                }
            }
        },
        {
            // Assigning deny subnet without nsg policy to landing zones management group if condition is true
            "condition": "[equals(parameters('denySubnetWithoutNsg'), 'Yes')]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-10-01",
            "name": "[variables('deploymentNames').subnetNsgPolicyDeploymentName]",
            "scope": "[variables('scopes').lzsManagementGroup]",
            "location": "[deployment().location]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').policyDeploymentName)]",
                "policyCompletion"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').subnetNsgPolicyAssignment]"
                },
                "parameters": {
                    "topLevelManagementGroupPrefix": {
                        "value": "[parameters('healthPrefix')]"
                    },
                    "enforcementMode": {
                        "value": "Default"
                    }                    
                }
            }
        },
        {
            // Assigning sql audit policy to landing zones management group if condition is true
            "condition": "[equals(parameters('enableSqlAudit'), 'Yes')]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-10-01",
            "name": "[variables('deploymentNames').sqlAuditPolicyDeploymentName]",
            "scope": "[variables('scopes').lzsManagementGroup]",
            "location": "[deployment().location]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').policyDeploymentName)]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').sqlAuditPolicyAssignment]"
                },
                "parameters": {
                    "topLevelManagementGroupPrefix": {
                        "value": "[parameters('healthPrefix')]"
                    },
                    "enforcementMode": {
                        "value": "Default"
                    }                    
                }
            }
        },
        {
            // Assigning sql encryption policy to landing zones management group if condition is true
            "condition": "[equals(parameters('enableSqlEncryption'), 'Yes')]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-10-01",
            "name": "[variables('deploymentNames').sqlEncryptionPolicyDeploymentName]",
            "scope": "[variables('scopes').lzsManagementGroup]",
            "location": "[deployment().location]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').policyDeploymentName)]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').sqlEncryptionPolicyAssignment]"
                },
                "parameters": {
                    "topLevelManagementGroupPrefix": {
                        "value": "[parameters('healthPrefix')]"
                    },
                    "enforcementMode": {
                        "value": "Default"
                    }                    
                }
            }
        },
        /*
            The following section will optionally configure the governance for the Identity management group for the platform
        */
        {
            // Assigning Azure Backup policy to identity management group if condition is true
            "condition": "[and(equals(parameters('enableVmBackupForIdentity'), 'Yes'), not(empty(parameters('identitySubscriptionId'))))]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-10-01",
            "name": "[variables('deploymentNames').azBackupIdentityPolicyDeploymentName]",
            "scope": "[variables('scopes').identityManagementGroup]",
            "location": "[deployment().location]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').policyDeploymentName)]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').azVmBackupPolicyAssignment]"
                },
                "parameters": {
                    "topLevelManagementGroupPrefix": {
                        "value": "[variables('deterministicRoleAssignmentGuids').backupForIdentity]"
                    },
                    "enforcementMode": {
                        "value": "Default"
                    }                    
                }
            }
        },
        {
            // Assigning deny Public Ip policy to identity management group if condition is true
            "condition": "[and(equals(parameters('denyPipForIdentity'), 'Yes'), not(empty(parameters('identitySubscriptionId'))))]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-10-01",
            "name": "[variables('deploymentNames').pipPolicyDeploymentName]",
            "scope": "[variables('scopes').identityManagementGroup]",
            "location": "[deployment().location]",
            "dependsOn": [
                "policyCompletion",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').identitySubscriptionPlacement)]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').pipPolicyAssignment]"
                },
                "parameters": {
                    "topLevelManagementGroupPrefix": {
                        "value": "[parameters('healthPrefix')]"
                    },
                    "enforcementMode": {
                        "value": "Default"
                    }                    
                }
            }
        },
        {
            // Assigning deny subnet without nsg policy to identity management group if condition is true
            "condition": "[and(equals(parameters('denySubnetWithoutNsgForIdentity'), 'Yes'), not(empty(parameters('identitySubscriptionId'))))]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-10-01",
            "name": "[variables('deploymentNames').subnetNsgIdentityPolicyDeploymentName]",
            "scope": "[variables('scopes').identityManagementGroup]",
            "location": "[deployment().location]",
            "dependsOn": [
                "policyCompletion",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').identitySubscriptionPlacement)]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').subnetNsgPolicyAssignment]"
                },
                "parameters": {
                    "topLevelManagementGroupPrefix": {
                        "value": "[parameters('healthPrefix')]"
                    },
                    "enforcementMode": {
                        "value": "Default"
                    }                    
                }
            }
        },
        {
            // Assigning deny rpd from internet on identity management group if condition is true
            "condition": "[and(equals(parameters('denyRdpForIdentity'), 'Yes'), not(empty(parameters('identitySubscriptionId'))))]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-10-01",
            "name": "[variables('deploymentNames').rdpFromInternetIdentityPolicyDeploymentName]",
            "scope": "[variables('scopes').identityManagementGroup]",
            "location": "[deployment().location]",
            "dependsOn": [
                "policyCompletion",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').identitySubscriptionPlacement)]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').rdpFromInternetPolicyAssignment]"
                },
                "parameters": {
                    "topLevelManagementGroupPrefix": {
                        "value": "[parameters('healthPrefix')]"
                    },
                    "enforcementMode": {
                        "value": "Default"
                    }                    
                }
            }
        },
        {
            // Peer vnet in identity subscription to connectivity hub if vhub or nva contidion is true
            "condition": "[and(or(equals(parameters('enableHub'), 'nva'), equals(parameters('enableHub'), 'vhub')), not(empty(parameters('identityAddressPrefix'))))]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-06-01",
            "name": "[variables('deploymentNames').identityPeeringDeploymentName]",
            "subscriptionId": "[parameters('identitySubscriptionId')]",
            "location": "[parameters('location')]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').vnetConnectivityHubDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').vwanConnectivityHubDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').nvaConnectivityHubDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').policyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').activityDiagnosticsPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').ascPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').ascGovPolicyDeploymentName)]",                
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').resourceDiagnosticsPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').identitySubscriptionPlacement)]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').corpVnetPeering]"
                },
                "parameters": {
                    "vNetRgName": {
                        "value": "[variables('platformRgNames').identityVnetRg]"
                    },
                    "vNetName": {
                        "value": "[concat(parameters('identitySubscriptionId'), variables('platformResourceNames').identityVnet)]"
                    },
                    "vNetLocation": {
                        "value": "[parameters('location')]"
                    },
                    "vNetCidrRange": {
                        "value": "[parameters('identityAddressPrefix')]"
                    },
                    "hubResourceId": {
                        "value": "[variables('platformResourceIds').vNetHubResourceId]"
                    },
                    "azureFirewallResourceId": {
                        "value": "[if(equals(parameters('enableAzFwDnsProxy'), 'Yes'), variables('platformResourceIds').azFirewallResourceId, '')]"
                    }
                }
            }
        },
        {
            // Peer vnet in identity subscription to connectivity hub if vwan contidion is true
            "condition": "[and(equals(parameters('enableHub'), 'vwan'), not(empty(parameters('identityAddressPrefix'))))]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-06-01",
            "name": "[variables('deploymentNames').identityVwanPeeringDeploymentName]",
            "subscriptionId": "[parameters('identitySubscriptionId')]",
            "location": "[parameters('location')]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').vnetConnectivityHubDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').vwanConnectivityHubDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').nvaConnectivityHubDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').policyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').activityDiagnosticsPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').ascPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').ascGovPolicyDeploymentName)]",                
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').resourceDiagnosticsPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').identitySubscriptionPlacement)]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').corpVwanPeering]"
                },
                "parameters": {
                    "vNetRgName": {
                        "value": "[variables('platformRgNames').identityVnetRg]"
                    },
                    "vNetName": {
                        "value": "[concat(parameters('identitySubscriptionId'), variables('platformResourceNames').identityVnet)]"
                    },
                    "vNetLocation": {
                        "value": "[parameters('location')]"
                    },
                    "vNetCidrRange": {
                        "value": "[parameters('identityAddressPrefix')]"
                    },
                    "vWanHubResourceId": {
                        "value": "[variables('platformResourceIds').vWanHubResourceId]"
                    },
                    "azureFirewallResourceId": {
                        "value": "[if(equals(parameters('enableAzFwDnsProxy'), 'Yes'), variables('platformResourceIds').azFirewallResourceId, '')]"
                    }
                }
            }
        },              
        /*
            The following deployments will place landing zone subscriptions into online/corp/healthcare (connected, disconnected, or healthcare specialized)
        */
        {
            // Placing subscription(s) into healthcare landing zone management group
            "condition": "[not(empty(parameters('healthLzSubscriptionId')))]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-10-01",
            "name": "[concat(variables('deploymentNames').healthLzSubs, copyIndex())]",
            "scope": "[variables('scopes').healthManagementGroup]",
            "location": "[deployment().location]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').policyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').healthPolicyDefinitons)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').activityDiagnosticsPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').ascPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').ascGovPolicyDeploymentName)]",                
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').resourceDiagnosticsPolicyDeploymentName)]"
            ],
            "copy": {
                "name": "healthLzs",
                "count": "[length(parameters('healthLzSubscriptionId'))]"
            },
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').subscriptionPlacement]"
                },
                "parameters": {
                    "targetManagementGroupId": {
                        "value": "[variables('mgmtGroups').healthcare]"
                    },
                    "subscriptionId": {
                        "value": "[concat(parameters('healthLzSubscriptionId')[copyIndex()])]"
                    }
                }
            }
        },
        {
            // Placing subscription(s) into online landing zone management group
            "condition": "[not(empty(parameters('onlineLzSubscriptionId')))]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-10-01",
            "name": "[concat(variables('deploymentNames').onlineLzSubs, copyIndex())]",
            "scope": "[variables('scopes').onlineManagementGroup]",
            "location": "[deployment().location]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').policyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').activityDiagnosticsPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').healthPolicyDefinitons)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').ascPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').ascGovPolicyDeploymentName)]",                
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').resourceDiagnosticsPolicyDeploymentName)]"
            ],
            "copy": {
                "name": "onlineLzs",
                "count": "[length(parameters('onlineLzSubscriptionId'))]"
            },
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').subscriptionPlacement]"
                },
                "parameters": {
                    "targetManagementGroupId": {
                        "value": "[variables('mgmtGroups').online]"
                    },
                    "subscriptionId": {
                        "value": "[concat(parameters('onlineLzSubscriptionId')[copyIndex()])]"
                    }
                }
            }
        },
        {
            // Placing subscriptions into corp landing zone management group
            "condition": "[not(empty(parameters('corpLzSubscriptionId')))]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-10-01",
            "name": "[concat(variables('deploymentNames').corpLzSubs, copyIndex())]",
            "scope": "[variables('scopes').corpManagementGroup]",
            "location": "[deployment().location]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').policyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').activityDiagnosticsPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').ascPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').healthPolicyDefinitons)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').ascGovPolicyDeploymentName)]",                
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').resourceDiagnosticsPolicyDeploymentName)]"
            ],
            "copy": {
                "name": "corpLzs",
                "count": "[length(parameters('corpLzSubscriptionId'))]"
            },
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').subscriptionPlacement]"
                },
                "parameters": {
                    "targetManagementGroupId": {
                        "value": "[variables('mgmtGroups').corp]"
                    },
                    "subscriptionId": {
                        "value": "[concat(parameters('corpLzSubscriptionId')[copyIndex()])]"
                    }
                }
            }
        },
        {
            // Placing subscriptions into corp landing zone management group (and do subsequent peering)
            "condition": "[not(empty(parameters('corpConnectedLzSubscriptionId')))]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-10-01",
            "name": "[concat(variables('deploymentNames').corpConnectedMoveLzSubs, copyIndex())]",
            "scope": "[variables('scopes').corpManagementGroup]",
            "location": "[deployment().location]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').policyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').healthPolicyDefinitons)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').activityDiagnosticsPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').ascPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').ascGovPolicyDeploymentName)]",                
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').resourceDiagnosticsPolicyDeploymentName)]"
            ],
            "copy": {
                "name": "corpConnectedMoveLzs",
                "count": "[length(parameters('corpConnectedLzSubscriptionId'))]"
            },
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').subscriptionPlacement]"
                },
                "parameters": {
                    "targetManagementGroupId": {
                        "value": "[variables('mgmtGroups').corp]"
                    },
                    "subscriptionId": {
                        "value": "[parameters('corpConnectedLzSubscriptionId')[copyIndex()].subs]"
                    }
                }
            }
        },
        {
            // Peering corp connected lz vnet to connectivity sub (when nva or vhub is selected)
            "condition": "[and(or(equals(parameters('enableHub'), 'nva'), equals(parameters('enableHub'), 'vhub')), not(empty(parameters('corpConnectedLzSubscriptionId'))))]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-06-01",
            "name": "[concat(variables('deploymentNames').corpPeeringDeploymentName, copyIndex())]",
            "subscriptionId": "[if(not(empty(parameters('corpConnectedLzSubscriptionId'))), parameters('corpConnectedLzSubscriptionId')[copyIndex()].subs, '')]",
            "location": "[parameters('location')]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').vnetConnectivityHubDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').vwanConnectivityHubDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').nvaConnectivityHubDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').ddosLzPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').policyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').activityDiagnosticsPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').ascPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').ascGovPolicyDeploymentName)]",                
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').resourceDiagnosticsPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('esLiteDeploymentNames').vwanConnectivityHubLiteDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('esLiteDeploymentNames').vnetConnectivityHubLiteDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('esLiteDeploymentNames').nvaConnectivityHubLiteDeploymentName)]",
                "corpConnectedMoveLzs"
            ],
            "copy": {
                "name": "corpConnectedPeering",
                "count": "[length(parameters('corpConnectedLzSubscriptionId'))]"
            },
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').corpVnetPeering]"
                },
                "parameters": {
                    "vNetRgName": {
                        "value": "[variables('platformRgNames').lzVnetRg]"
                    },
                    "vNetName": {
                        "value": "[concat(parameters('corpConnectedLzSubscriptionId')[copyIndex()].subs, '-', variables('platformResourceNames').lzVnet)]"
                    },
                    "vNetLocation": {
                        "value": "[parameters('location')]"
                    },
                    "vNetCidrRange": {
                        "value": "[parameters('corpConnectedLzSubscriptionId')[copyIndex()].addresses]"
                    },
                    "hubResourceId": {
                        "value": "[variables('platformResourceIds').vNetHubResourceId]"
                    },
                    "azureFirewallResourceId": {
                        "value": "[if(equals(parameters('enableAzFwDnsProxy'), 'Yes'), variables('platformResourceIds').azFirewallResourceId, '')]"
                    }
                }
            }
        },
        /*{
            // Peering corp connected lz vnet to connectivity sub (when vwan is selected)
            "condition": "[and(equals(parameters('enableHub'), 'vwan'), not(empty(parameters('corpConnectedLzSubscriptionId'))))]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-06-01",
            "name": "[concat(variables('deploymentNames').corpConnectedLzVwanSubs, copyIndex())]",
            "subscriptionId": "[if(not(empty(parameters('corpConnectedLzSubscriptionId'))), parameters('corpConnectedLzSubscriptionId')[copyIndex()].subs, '')]",
            "location": "[parameters('location')]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').vnetConnectivityHubDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').vwanConnectivityHubDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').nvaConnectivityHubDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').ddosLzPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').policyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').activityDiagnosticsPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').ascPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').ascGovPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').resourceDiagnosticsPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('esLiteDeploymentNames').vwanConnectivityHubLiteDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('esLiteDeploymentNames').vnetConnectivityHubLiteDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('esLiteDeploymentNames').nvaConnectivityHubLiteDeploymentName)]",
                "corpConnectedMoveLzs"
            ],
            "copy": {
                "name": "corpConnectedVwanPeering",
                "count": "[length(parameters('corpConnectedLzSubscriptionId'))]",
                "batchSize": 1,
                "mode": "Serial"
            },
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').corpVnetPeering]"
                },
                "parameters": {
                    "vNetRgName": {
                        "value": "[variables('platformRgNames').lzVnetRg]"
                    },
                    "vNetName": {
                        "value": "[concat(parameters('corpConnectedLzSubscriptionId')[copyIndex()].subs, '-', variables('platformResourceNames').lzVnet)]"
                    },
                    "vNetLocation": {
                        "value": "[parameters('location')]"
                    },
                    "vNetCidrRange": {
                        "value": "[parameters('corpConnectedLzSubscriptionId')[copyIndex()].addresses]"
                    },
                    "hubResourceId": {
                        "value": "[variables('platformResourceIds').vWanHubResourceId]"
                    },
                    "azureFirewallResourceId": {
                        "value": "[if(equals(parameters('enableAzFwDnsProxy'), 'Yes'), variables('platformResourceIds').azFirewallResourceId, '')]"
                    }
                }
            }
        },*/     
        /*
            **Healthcare Lite Only!**
            The following section represent optional deployments in case the user select to use a single dedicated subscription for platform resources.
            This is not recommmended for production deployment, only for small enterprises, demo, POC, etc.

            The following deployment will create the management group structure for Healthcare Lite
        */
        {
            // Creating the Healthcare Lite management group structure
            "condition": "[not(empty(parameters('singlePlatformSubscriptionId')))]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2019-10-01",
            "name": "[variables('esLiteDeploymentNames').mgmtGroupLiteDeploymentName]",
            "location": "[deployment().location]",
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').managementGroupsLite]"
                },
                "parameters": {
                    "topLevelManagementGroupPrefix": {
                        "value": "[parameters('healthPrefix')]"
                    }
                }
            }
        },
        /*
            Note: ES Lite only: the following deployments will organize the dedicated platform subscription into the dedicated management groups
        */ 
        {
            // Placing Platform subscription into dedicated management group
            "condition": "[not(empty(parameters('singlePlatformSubscriptionId')))]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-10-01",
            "name": "[variables('esLiteDeploymentNames').platformLiteSubscriptionPlacement]",
            "location": "[deployment().location]",
            "scope": "[variables('scopes').platformManagementGroup]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('esLiteDeploymentNames').mgmtGroupLiteDeploymentName)]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').subscriptionPlacement]"
                },
                "parameters": {
                    "targetManagementGroupId": {
                        "value": "[variables('mgmtGroups').platform]"
                    },
                    "subscriptionId": {
                        "value": "[parameters('singlePlatformSubscriptionId')]"
                    }
                }
            }
        },
        /*
            Note: ES Lite only: the following deployment will create Log Analytics to the platform subscription
        */         
        {
            // Deploying Log Analytics workspace to platform subscription if condition is true
            "condition": "[and(equals(parameters('enableLogAnalytics'), 'Yes'), not(empty(parameters('singlePlatformSubscriptionId'))))]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-10-01",
            "name": "[variables('esLiteDeploymentNames').monitoringLiteDeploymentName]",
            "location": "[deployment().location]",
            "subscriptionId": "[parameters('singlePlatformSubscriptionId')]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('esliteDeploymentNames').platformLiteSubscriptionPlacement)]",
                "policyCompletion"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').monitoring]"
                },
                "parameters": {
                    "rgName": {
                        "value": "[variables('platformRgNames').mgmtRg]"
                    },
                    "workspaceName": {
                        "value": "[variables('platformResourceNames').logAnalyticsWorkspace]"
                    },
                    "workspaceRegion": {
                        "value": "[deployment().location]"
                    },
                    "automationAccountName": {
                        "value": "[variables('platformResourceNames').automationAccount]"
                    },
                    "automationRegion": {
                        "value": "[deployment().location]"
                    },
                    "retentionInDays": {
                        "value": "[parameters('retentionInDays')]"
                    }
                }
            }
        },
        {
            // Create storage account for NSG Flow Logs in the management subscription for networking observability
            "condition": "[and(not(empty(parameters('singlePlatformSubscriptionId'))), equals(parameters('enableRegulatoryCompliance'), 'HIPAAHITRUST'))]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-10-01",
            "name": "[variables('esLiteDeploymentNames').logLiteStorageDeploymentName]",
            "location": "[if(empty(parameters('location')), deployment().location, parameters('location'))]",
            "subscriptionId": "[parameters('singlePlatformSubscriptionId')]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('esLiteDeploymentNames').platformLiteSubscriptionPlacement)]",
                "policyCompletion",
                "[resourceId('Microsoft.Resources/deployments', variables('esLiteDeploymentNames').monitoringLiteDeploymentName)]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').logStorageAccount]"
                },
                "parameters": {
                    "mgmtStorageRgName": {
                        "value": "[variables('platformRgNames').logNwRg]"
                    },
                    "storageAccountName": {
                        "value": "[variables('platformResourceNames').logNwStorageAccount]"
                    },
                    "storageLocation": {
                        "value": "[if(empty(parameters('location')), deployment().location, parameters('location'))]"
                    }
                }
            }
        },
        /*
            Note: ES Lite only: the following deployments will deploy Log Analytics solutions to the platform subscription
        */      
        {
            // Deploying Log Analytics solutions to Log Analytics workspace if condition is true
            "condition": "[and(and(not(empty(parameters('singlePlatformSubscriptionId'))), equals(parameters('enableLogAnalytics'), 'Yes')),  equals(parameters('enableLogAnalytics'), 'Yes'), or(or(or(or(or(equals(parameters('enableSecuritySolution'), 'Yes'), equals(parameters('enableAgentHealth'), 'Yes')), equals(parameters('enableChangeTracking'), 'Yes')), equals(parameters('enableUpdateMgmt'), 'Yes'), equals(parameters('enableActivityLog'), 'Yes')), equals(parameters('enableVmInsights'), 'Yes')), equals(parameters('enableServiceMap'), 'Yes'), equals(parameters('enableSqlAssessment'), 'Yes')))]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-10-01",
            "name": "[variables('esLiteDeploymentNames').monitoringSolutionsLiteDeploymentName]",
            "location": "[deployment().location]",
            "subscriptionId": "[parameters('singlePlatformSubscriptionId')]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('esLiteDeploymentNames').monitoringLiteDeploymentName)]",
                "policyCompletion"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').monitoringSolutions]"
                },
                "parameters": {
                    "rgName": {
                        "value": "[variables('platformRgNames').mgmtRg]"
                    },
                    "workspaceName": {
                        "value": "[variables('platformResourceNames').logAnalyticsWorkspace]"
                    },
                    "workspaceRegion": {
                        "value": "[deployment().location]"
                    },
                    "enableSecuritySolution": {
                        "value": "[parameters('enableSecuritySolution')]"
                    },
                    "enableAgentHealth": {
                        "value": "[parameters('enableAgentHealth')]"
                    },
                    "enableChangeTracking": {
                        "value": "[parameters('enableChangeTracking')]"
                    },
                    "enableUpdateMgmt": {
                        "value": "[parameters('enableUpdateMgmt')]"
                    },
                    "enableActivityLog": {
                        "value": "[parameters('enableActivityLog')]"
                    },
                    "enableVmInsights": {
                        "value": "[parameters('enableVmInsights')]"
                    },
                    "enableServiceMap": {
                        "value": "[parameters('enableServiceMap')]"
                    },
                    "enableSqlAssessment": {
                        "value": "[parameters('enableSqlAssessment')]"
                    }
                }
            }
        },
        /*
            Note: ES Lite only: deploy Log Analytics workspace policy to the platform management group
        */                 
        {
            // Assigning Log Analytics workspace policy to platform management group if condition is true
            "condition": "[and(equals(parameters('enableLogAnalytics'), 'Yes'), not(empty(parameters('singlePlatformSubscriptionId'))))]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-10-01",
            "name": "[variables('esLiteDeploymentNames').logAnalyticsLitePolicyDeploymentName]",
            "scope": "[variables('scopes').platformManagementGroup]",
            "location": "[deployment().location]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('esLiteDeploymentNames').monitoringLiteDeploymentName)]",
                "policyCompletion"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').logAnalyticsPolicyAssignment]"
                },
                "parameters": {
                    "topLevelManagementGroupPrefix": {
                        "value": "[parameters('healthPrefix')]"
                    },
                    "rgName": {
                        "value": "[variables('platformRgNames').mgmtRg]"
                    },
                    "logAnalyticsWorkspaceName": {
                        "value": "[variables('platformResourceNames').logAnalyticsWorkspace]"
                    },
                    "workspaceRegion": {
                        "value": "[deployment().location]"
                    },
                    "automationAccountName": {
                        "value": "[variables('platformResourceNames').automationAccount]"
                    },
                    "automationRegion": {
                        "value": "[deployment().location]"
                    },
                    "retentionInDays": {
                        "value": "[parameters('retentionInDays')]"
                    }
                }
            }
        },
        /*
            Note: ES Lite only: deploy RG for DDoS standard protection to platform subscription
        */          
        {
            // Creating resource group for DDoS Standard Protection
            "condition": "[and(equals(parameters('enableDdoS'), 'Yes'), not(empty(parameters('singlePlatformSubscriptionId'))))]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-10-01",
            "name": "[variables('esLiteDeploymentNames').ddosRgLiteDeploymentName]",
            "subscriptionId": "[parameters('singlePlatformSubscriptionId')]",
            "location": "[deployment().location]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('esLiteDeploymentNames').platformLiteSubscriptionPlacement)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').activityDiagnosticsPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').asbPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').ascPolicyDeploymentName)]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').resourceGroup]"
                },
                "parameters": {
                    "rgName": {
                        "value": "[variables('platformRgNames').ddosRg]"
                    },
                    "location": {
                        "value": "[parameters('location')]"
                    }
                }
            }
        },
        /*
            Note: ES Lite only: deploy DDoS standard protection
        */          
        {
            // Creating DDoS protection plan into the connectivity subscription
            "condition": "[and(equals(parameters('enableDdoS'), 'Yes'), not(empty(parameters('singlePlatformSubscriptionId'))))]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-10-01",
            "name": "[variables('esLiteDeploymentNames').ddosLiteDeploymentName]",
            "subscriptionId": "[parameters('singlePlatformSubscriptionId')]",
            "resourceGroup": "[variables('platformRgNames').ddosRg]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('esLiteDeploymentNames').ddosRgLiteDeploymentName)]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').ddosProtection]"
                },
                "parameters": {
                    "ddosName": {
                        "value": "[variables('platformResourceNames').ddosName]"
                    },
                    "location": {
                        "value": "[parameters('location')]"
                    }
                }
            }
        },        
        /*
            Note: ES Lite only: deploy RG for Private DNS zones to platform subscription
        */
        {
            // Creating resource group for Private DNS Zones
            "condition": "[and(equals(parameters('enablePrivateDnsZones'), 'Yes'), not(empty(parameters('singlePlatformSubscriptionId'))))]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-10-01",
            "name": "[variables('esLitedeploymentNames').privateDnsZoneRgLiteDeploymentName]",
            "subscriptionId": "[parameters('singlePlatformSubscriptionId')]",
            "location": "[deployment().location]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('esLiteDeploymentNames').platformLiteSubscriptionPlacement)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').activityDiagnosticsPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').asbPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').ascPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').ascGovPolicyDeploymentName)]",                
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').resourceDiagnosticsPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('esLitedeploymentNames').vnetConnectivityHubLiteDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('esLitedeploymentNames').vwanConnectivityHubLiteDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('esLitedeploymentNames').nvaConnectivityHubLiteDeploymentName)]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').resourceGroup]"
                },
                "parameters": {
                    "rgName": {
                        "value": "[variables('platformRgNames').privateDnsRg]"
                    },
                    "location": {
                        "value": "[parameters('location')]"
                    }
                }
            }
        },
        /*
            Note: ES Lite only: deploy private DNS zones
        */
        {
            // Creating Private DNS Zones into the connectivity subscription
            "condition": "[and(equals(parameters('enablePrivateDnsZones'), 'Yes'), not(empty(parameters('singlePlatformSubscriptionId'))))]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-10-01",
            "name": "[concat(variables('esLitedeploymentNames').privateDnsZonesLiteDeploymentName, copyIndex())]",
            "subscriptionId": "[parameters('singlePlatformSubscriptionId')]",
            "resourceGroup": "[variables('platformRgNames').privateDnsRg]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('esLitedeploymentNames').privateDnsZoneRgLiteDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').activityDiagnosticsPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').resourceDiagnosticsPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('esLitedeploymentNames').vnetConnectivityHubLiteDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('esLitedeploymentNames').vwanConnectivityHubLiteDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('esLitedeploymentNames').nvaConnectivityHubLiteDeploymentName)]"
            ],
            "copy": {
                "name": "dnsZonesLite",
                "count": "[length(variables('privateDnsZones'))]"
            },
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').privateDnsZones]"
                },
                "parameters": {
                    "privateDnsZoneName": {
                        "value": "[concat(variables('privateDnsZones')[copyIndex()])]"
                    },
                    "connectivityHubResourceId": {
                        "value": "[variables('platformResourceIds').vNetHubResourceId]"
                    }
                }
            }
        },
        /*
            Note: ES Lite only: assign DDoS policy for landing zones
        */                        
        {
            // Assigning DDoS Policy to enforce DDoS on virtual networks if condition evaluates to true
            "condition": "[and(and(equals(parameters('enableDdoS'), 'Yes'), equals(parameters('enableHub'), 'vhub')), not(empty(parameters('singlePlatformSubscriptionId'))), equals(parameters('enableHub'), 'Yes'))]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-10-01",
            "name": "[variables('esLiteDeploymentNames').ddosHubLitePolicyDeploymentName]",
            "scope": "[variables('scopes').platformManagementGroup]",
            "location": "[deployment().location]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('esLiteDeploymentNames').ddosLiteDeploymentName)]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('esLiteDeploymentNames').ddosHubLitePolicyDeploymentName]"
                },
                "parameters": {
                    "ddosPlanResourceId": {
                        "value": "[variables('platformResourceIds').ddosProtectionResourceId]"
                    },
                    "topLevelManagementGroupPrefix": {
                        "value": "[variables('deterministicRoleAssignmentGuids').ddosForConnectivity]"
                    },
                    "enforcementMode": {
                        "value": "Default"
                    }
                }
            }   
        },
        /*
            Note: ES Lite only: deploys hub and spoke
        */        
        {
            // Configuring and deploying the connectivity hub (hub and spoke)
            "condition": "[and(not(empty(parameters('singlePlatformSubscriptionId'))),equals(parameters('enableHub'), 'vhub'))]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2019-05-01",
            "scope": "[variables('scopes').platformManagementGroup]",
            "name": "[variables('esLitedeploymentNames').vnetConnectivityHubLiteDeploymentName]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('esLiteDeploymentNames').platformLiteSubscriptionPlacement)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').asbPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').ascPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').ascGovPolicyDeploymentName)]",                
                "[resourceId('Microsoft.Resources/deployments', variables('esLiteDeploymentNames').ddosHubLitePolicyDeploymentName)]"
            ],
            "location": "[deployment().location]",
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').vnetConnectivityHub]"
                },
                "parameters": {
                    "topLevelManagementGroupPrefix": {
                        "value": "[parameters('healthPrefix')]"
                    },
                    "ddosPlanResourceId": {
                        "value": "[variables('platformResourceIds').ddosProtectionResourceId]"
                    },
                    "enableHub": {
                        "value": "[parameters('enableHub')]"
                    },
                    "enableAzFw": {
                        "value": "[parameters('enableAzFw')]"
                    },
                    "addressPrefix": {
                        "value": "[parameters('addressPrefix')]"
                    },
                    "enableVpnGw": {
                        "value": "[parameters('enableVpnGw')]"
                    },
                    "enableErGw": {
                        "value": "[parameters('enableErGw')]"
                    },
                    "enableDdoS": {
                        "value": "[parameters('enableDdoS')]"
                    },
                    "location": {
                        "value": "[parameters('location')]"
                    },
                    "connectivitySubscriptionId": {
                        "value": "[parameters('singlePlatformSubscriptionId')]"
                    },
                    "subnetMaskForAzFw": {
                        "value": "[parameters('subnetMaskForAzFw')]"
                    },
                    "subnetMaskForGw": {
                        "value": "[parameters('subnetMaskForGw')]"
                    },
                    "firewallSku": {
                        "value": "[parameters('firewallSku')]"
                    },
                    "firewallZones": {
                        "value": "[parameters('firewallZones')]"
                    },
                    "enableAzFwDnsProxy": {
                        "value": "[parameters('enableAzFwDnsProxy')]"
                    },
                    "gwRegionalOrAz": {
                        "value": "[parameters('gwRegionalOrAz')]"
                    },
                    "gwAzSku": {
                        "value": "[parameters('gwAzSku')]"
                    },
                    "gwRegionalSku": {
                        "value": "[parameters('gwRegionalSku')]"
                    },
                    "erRegionalOrAz": {
                        "value": "[parameters('erRegionalOrAz')]"
                    },
                    "erAzSku": {
                        "value": "[parameters('erAzSku')]"
                    },
                    "erRegionalSku": {
                        "value": "[parameters('erRegionalSku')]"
                    }
                }
            }
        },
        /*
            Note: ES Lite only: deploys virtual hub (NVA)
        */
        {
            // Configuring and deploying the connectivity hub (NVA)
            "condition": "[and(not(empty(parameters('singlePlatformSubscriptionId'))),equals(parameters('enableHub'), 'nva'))]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2019-05-01",
            "scope": "[variables('scopes').platformManagementGroup]",
            "name": "[variables('esLitedeploymentNames').nvaConnectivityHubLiteDeploymentName]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('esLiteDeploymentNames').platformLiteSubscriptionPlacement)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').asbPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').ascPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').ascGovPolicyDeploymentName)]",                
                "[resourceId('Microsoft.Resources/deployments', variables('esLiteDeploymentNames').ddosHubLitePolicyDeploymentName)]"
            ],
            "location": "[deployment().location]",
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').nvaConnectivityHub]"
                },
                "parameters": {
                    "topLevelManagementGroupPrefix": {
                        "value": "[parameters('healthPrefix')]"
                    },
                    "ddosPlanResourceId": {
                        "value": "[variables('platformResourceIds').ddosProtectionResourceId]"
                    },
                    "enableHub": {
                        "value": "[parameters('enableHub')]"
                    },
                    "addressPrefix": {
                        "value": "[parameters('addressPrefix')]"
                    },
                    "enableVpnGw": {
                        "value": "[parameters('enableVpnGw')]"
                    },
                    "enableErGw": {
                        "value": "[parameters('enableErGw')]"
                    },
                    "enableDdoS": {
                        "value": "[parameters('enableDdoS')]"
                    },
                    "location": {
                        "value": "[parameters('location')]"
                    },
                    "connectivitySubscriptionId": {
                        "value": "[parameters('singlePlatformSubscriptionId')]"
                    },
                    "subnetMaskForGw": {
                        "value": "[parameters('subnetMaskForGw')]"
                    },
                    "gwRegionalOrAz": {
                        "value": "[parameters('gwRegionalOrAz')]"
                    },
                    "gwAzSku": {
                        "value": "[parameters('gwAzSku')]"
                    },
                    "gwRegionalSku": {
                        "value": "[parameters('gwRegionalSku')]"
                    },
                    "erRegionalOrAz": {
                        "value": "[parameters('erRegionalOrAz')]"
                    },
                    "erAzSku": {
                        "value": "[parameters('erAzSku')]"
                    },
                    "erRegionalSku": {
                        "value": "[parameters('erRegionalSku')]"
                    }
                }
            }
        },
        /*
            Note: ES Lite only: deploys VWAN hub (Microsoft Managed)
        */
        {
            // Creating the VWAN network hub (Microsoft managed)
            "condition": "[and(not(empty(parameters('singlePlatformSubscriptionId'))),equals(parameters('enableHub'), 'vwan'))]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-10-01",
            "scope": "[variables('scopes').platformManagementGroup]",
            "name": "[variables('esLitedeploymentNames').vwanConnectivityHubLiteDeploymentName]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('esLiteDeploymentNames').platformLiteSubscriptionPlacement)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').asbPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').ascPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').ascGovPolicyDeploymentName)]",                
                "[resourceId('Microsoft.Resources/deployments', variables('esLiteDeploymentNames').ddosHubLitePolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').activityDiagnosticsPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').resourceDiagnosticsPolicyDeploymentName)]"
            ],
            "location": "[deployment().location]",
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').vwanConnectivityHub]"
                },
                "parameters": {
                    "topLevelManagementGroupPrefix": {
                        "value": "[parameters('healthPrefix')]"
                    },
                    "enableHub": {
                        "value": "[parameters('enableHub')]"
                    },
                    "enableAzFw": {
                        "value": "[parameters('enableAzFw')]"
                    },
                    "firewallSku": {
                        "value": "[parameters('firewallSku')]"
                    },
                    "addressPrefix": {
                        "value": "[parameters('addressPrefix')]"
                    },
                    "enableVpnGw": {
                        "value": "[parameters('enableVpnGw')]"
                    },
                    "enableErGw": {
                        "value": "[parameters('enableErGw')]"
                    },
                    "location": {
                        "value": "[parameters('location')]"
                    },
                    "connectivitySubscriptionId": {
                        "value": "[parameters('singlePlatformSubscriptionId')]"
                    },
                    "expressRouteScaleUnit": {
                        "value": "[parameters('expressRouteScaleUnit')]"
                    },
                    "vpnGateWayScaleUnit": {
                        "value": "[parameters('vpnGateWayScaleUnit')]"
                    }
                }
            }
        },
        /*
            Note: ES Lite only: assigns policy for identity to enable Azure Backup
        */
        {
            // Assigning Azure Backup policy to platform management group if condition is true
            "condition": "[and(equals(parameters('enableVmBackupForIdentity'), 'Yes'), not(empty(parameters('singlePlatformSubscriptionId'))))]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-10-01",
            "name": "[variables('esLitedeploymentNames').azBackupIdentityLitePolicyDeploymentName]",
            "scope": "[variables('scopes').platformManagementGroup]",
            "location": "[deployment().location]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('esLiteDeploymentNames').platformLiteSubscriptionPlacement)]"            
                ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').azVmBackupPolicyAssignment]"
                },
                "parameters": {
                    "topLevelManagementGroupPrefix": {
                        "value": "[variables('deterministicRoleAssignmentGuids').backupForIdentity]"
                    },
                    "enforcementMode": {
                        "value": "Default"
                    }                    
                }
            }
        },
        /*
            Note: ES Lite only: assign policy for identity to deny subnet without NSG 
        */
        {
            // Assigning deny subnet without nsg policy to identity management group if condition is true
            "condition": "[and(equals(parameters('denySubnetWithoutNsgForIdentity'), 'Yes'), not(empty(parameters('singlePlatformSubscriptionId'))))]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-10-01",
            "name": "[variables('esLitedeploymentNames').subnetNsgIdentityLitePolicyDeploymentName]",
            "scope": "[variables('scopes').platformManagementGroup]",
            "location": "[deployment().location]",
            "dependsOn": [
                "policyCompletion",
                "[resourceId('Microsoft.Resources/deployments', variables('esLiteDeploymentNames').platformLiteSubscriptionPlacement)]"  
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').subnetNsgPolicyAssignment]"
                },
                "parameters": {
                    "topLevelManagementGroupPrefix": {
                        "value": "[parameters('healthPrefix')]"
                    },
                    "enforcementMode": {
                        "value": "Default"
                    }                    
                }
            }
        },
        /*
            Note: ES Lite only: assign policy to deny RDP from internet to platform MG 
        */        
        {
            // Assigning deny rpd from internet policy landing zones management group if condition is true
            "condition": "[and(equals(parameters('denyRdpForIdentity'), 'Yes'), not(empty(parameters('singlePlatformSubscriptionId'))))]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-10-01",
            "name": "[variables('esLitedeploymentNames').rdpFromInternetIdentityLitePolicyDeploymentName]",
            "scope": "[variables('scopes').platformManagementGroup]",
            "location": "[deployment().location]",
            "dependsOn": [
                "policyCompletion",
                "[resourceId('Microsoft.Resources/deployments', variables('esLiteDeploymentNames').platformLiteSubscriptionPlacement)]"  
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').rdpFromInternetPolicyAssignment]"
                },
                "parameters": {
                    "topLevelManagementGroupPrefix": {
                        "value": "[parameters('healthPrefix')]"
                    },
                    "enforcementMode": {
                        "value": "Default"
                    }                    
                }
            }
        }
    ],
    "outputs": {
        "deployment": {
            "type": "string",
            "value": "[concat(deployment().name, ' has successfully deployed.')]"
        }
    }
}
