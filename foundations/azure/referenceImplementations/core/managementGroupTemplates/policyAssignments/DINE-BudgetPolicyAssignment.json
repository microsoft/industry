{
    "$schema": "https://schema.management.azure.com/schemas/2019-08-01/managementGroupDeploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "topLevelManagementGroupPrefix": {
            "type": "string",
            "metadata": {
                "description": "Provide a prefix to your intermediate root management group containing the policy definitions."
            }
        },
        "budgetName": {
            "type": "string",
            "metadata": {
                "description": "Provide name for the budget resource to be created"
            }
        },
        "amount": {
            "type": "string",
            "defaultValue": "1000",
            "metadata": {
                "description": "Provide the total amount of cust or usage to track with the assigned budget."
            }
        },
        "enforcementMode": {
            "type": "string",
            "allowedValues": [
                "Default",
                "DoNotEnforce"
            ],
            "defaultValue": "Default"
        },
        "userAssignedIdentityResourceId": {
            "type": "string"
        }
    },
    "variables": {
        "policyDefinitions": {
            "deployBudget": "[concat('/providers/Microsoft.Management/managementGroups/', parameters('topLevelManagementGroupPrefix'), '/providers/Microsoft.Authorization/policyDefinitions/Deploy-Budget')]"
            },
        "policyAssignmentNames": {
            "budget": "Deploy-Budget",
            "description": "Ensure there is a budget on all subscriptions under the assigned scope to control cost and spending.",
            "displayName": "Ensure there is a budget associated with the subscription"
            },
        "rbacOwner": "8e3af657-a8ff-443c-a75c-2fe8c4bcb635",
        "roleAssignmentNames": {
            "deployBudget": "[guid(concat(parameters('topLevelManagementGroupPrefix'), variables('policyAssignmentNames').budget))]"
            }
        },
    "resources": [
        {
            "type": "Microsoft.Authorization/policyAssignments",
            "apiVersion": "2022-06-01",
            "name": "[variables('policyAssignmentNames').budget]",
            "location": "[deployment().location]",
            "identity": {
                "type": "UserAssigned",
                "userAssignedIdentities": {
                    "[parameters('userAssignedIdentityResourceId')]": {}
                }
            },
            "properties": {
                "description": "[variables('policyAssignmentNames').description]",
                "displayName": "[variables('policyAssignmentNames').displayName]",
                "policyDefinitionId": "[variables('policyDefinitions').deployBudget]",
                "enforcementMode": "[parameters('enforcementMode')]",
                "parameters": {
                    "budgetName": {
                        "value": "[parameters('budgetName')]"
                    },
                    "amount": {
                        "value": "[parameters('amount')]"
                    }
                }
            }
        },
        {
            "type": "Microsoft.Authorization/roleAssignments",
            "apiVersion": "2019-04-01-preview",
            "name": "[variables('roleAssignmentNames').deployBudget]",
            "dependsOn": [
                "[variables('policyAssignmentNames').budget]"
            ],
            "properties": {
                "principalType": "ServicePrincipal",
                "roleDefinitionId": "[concat('/providers/Microsoft.Authorization/roleDefinitions/', variables('rbacOwner'))]",
                "principalId": "[toLower(reference(concat('/providers/Microsoft.Authorization/policyAssignments/', variables('policyAssignmentNames').budget), '2019-09-01', 'Full' ).identity.principalId)]"
            }
        }
    ],
    "outputs": {}
}