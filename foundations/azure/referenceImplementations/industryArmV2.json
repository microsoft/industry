{
    "$schema": "https://schema.management.azure.com/schemas/2019-08-01/tenantDeploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "industry": {
            "type": "string",
            "allowedValues": [
                "fsi",
                "telco"
            ],
            "metadata": {
                "description": "Azure Portal UX to determine which industry cloud foundation to be deployed"
            }
        },
        "industryPrefix": {
            "type": "string",
            "maxLength": 10,
            "metadata": {
                "description": "Provide a prefix (max 10 characters, unique at tenant-scope) for the Management Group hierarchy and other resources created as part of Enterprise-scale."
            }
        },
        "managementSubscriptionId": {
            "type": "string",
            "defaultValue": "",
            "maxLength": 36,
            "metadata": {
                "description": "Provide the subscription id of an existing, empty subscription you want to dedicate for management. If you don't want to bring a subscription, leave this parameter empty as is."
            }
        },
        "connectivitySubscriptionId": {
            "type": "string",
            "defaultValue": "",
            "maxLength": 36,
            "metadata": {
                "description": "Provide the subscription id of an existing, empty subscription you want to dedicate for networking."
            }
        },
        "ingressSubscriptionId": {
            "type": "string",
            "defaultValue": "",
            "maxLength": 36,
            "metadata": {
                "description": "Provide the subscription id of an existing, empty subscription you want to dedicate for ingress."
            }
        },
        "egressSubscriptionId": {
            "type": "string",
            "defaultValue": "",
            "maxLength": 36,
            "metadata": {
                "description": "Provide the subscription id of an existing, empty subscription you want to dedicate for egress."
            }
        },
        "identitySubscriptionId": {
            "type": "string",
            "defaultValue": "",
            "maxLength": 36,
            "metadata": {
                "description": "Provide the subscription id of an existing, empty subscription you want to dedicate for identity."
            }
        },
        "denySubnetWithoutNsgForIdentity": {
            "type": "string",
            "allowedValues": [
                "Yes",
                "Audit",
                "No"
            ],
            "defaultValue": "No"
        },
        "denyRdpForIdentity": {
            "type": "string",
            "allowedValues": [
                "Yes",
                "Audit",
                "No"
            ],
            "defaultValue": "No"
        },
        "denyPipForIdentity": {
            "type": "string",
            "allowedValues": [
                "Yes",
                "Audit",
                "No"
            ],
            "defaultValue": "No"
        },
        "enableVmBackupForIdentity": {
            "type": "string",
            "allowedValues": [
                "Yes",
                "Audit",
                "No"
            ],
            "defaultValue": "No"
        },
        "playgroundSubscriptionId": {
            "type": "array",
            "defaultValue": [],
            "metadata": {
                "description": "Provide the subscription ids for existing, empty subscriptions you want to move into your playground management group."
            }
        },
        "onlineLzSubscriptionId": {
            "type": "array",
            "defaultValue": [],
            "metadata": {
                "description": "Provide the subscription ids for existing, empty subscriptions you want to move in as your first online landing zones."
            }
        },
        "corpLzSubscriptionId": {
            "type": "array",
            "defaultValue": [],
            "metadata": {
                "description": "Provide the subscription ids for existing, empty subscriptions you want to move in as your first corp landing zones."
            }
        },
        "corpConnectedLzSubscriptionId": {
            "type": "array",
            "defaultValue": [],
            "metadata": {
                "description": "Provide the subscription ids for existing, empty subscriptions you want to move in as your first corp landing zones and connect to virtual networking hub."
            }
        },
        "enableLogAnalytics": {
            "type": "string",
            "defaultValue": "No",
            "allowedValues": [
                "Yes",
                "No"
            ],
            "metadata": {
                "description": "If 'Yes' is selected when also adding a subscription for management, ARM will assign two policies to enable auditing in your environment, into the Log Analytics workspace for platform monitoring. If 'No', it will be ignored."
            }
        },
        "retentionInDays": {
            "type": "string",
            "defaultValue": ""
        },
        "enableMcsbPolicy": {
            "type": "string",
            "allowedValues": [
                "Yes",
                "No"
            ],
            "defaultValue": "No",
            "metadata": {
                "descriptione": "If 'Yes' is selected, Microsoft Cloud Security Benchmark policy initiative will be assigned at the intermediate root management group, providing all-up governance view for FSI Landing Zones."
            }
        },
        "enableAsc": {
            "type": "string",
            "defaultValue": "No",
            "allowedValues": [
                "Yes",
                "No"
            ],
            "metadata": {
                "description": "If 'Yes' is selected when also adding a subscription for management, ARM will assign two policies to enable auditing in your environment, into the Log Analytics workspace for platform monitoring. If 'No', it will be ignored."
            }
        },
        "emailContactAsc": {
            "type": "string",
            "metadata": {
                "description": "Email address for Azure Security Center contact details."
            },
            "defaultValue": ""
        },
        "enableAscForServers": {
            "type": "string",
            "defaultValue": "Disabled",
            "allowedValues": [
                "DeployIfNotExists",
                "Disabled"
            ]
        },
        "enableAscForCSPM": {
            "type": "string",
            "defaultValue": "Disabled",
            "allowedValues": [
                "DeployIfNotExists",
                "Disabled"
            ]
        },
        "enableAscForCosmosDb": {
            "type": "string",
            "defaultValue": "Disabled",
            "allowedValues": [
                "DeployIfNotExists",
                "Disabled"
            ]
        },
        "enableAscForSynapse": {
            "type": "string",
            "defaultValue": "Disabled",
            "allowedValues": [
                "DeployIfNotExists",
                "Disabled"
            ]
        },
        "enableAscForAppServices": {
            "type": "string",
            "allowedValues": [
                "Disabled",
                "DeployIfNotExists"
            ],
            "defaultValue": "Disabled"            
        },
        "enableAscForStorage": {
            "type": "string",
            "allowedValues": [
                "Disabled",
                "DeployIfNotExists"
            ],
            "defaultValue": "Disabled"            
        },
        "enableAscForSql": {
            "type": "string",
            "allowedValues": [
                "Disabled",
                "DeployIfNotExists"
            ],
            "defaultValue": "Disabled"            
        },
        "enableAscForSqlOnVm": {
            "type": "string",
            "allowedValues": [
                "Disabled",
                "DeployIfNotExists"
            ],
            "defaultValue": "Disabled"            
        },
        "enableAscForKeyVault": {
            "type": "string",
            "allowedValues": [
                "Disabled",
                "DeployIfNotExists"
            ],
            "defaultValue": "Disabled"            
        },
        "enableAscForArm": {
            "type": "string",
            "allowedValues": [
                "Disabled",
                "DeployIfNotExists"
            ],
            "defaultValue": "Disabled"            
        },
        "enableAscForDns": {
            "type": "string",
            "allowedValues": [
                "Disabled",
                "DeployIfNotExists"
            ],
            "defaultValue": "Disabled"            
        },
        "enableAscForContainers": {
            "type": "string",
            "allowedValues": [
                "Disabled",
                "DeployIfNotExists"
            ],
            "defaultValue": "Disabled"            
        },
        "enableAscForOssDb": {
            "type": "string",
            "allowedValues": [
                "Disabled",
                "DeployIfNotExists"
            ],
            "defaultValue": "Disabled"
        },
        "enableDefenderEndpoint": {
            "type": "string",
            "defaultValue": "No",
            "allowedValues": [
                "Yes",
                "No"
            ],
            "metadata": {
                "description": "If 'Yes' is selected, policy will be assigned to enforce Defender for Endpoint"
            }
        },
        "enableSecuritySolution": {
            "type": "string",
            "defaultValue": "No",
            "allowedValues": [
                "Yes",
                "No"
            ]
        },
        "enableAgentHealth": {
            "type": "string",
            "defaultValue": "No",
            "allowedValues": [
                "Yes",
                "No"
            ]
        },
        "enableChangeTracking": {
            "type": "string",
            "defaultValue": "No",
            "allowedValues": [
                "Yes",
                "No"
            ]
        },
        "enableUpdateMgmt": {
            "type": "string",
            "allowedValues": [
                "Yes",
                "No"
            ],
            "defaultValue": "Yes"
        },
        "enableActivityLog": {
            "type": "string",
            "allowedValues": [
                "Yes",
                "No"
            ],
            "defaultValue": "Yes"
        },
        "enableVmInsights": {
            "type": "string",
            "allowedValues": [
                "Yes",
                "No"
            ],
            "defaultValue": "Yes"
        },
        "enableServiceMap": {
            "type": "string",
            "allowedValues": [
                "Yes",
                "No"
            ],
            "defaultValue": "Yes"
        },
        "enableSqlAssessment": {
            "type": "string",
            "allowedValues": [
                "Yes",
                "No"
            ],
            "defaultValue": "Yes"
        },
        "addressPrefix": {
            "type": "string",
            "defaultValue": ""
        },
        "addressPrefixIngress": {
            "type": "string",
            "defaultValue": ""
        },
        "addressPrefixEgress": {
            "type": "string",
            "defaultValue": ""
        },
        "enableVpnGw": {
            "type": "string",
            "defaultValue": "No",
            "allowedValues": [
                "Yes",
                "No"
            ]
        },
        "enableErGw": {
            "type": "string",
            "defaultValue": "No",
            "allowedValues": [
                "Yes",
                "No"
            ]
        },
        "location": {
            "type": "string",
            "defaultValue": "[deployment().location]"
        },
        "enableHub": {
            "type": "string",
            "allowedValues": [
                "vhub",
                "vwan",
                "nva",
                "No"
            ],
            "defaultValue": "No"
        },
        "enableAzFw": {
            "type": "string",
            "allowedValues": [
                "Yes",
                "No"
            ],
            "defaultValue": "No"
        },
        "enableAzFwIngress": {
            "type": "string",
            "allowedValues": [
                "Yes",
                "No"
            ],
            "defaultValue": "No"
        },
        "enableAzFwEgress": {
            "type": "string",
            "allowedValues": [
                "Yes",
                "No"
            ],
            "defaultValue": "No"
        },
        "enableAzFwDnsProxy": {
            "type": "string",
            "allowedValues": [
                "Yes",
                "No"
            ],
            "defaultValue": "No"
        },
        "enableDdoS": {
            "type": "string",
            "defaultValue": "No",
            "allowedValues": [
                "Yes",
                "Audit",
                "No"
            ]
        },
        "enablePrivateDnsZones": {
            "type": "string",
            "defaultValue": "No",
            "allowedValues": [
                "Yes",
                "No"
            ]
        },
        "subnetMaskForAzFw": {
            "type": "string",
            "defaultValue": ""
        },
        "subnetMaskForAzFwIngress": {
            "type": "string",
            "defaultValue": ""
        },
        "subnetMaskForAzFwEgress": {
            "type": "string",
            "defaultValue": ""
        },
        "subnetMaskForGw": {
            "type": "string",
            "defaultValue": ""
        },
        "subnetMaskForDnsResolverInbound": {
            "type": "string",
            "defaultValue": ""
        },
        "subnetMaskForDnsResolverOutbound": {
            "type": "string",
            "defaultValue": ""
        },
        "gwRegionalOrAz": {
            "type": "string",
            "defaultValue": ""
        },
        "gwAzSku": {
            "type": "string",
            "defaultValue": ""
        },
        "gwRegionalSku": {
            "type": "string",
            "defaultValue": ""
        },
        "erRegionalOrAz": {
            "type": "string",
            "defaultValue": ""
        },
        "erAzSku": {
            "type": "string",
            "defaultValue": ""
        },
        "erRegionalSku": {
            "type": "string",
            "defaultValue": ""
        },
        "firewallSku": {
            "type": "string",
            "allowedValues": [
                "Standard",
                "Premium"
            ],
            "defaultValue": "Standard"
        },
        "firewallSkuIngress": {
            "type": "string",
            "allowedValues": [
                "Standard",
                "Premium"
            ],
            "defaultValue": "Standard"
        },
        "firewallSkuEgress": {
            "type": "string",
            "allowedValues": [
                "Standard",
                "Premium"
            ],
            "defaultValue": "Standard"
        },
        "firewallZones": {
            "type": "array",
            "defaultValue": []
        },
        "firewallZonesIngress": {
            "type": "array",
            "defaultValue": []
        },
        "firewallZonesEgress": {
            "type": "array",
            "defaultValue": []
        },
        "singlePlatformSubscriptionId": {
            "type": "string",
            "defaultValue": "",
            "maxLength": 36
        },
        "expressRouteScaleUnit": {
            "type": "string",
            "defaultValue": "1"
        },
        "vpnGateWayScaleUnit": {
            "type": "string",
            "defaultValue": "1"
        },
        "identityAddressPrefix": {
            "type": "string",
            "defaultValue": ""
        },
        "denyVnetPeering": {
            "type": "string",
            "defaultValue": "No",
            "allowedValues": [
                "No",
                "Yes"
            ]
        },
        "enableBudget": {
            "type": "string",
            "defaultValue": "No",
            "allowedValues": [
                "Yes",
                "No"
            ]
        },
        "budgetAmount": {
            "type": "string",
            "defaultValue": "1000"
        },
        "enableNetworkWatcher": {
            "type": "string",
            "defaultValue": "No",
            "allowedValues": [
                "Yes",
                "No"
            ]
        },
        "enableNsgFlowLogs": {
            "type": "string",
            "defaultValue": "No",
            "allowedValues": [
                "Yes",
                "No"
            ]
        },
        "enableAvnm": {
            "type": "string",
            "defaultValue": "No",
            "allowedValues": [
                "Yes",
                "No"
            ]
        },
        "compliantAzureServices": {
            "type": "array",
            "defaultValue": [],
            "metadata": {
                "description": "Select the Azure service(s) that should be secure by-default"
            }
        },
        "dataExports": {
            "type": "array",
            "defaultValue": [],
            "metadata": {
                "description": "Select the Log Analytics tables that should be exported to event hub."
            }
        }
    },
    "variables": {
        // Declaring the prescriptive structure for FSI Landing Zones
        "mgmtGroups": {
            "industryRoot": "[parameters('industryPrefix')]",
            "platform": "[concat(parameters('industryPrefix'), '-', 'platform')]",
            "management": "[concat(parameters('industryPrefix'), '-', 'management')]",
            "connectivity": "[concat(parameters('industryPrefix'), '-', 'connectivity')]",
            "identity": "[concat(parameters('industryPrefix'), '-', 'identity')]",
            "playground": "[concat(parameters('industryPrefix'), '-', 'playground')]",
            "lzs": "[concat(parameters('industryPrefix'), '-', 'landingzones')]",
            "corp": "[concat(parameters('industryPrefix'), '-', 'corp')]",
            "online": "[concat(parameters('industryPrefix'), '-', 'cloud-native')]"
        },
        // Declaring scopes that will be used for ARM deployments
        "scopes": {
            "industryRootManagementGroup": "[tenantResourceId('Microsoft.Management/managementGroups/', variables('mgmtGroups').industryRoot)]",
            "platformManagementGroup": "[tenantResourceId('Microsoft.Management/managementGroups/', variables('mgmtGroups').platform)]",
            "managementManagementGroup": "[tenantResourceId('Microsoft.Management/managementGroups/', variables('mgmtGroups').management)]",
            "connectivityManagementGroup": "[tenantResourceId('Microsoft.Management/managementGroups/', variables('mgmtGroups').connectivity)]",
            "identityManagementGroup": "[tenantResourceId('Microsoft.Management/managementGroups/', variables('mgmtGroups').identity)]",
            "playgroundManagementGroup": "[tenantResourceId('Microsoft.Management/managementGroups/', variables('mgmtGroups').playground)]",
            "lzsManagementGroup": "[tenantResourceId('Microsoft.Management/managementGroups/', variables('mgmtGroups').lzs)]",
            "corpManagementGroup": "[tenantResourceId('Microsoft.Management/managementGroups/', variables('mgmtGroups').corp)]",
            "onlineManagementGroup": "[tenantResourceId('Microsoft.Management/managementGroups/', variables('mgmtGroups').online)]"
        },
        // Declaring all required deployment uri's used for deployments of composite ARM templates for FSI. As you can see, it's been quite an effort :-)
       "azPrivateDnsPolicyMapping": {
            "https://management.azure.com/": "core/managementGroupTemplates/policyDefinitions/DINE-PrivateDNSZonesPolicySetDefinition.json",
            "https://management.usgovcloudapi.net": "core/managementGroupTemplates/policyDefinitions/gov/fairfaxDINE-PrivateDNSZonesPolicySetDefinition.json"
        },
        "azPrivateDnsArmTemplate": "[variables('azPrivateDnsPolicyMapping')[environment().resourceManager]]",
        "azPublicEndpointsPolicyMapping": {
            "https://management.azure.com/": "core/managementGroupTemplates/policyDefinitions/DENY-PublicEndpointsPolicySetDefinition.json",
            "https://management.usgovcloudapi.net": "core/managementGroupTemplates/policyDefinitions/gov/fairfaxDENY-PublicEndpointsPolicySetDefinition.json"
        },
        "azPublicEndpointArmTemplate": "[variables('azPublicEndpointsPolicyMapping')[environment().resourceManager]]",
        "azPolicyPoliciesMapping": {
            "https://management.azure.com/": "core/managementGroupTemplates/policyDefinitions/policies.json",
            "https://management.usgovcloudapi.net": "core/managementGroupTemplates/policyDefinitions/gov/fairfaxPolicies.json"
        },
        "azPolicyArmTemplate": "[variables('azPolicyPoliciesMapping')[environment().resourceManager]]",
        "deploymentUris": {
            "managementGroups": "[uri(deployment().properties.templateLink.uri, 'core/managementGroupTemplates/mgmtGroupStructure/mgmtGroups.json')]",
            "policyInsightsRpRegistration": "[uri(deployment().properties.templateLink.uri, 'core/managementGroupTemplates/policyInsightsRpReg.json')]",
            "allowedRegionsPolicyAssignment": "[uri(deployment().properties.templateLink.uri, 'core/managementGroupTemplates/policyAssignments/DENY-RegionsPolicyAssignment.json')]",
            "allowedRgRegionsPolicyAssignment": "[uri(deployment().properties.templateLink.uri, 'core/managementGroupTemplates/policyAssignments/DENY-RgRegionsPolicyAssignment.json')]",
            "allowedResourcesPolicyAssignment": "[uri(deployment().properties.templateLink.uri, 'core/managementGroupTemplates/policyAssignments/DENY-ResourcesPolicyAssignment.json')]",
            "customRbacRoleDefinition": "[uri(deployment().properties.templateLink.uri, 'core/managementGroupTemplates/roleDefinitions/Custom-RBACDefinitions.json')]",
            "policyIdentity": "[uri(deployment().properties.templateLink.uri, 'core/subscriptionTemplates/policyIdentity.json')]",
            "policyDefinitions": "[uri(deployment().properties.templateLink.uri, variables('azPolicyArmTemplate'))]",
            "centralizedLogsPolicySetDefinition": "[uri(deployment().properties.templateLink.uri, 'core/managementGroupTemplates/policyDefinitions/Centralized-LoggingPolicySetDefinition.json')]",
            "centralizedLogsPolicyAssignment": "[uri(deployment().properties.templateLink.uri, 'core/managementGroupTemplates/policyAssignments/Centralized-LoggingPolicyAssignment.json')]",
            "compliantCorpLzPolicySetDefinition": "[uri(deployment().properties.templateLink.uri, 'core/managementGroupTemplates/policyDefinitions/Compliant-CorpLzPolicySetDefinition.json')]",
            "compliantCorpLzPolicyAssignment": "[uri(deployment().properties.templateLink.uri, 'core/managementGroupTemplates/policyAssignments/Compliant-CorpLzPolicyAssignment.json')]",
            "compliantApiMPolicySetDefinition": "[uri(deployment().properties.templateLink.uri, 'core/managementGroupTemplates/policyDefinitions/Compliant-APIManagementPolicySetDefinition.json')]",
            "compliantApimPolicyAssignment": "[uri(deployment().properties.templateLink.uri, 'core/managementGroupTemplates/policyAssignments/Compliant-ApimPolicyAssignment.json')]",            
            "compliantAppServicePolicySetDefinition": "[uri(deployment().properties.templateLink.uri, 'core/managementGroupTemplates/policyDefinitions/Compliant-AppServicesPolicySetDefinition.json')]",
            "compliantAppServicePolicyAssignment": "[uri(deployment().properties.templateLink.uri, 'core/managementGroupTemplates/policyAssignments/Compliant-AppServicePolicyAssignment.json')]",
            "compliantAutomationPolicySetDefinition": "[uri(deployment().properties.templateLink.uri, 'core/managementGroupTemplates/policyDefinitions/Compliant-AutomationPolicySetDefinition.json')]",
            "compliantAutomationPolicyAssignment": "[uri(deployment().properties.templateLink.uri, 'core/managementGroupTemplates/policyAssignments/Compliant-AutomationPolicyAssignment.json')]",            
            "compliantBackupPolicySetDefinition": "[uri(deployment().properties.templateLink.uri, 'core/managementGroupTemplates/policyDefinitions/Compliant-BackupPolicySetDefinition.json')]",
            "compliantBackupPolicyAssignment": "[uri(deployment().properties.templateLink.uri, 'core/managementGroupTemplates/policyAssignments/Compliant-BackupPolicyAssignment.json')]",            
            "compliantComputePolicySetDefinition": "[uri(deployment().properties.templateLink.uri, 'core/managementGroupTemplates/policyDefinitions/Compliant-ComputePolicySetDefinition.json')]",
            "compliantComputePolicyAssignment": "[uri(deployment().properties.templateLink.uri, 'core/managementGroupTemplates/policyAssignments/Compliant-ComputePolicyAssignment.json')]",
            "compliantContainerAppsPolicySetDefinition": "[uri(deployment().properties.templateLink.uri, 'core/managementGroupTemplates/policyDefinitions/Compliant-ContainerAppsPolicySetDefinition.json')]",            
            "compliantContainerAppsPolicyAssignment": "[uri(deployment().properties.templateLink.uri, 'core/managementGroupTemplates/policyAssignments/Compliant-ContainerAppsPolicyAssignment.json')]",            
            "compliantContainerInstancePolicySetDefinition": "[uri(deployment().properties.templateLink.uri, 'core/managementGroupTemplates/policyDefinitions/Compliant-ContainerInstancePolicySetDefinition.json')]",
            "compliantContainerInstancePolicyAssignment": "[uri(deployment().properties.templateLink.uri, 'core/managementGroupTemplates/policyAssignments/Compliant-ContainerInstancePolicyAssignment.json')]",
            "compliantContainerRegistryPolicySetDefinition": "[uri(deployment().properties.templateLink.uri, 'core/managementGroupTemplates/policyDefinitions/Compliant-ContainerRegistryPolicySetDefinition.json')]",            
            "compliantContainerRegistryPolicyAssignment": "[uri(deployment().properties.templateLink.uri, 'core/managementGroupTemplates/policyAssignments/Compliant-ContainerRegistryPolicyAssignment.json')]",
            "compliantCosmosDbPolicySetDefinition": "[uri(deployment().properties.templateLink.uri, 'core/managementGroupTemplates/policyDefinitions/Compliant-CosmosDbPolicySetDefinition.json')]",            
            "compliantCosmosDbPolicyAssignment": "[uri(deployment().properties.templateLink.uri, 'core/managementGroupTemplates/policyAssignments/Compliant-CosmosDbPolicyAssignment.json')]",            
            "compliantDataExplorerPolicySetDefinition": "[uri(deployment().properties.templateLink.uri, 'core/managementGroupTemplates/policyDefinitions/Compliant-DataExplorerPolicySetDefinition.json')]",            
            "compliantDataExplorerPolicyAssignment": "[uri(deployment().properties.templateLink.uri, 'core/managementGroupTemplates/policyAssignments/Compliant-DataExplorerPolicyAssignment.json')]",            
            "compliantDataFactoryPolicySetDefinition": "[uri(deployment().properties.templateLink.uri, 'core/managementGroupTemplates/policyDefinitions/Compliant-DataFactoryPolicySetDefinition.json')]",
            "compliantDataFactoryPolicyAssignment": "[uri(deployment().properties.templateLink.uri, 'core/managementGroupTemplates/policyAssignments/Compliant-DataFactoryPolicyAssignment.json')]",
            "compliantEventGridPolicySetDefinition": "[uri(deployment().properties.templateLink.uri, 'core/managementGroupTemplates/policyDefinitions/Compliant-EventGridPolicySetDefinition.json')]",            
            "compliantEventGridPolicyAssignment": "[uri(deployment().properties.templateLink.uri, 'core/managementGroupTemplates/policyAssignments/Compliant-EventGridPolicyAssignment.json')]",
            "compliantEventHubPolicySetDefinition": "[uri(deployment().properties.templateLink.uri, 'core/managementGroupTemplates/policyDefinitions/Compliant-EventHubPolicySetDefinition.json')]",                        
            "compliantEventHubPolicyAssignment": "[uri(deployment().properties.templateLink.uri, 'core/managementGroupTemplates/policyAssignments/Compliant-EventHubPolicyAssignment.json')]",                        
            "compliantKeyVaultPolicySetDefinition": "[uri(deployment().properties.templateLink.uri, 'core/managementGroupTemplates/policyDefinitions/Compliant-KeyVaultPolicySetDefinition.json')]",
            "compliantKeyVaultPolicyAssignment": "[uri(deployment().properties.templateLink.uri, 'core/managementGroupTemplates/policyAssignments/Compliant-KeyVaultPolicyAssignment.json')]",
            "compliantKubernetesPolicySetDefinition": "[uri(deployment().properties.templateLink.uri, 'core/managementGroupTemplates/policyDefinitions/Compliant-KubernetesPolicySetDefinition.json')]",
            "compliantKubernetesPolicyAssignment": "[uri(deployment().properties.templateLink.uri, 'core/managementGroupTemplates/policyAssignments/Compliant-KubernetesPolicyAssignment.json')]",
            "compliantMachineLearningPolicySetDefinition": "[uri(deployment().properties.templateLink.uri, 'core/managementGroupTemplates/policyDefinitions/Compliant-MachineLearningPolicySetDefinition.json')]",
            "compliantMachineLearningPolicyAssignment": "[uri(deployment().properties.templateLink.uri, 'core/managementGroupTemplates/policyAssignments/Compliant-MachineLearningPolicyAssignment.json')]",
            "compliantNetworkPolicySetDefinition": "[uri(deployment().properties.templateLink.uri, 'core/managementGroupTemplates/policyDefinitions/Compliant-NetworkPolicySetDefinition.json')]",
            "compliantNetworkPolicyAssignment": "[uri(deployment().properties.templateLink.uri, 'core/managementGroupTemplates/policyAssignments/Compliant-NetworkPolicyAssignment.json')]",
            "compliantOpenAiPolicySetDefinition": "[uri(deployment().properties.templateLink.uri, 'core/managementGroupTemplates/policyDefinitions/Compliant-OpenAiPolicySetDefinition.json')]",                        
            "compliantOpenAiPolicyAssignment": "[uri(deployment().properties.templateLink.uri, 'core/managementGroupTemplates/policyAssignments/Compliant-OpenAiPolicyAssignment.json')]",                        
            "compliantPostgrePolicySetDefinition": "[uri(deployment().properties.templateLink.uri, 'core/managementGroupTemplates/policyDefinitions/Compliant-PostgreSQLPolicySetDefinition.json')]",                        
            "compliantPostgrePolicyAssignment": "[uri(deployment().properties.templateLink.uri, 'core/managementGroupTemplates/policyAssignments/Compliant-PostgreSQLPolicyAssignment.json')]",                        
            "compliantServiceBusPolicySetDefinition": "[uri(deployment().properties.templateLink.uri, 'core/managementGroupTemplates/policyDefinitions/Compliant-ServiceBusPolicySetDefinition.json')]",                        
            "compliantServiceBusPolicyAssignment": "[uri(deployment().properties.templateLink.uri, 'core/managementGroupTemplates/policyAssignments/Compliant-ServiceBusPolicyAssignment.json')]",                        
            "compliantSQLPolicySetDefinition": "[uri(deployment().properties.templateLink.uri, 'core/managementGroupTemplates/policyDefinitions/Compliant-SQLPolicySetDefinition.json')]",                        
            "compliantSQLPolicyAssignment": "[uri(deployment().properties.templateLink.uri, 'core/managementGroupTemplates/policyAssignments/Compliant-SQLPolicyAssignment.json')]",                        
            "compliantStoragePolicySetDefinition": "[uri(deployment().properties.templateLink.uri, 'core/managementGroupTemplates/policyDefinitions/Compliant-StoragePolicySetDefinition.json')]",
            "compliantStoragePolicyAssignment": "[uri(deployment().properties.templateLink.uri, 'core/managementGroupTemplates/policyAssignments/Compliant-StoragePolicyAssignment.json')]",
            "compliantSynapsePolicySetDefinition": "[uri(deployment().properties.templateLink.uri, 'core/managementGroupTemplates/policyDefinitions/Compliant-SynapsePolicySetDefinition.json')]",
            "compliantSynapsePolicyAssignment": "[uri(deployment().properties.templateLink.uri, 'core/managementGroupTemplates/policyAssignments/Compliant-SynapsePolicyAssignment.json')]",
            "compliantVirtualDesktopPolicySetDefinition": "[uri(deployment().properties.templateLink.uri, 'core/managementGroupTemplates/policyDefinitions/Compliant-VirtualDesktopPolicySetDefinition.json')]",
            "compliantVirtualDesktopPolicyAssignment": "[uri(deployment().properties.templateLink.uri, 'core/managementGroupTemplates/policyAssignments/Compliant-VirtualDesktopPolicyAssignment.json')]",
            "dataPolicyDefinitions": "[uri(deployment().properties.templateLink.uri, 'core/managementGroupTemplates/policyDefinitions/dataPolicies.json')]",
            "vnetConnectivityHub": "[uri(deployment().properties.templateLink.uri, 'core/subscriptionTemplates/hubspoke-connectivity.json')]",
            "vwanConnectivityHub": "[uri(deployment().properties.templateLink.uri, 'core/subscriptionTemplates/vwan-connectivity.json')]",
            "nvaConnectivityHub": "[uri(deployment().properties.templateLink.uri, 'core/subscriptionTemplates/nvahubspoke-connectivity.json')]",
            "ingressAndEgress": "[uri(deployment().properties.templateLink.uri, 'core/subscriptionTemplates/ingress-egress.json')]",
            "subscriptionPlacement": "[uri(deployment().properties.templateLink.uri, 'core/managementGroupTemplates/subscriptionOrganization/subscriptionOrganization.json')]",
            "monitoring": "[uri(deployment().properties.templateLink.uri, 'core/subscriptionTemplates/logAnalyticsWorkspace.json')]",
            "resourceGroup": "[uri(deployment().properties.templateLink.uri, 'core/subscriptionTemplates/resourceGroup.json')]",
            "ddosProtection": "[uri(deployment().properties.templateLink.uri, 'core/resourceGroupTemplates/ddosProtection.json')]",
            "logAnalyticsPolicyAssignment": "[uri(deployment().properties.templateLink.uri, 'core/managementGroupTemplates/policyAssignments/DINE-LogAnalyticsPolicyAssignment.json')]",
            "monitoringSolutions": "[uri(deployment().properties.templateLink.uri, 'core/subscriptionTemplates/logAnalyticsSolutions.json')]",
            "asbPolicyInitiative": "[uri(deployment().properties.templateLink.uri, 'core/managementGroupTemplates/policyAssignments/DINE-ASBPolicyAssignment.json')]",
            "resourceDiagnosticsInitiative": "[uri(deployment().properties.templateLink.uri, 'core/managementGroupTemplates/policyAssignments/DINE-ResourceDiagnosticsPolicyAssignment.json')]",
            "activityDiagnosticsPolicyAssignment": "[uri(deployment().properties.templateLink.uri, 'core/managementGroupTemplates/policyAssignments/DINE-ActivityLogPolicyAssignment.json')]",
            "ascConfigPolicyInitiative": "[uri(deployment().properties.templateLink.uri, 'core/managementGroupTemplates/policyAssignments/DINE-ASCConfigPolicyAssignment.json')]",
            "defenderEndpointPolicyAssignment": "[uri(deployment().properties.templateLink.uri, 'core/managementGroupTemplates/policyAssignments/DINE-DefenderForVms.json')]",
            "azVmBackupPolicyAssignment": "[uri(deployment().properties.templateLink.uri, 'core/managementGroupTemplates/policyAssignments/DINE-VMBackupPolicyAssignment.json')]",
            "azPolicyForKubernetesPolicyAssignment": "[uri(deployment().properties.templateLink.uri, 'core/managementGroupTemplates/policyAssignments/DINE-AksPolicyPolicyAssignment.json')]",
            "aksPrivEscalationPolicyAssignment": "[uri(deployment().properties.templateLink.uri, 'core/managementGroupTemplates/policyAssignments/DENY-AksPrivEscalationPolicyAssignment.json')]",
            "aksPrivilegedPolicyAssignment": "[uri(deployment().properties.templateLink.uri, 'core/managementGroupTemplates/policyAssignments/DENY-AksPrivilegedPolicyAssignment.json')]",
            "tlsSslPolicyAssignment": "[uri(deployment().properties.templateLink.uri, 'core/managementGroupTemplates/policyAssignments/DENY-DINE-APPEND-TLS-SSL-PolicyAssignment.json')]",
            "aksHttpsPolicyAssignment": "[uri(deployment().properties.templateLink.uri, 'core/managementGroupTemplates/policyAssignments/DENY-AksWithoutHttpsPolicyAssignment.json')]",            
            "ipFwdPolicyAssignment": "[uri(deployment().properties.templateLink.uri, 'core/managementGroupTemplates/policyAssignments/DENY-IPForwardingPolicyAssignment.json')]",
            "publicEndpointPolicySetDefinition": "[uri(deployment().properties.templateLink.uri, variables('azPublicEndpointArmTemplate'))]",
            "publicEndpointPolicyAssignment": "[uri(deployment().properties.templateLink.uri, 'core/managementGroupTemplates/policyAssignments/DENY-PublicEndpointPolicyAssignment.json')]",
            "privateDnsZonePolicySetDefinition": "[uri(deployment().properties.templateLink.uri, variables('azPrivateDnsArmTemplate'))]",
            "privateDnsZonePolicyAssignment": "[uri(deployment().properties.templateLink.uri, 'core/managementGroupTemplates/policyAssignments/DINE-PrivateDNSZonesPolicyAssignment.json')]",
            "pipPolicyAssignment": "[uri(deployment().properties.templateLink.uri, 'core/managementGroupTemplates/policyAssignments/DENY-PublicIpAddressPolicyAssignment.json')]",
            "rdpFromInternetPolicyAssignment": "[uri(deployment().properties.templateLink.uri, 'core/managementGroupTemplates/policyAssignments/DENY-RDPFromInternetPolicyAssignment.json')]",
            "storageHttpsPolicyAssignment": "[uri(deployment().properties.templateLink.uri, 'core/managementGroupTemplates/policyAssignments/DENY-StorageWithoutHttpsPolicyAssignment.json')]",
            "subnetNsgPolicyAssignment": "[uri(deployment().properties.templateLink.uri, 'core/managementGroupTemplates/policyAssignments/DENY-SubnetWithoutNsgPolicyAssignment.json')]",
            "sqlAuditPolicyAssignment": "[uri(deployment().properties.templateLink.uri, 'core/managementGroupTemplates/policyAssignments/DINE-SQLAuditingPolicyAssignment.json')]",
            "sqlEncryptionPolicyAssignment": "[uri(deployment().properties.templateLink.uri, 'core/managementGroupTemplates/policyAssignments/DINE-SQLEncryptionPolicyAssignment.json')]",
            "ddosPolicyAssignment": "[uri(deployment().properties.templateLink.uri, 'core/managementGroupTemplates/policyAssignments/MODIFY-DDoSPolicyAssignment.json')]",
            "corpVnetPeering": "[uri(deployment().properties.templateLink.uri, 'core/subscriptionTemplates/vnetPeering.json')]",
            "corpVwanPeering": "[uri(deployment().properties.templateLink.uri, 'core/subscriptionTemplates/vnetPeeringVwan.json')]",
            "privateDnsZones": "[uri(deployment().properties.templateLink.uri, 'core/resourceGroupTemplates/privateDnsZones.json')]",
            "roleAssignments": "[uri(deployment().properties.templateLink.uri, 'core/managementGroupTemplates/roleAssignments/roleAssignment.json')]",
            "databricksSku": "[uri(deployment().properties.templateLink.uri, 'core/managementGroupTemplates/policyAssignments/DENY-DatabricksSkuPolicyAssignment.json')]",
            "databricksPip": "[uri(deployment().properties.templateLink.uri, 'core/managementGroupTemplates/policyAssignments/DENY-DatabricksPipPolicyAssignment.json')]",
            "databricksCluster": "[uri(deployment().properties.templateLink.uri, 'core/managementGroupTemplates/policyAssignments/DENY-DatabricksClusterPolicyAssignment.json')]",
            "govAscPolicyAssignment": "[uri(deployment().properties.templateLink.uri, 'core/managementGroupTemplates/policyAssignments/gov/fairfaxDINE-ASCConfigPolicyAssignment.json')]",
            "logStorageAccount": "[uri(deployment().properties.templateLink.uri, 'core/subscriptionTemplates/logStorageAccount.json')]",
            "nwDeployment": "[uri(deployment().properties.templateLink.uri, 'core/subscriptionTemplates/networkWatcher.json')]",
            "nsgFlowLogPolicyAssignment": "[uri(deployment().properties.templateLink.uri, 'core/managementGroupTemplates/policyAssignments/DINE-NSGFlowLogsPolicyAssignment.json')]",
            "nsgFlowLogPolicyExemption": "[uri(deployment().properties.templateLink.uri, 'core/managementGroupTemplates/policyExemptions/EXEMPT-NSGFlowLogStAcc.json')]",
            "sshFromInternetPolicyAssignment": "[uri(deployment().properties.templateLink.uri, 'core/managementGroupTemplates/policyAssignments/DENY-SSHFromInternetPolicyAssignment.json')]",
            "denyVnetPeeringPolicyAssignment": "[uri(deployment().properties.templateLink.uri, 'core/managementGroupTemplates/policyAssignments/DENY-VNetPeeringPolicyAssignment.json')]",
            "budgetPolicyAssignment": "[uri(deployment().properties.templateLink.uri, 'core/managementGroupTemplates/policyAssignments/DINE-BudgetPolicyAssignment.json')]",
            "appGwWithoutWafPolicyAssignment": "[uri(deployment().properties.templateLink.uri, 'core/managementGroupTemplates/policyAssignments/DENY-AppGwWithoutWAFPolicyAssignment.json')]",
            "appGwWithouthFwPolicyAssignment": "[uri(deployment().properties.templateLink.uri, 'core/managementGroupTemplates/policyAssignments/DENY-AppGwWithoutFwRulesPolicyAssignment.json')]",
            "wafWithoutFdPolicyAssignment": "[uri(deployment().properties.templateLink.uri, 'core/managementGroupTemplates/policyAssignments/DENY-WafWithoutFrontDoorEntryPointPolicyAssignment.json')]",
            "fdWithoutWafPolicyAssignment": "[uri(deployment().properties.templateLink.uri, 'core/managementGroupTemplates/policyAssignments/DENY-FdWithoutManagedWafPolicyAssignment.json')]",
            "openAiLocalAuthPolicyAssignment": "[uri(deployment().properties.templateLink.uri, 'core/managementGroupTemplates/policyAssignments/DENY-OpenAiWithLocalAuthPolicyAssignment.json')]",
            "openAiMiPolicyAssignment": "[uri(deployment().properties.templateLink.uri, 'core/managementGroupTemplates/policyAssignments/DENY-OpenAiWithoutMiPolicyAssignment.json')]",
            // Telco industry
            "erHaPolicyAssignment": "[uri(deployment().properties.templateLink.uri, 'telco/managementGroupTemplates/policyAssignments/DENY-non-ha-expressRoutes-policyAssignment.json')]",
            "pipHaPolicyAssignment": "[uri(deployment().properties.templateLink.uri, 'telco/managementGroupTemplates/policyAssignments/DENY-non-ha-publicIps-policyAssignment.json')]"
        },
        // Declaring deterministic deployment names
        "deploymentSuffix": "[concat('-', deployment().location, guid(parameters('industryPrefix')))]",
        "deploymentNames": {
            "mgmtGroupDeploymentName": "[take(concat(parameters('industry'), '-Mgs', variables('deploymentSuffix')), 64)]",
            "policyRpRegDeploymentName": "[take(concat(parameters('industry'), '-PolicyInsights', variables('deploymentSuffix')), 64)]",
            "customRbacDeploymentName": "[take(concat(parameters('industry'), '-RoleDefinitions', variables('deploymentSuffix')), 64)]",
            "allowedRegionsDeploymentName": "[take(concat(parameters('industry'), '-Azure-Regions', variables('deploymentSuffix')), 64)]",
            "allowedRgRegionsDeploymentName": "[take(concat(parameters('industry'), '-Azure-RG-Regions', variables('deploymentSuffix')), 64)]",
            "allowedResourcesDeploymentName": "[take(concat(parameters('industry'), '-Azure-Resources', variables('deploymentSuffix')), 64)]",
            "centralizedLoggingDeploymentName": "[take(concat(parameters('industry'), '-Centralized-Logs', variables('deploymentSuffix')), 64)]",
            "compliantCorpLzDeploymentName": "[take(concat(parameters('industry'), '-Compliant-CorpLz', variables('deploymentSuffix')), 64)]",
            "compliantApimDeploymentName": "[take(concat(parameters('industry'), '-Compliant-Apim', variables('deploymentSuffix')), 64)]",
            "compliantAppServiceDeploymentName": "[take(concat(parameters('industry'), '-Compliant-AppService', variables('deploymentSuffix')), 64)]",
            "compliantAutomationDeploymentName": "[take(concat(parameters('industry'), '-Compliant-Automation', variables('deploymentSuffix')), 64)]",
            "compliantBackupDeploymentName": "[take(concat(parameters('industry'), '-Compliant-Backup', variables('deploymentSuffix')), 64)]",
            "compliantComputeDeploymentName": "[take(concat(parameters('industry'), '-Compliant-Compute', variables('deploymentSuffix')), 64)]",
            "compliantContainerAppsDeploymentName": "[take(concat(parameters('industry'), '-Compliant-ContainerApps', variables('deploymentSuffix')), 64)]",
            "compliantContainerInstanceDeploymentName": "[take(concat(parameters('industry'), '-Compliant-ContainerInstance', variables('deploymentSuffix')), 64)]",
            "compliantContainerRegistryDeploymentName": "[take(concat(parameters('industry'), '-Compliant-ContainerRegistry', variables('deploymentSuffix')), 64)]",
            "compliantCosmosDbDeploymentName": "[take(concat(parameters('industry'), '-Compliant-CosmosDb', variables('deploymentSuffix')), 64)]",
            "compliantDataExplorerDeploymentName": "[take(concat(parameters('industry'), '-Compliant-DataExplorer', variables('deploymentSuffix')), 64)]",
            "compliantDataFactoryDeploymentName": "[take(concat(parameters('industry'), '-Compliant-DataFactory', variables('deploymentSuffix')), 64)]",
            "compliantEventGridDeploymentName": "[take(concat(parameters('industry'), '-Compliant-EventGrid', variables('deploymentSuffix')), 64)]",
            "compliantEventHubDeploymentName": "[take(concat(parameters('industry'), '-Compliant-EventHub', variables('deploymentSuffix')), 64)]",
            "compliantKeyVaultDeploymentName": "[take(concat(parameters('industry'), '-Compliant-KeyVault', variables('deploymentSuffix')), 64)]",
            "compliantKubernetesDeploymentName": "[take(concat(parameters('industry'), '-Compliant-Kubernetes', variables('deploymentSuffix')), 64)]",
            "compliantMachineLearningDeploymentName": "[take(concat(parameters('industry'), '-Compliant-MachineLearning', variables('deploymentSuffix')), 64)]",
            "compliantNetworkDeploymentName": "[take(concat(parameters('industry'), '-Compliant-Network', variables('deploymentSuffix')), 64)]",
            "compliantOpenAiDeploymentName": "[take(concat(parameters('industry'), '-Compliant-OpenAi', variables('deploymentSuffix')), 64)]",
            "compliantPostgreDeploymentName": "[take(concat(parameters('industry'), '-Compliant-Postgre', variables('deploymentSuffix')), 64)]",
            "compliantServiceBusDeploymentName": "[take(concat(parameters('industry'), '-Compliant-ServiceBus', variables('deploymentSuffix')), 64)]",
            "compliantSqlDeploymentName": "[take(concat(parameters('industry'), '-Compliant-Sql', variables('deploymentSuffix')), 64)]",
            "compliantStorageDeploymentName": "[take(concat(parameters('industry'), '-Compliant-Storage', variables('deploymentSuffix')), 64)]",
            "compliantSynapseDeploymentName": "[take(concat(parameters('industry'), '-Compliant-Synapse', variables('deploymentSuffix')), 64)]",
            "compliantVirtualDesktopDeploymentName": "[take(concat(parameters('industry'), '-Compliant-AVD', variables('deploymentSuffix')), 64)]",
            "mgmtSubscriptionPlacement": "[take(concat(parameters('industry'), '-MgmtSub', variables('deploymentSuffix')), 64)]",
            "policyIdentityDeploymentName": "[take(concat(parameters('industry'), '-PolicyIdentity', variables('deploymentSuffix')), 64)]",
            "policyIdentityRoleAssignmentDeploymentName": "[take(concat(parameters('industry'), '-PolicyIdentityRoleAssignment', variables('deploymentSuffix')), 64)]",
            "databricksSkuDeploymentName": "[take(concat(parameters('industry'), '-DBSku', variables('deploymentSuffix')), 64)]",
            "databricksPipDeploymentName": "[take(concat(parameters('industry'), '-DBPip', variables('deploymentSuffix')), 64)]",
            "databricksClusterDeploymentName": "[take(concat(parameters('industry'), '-DBCluster', variables('deploymentSuffix')), 64)]",
            "corpPeeringDeploymentName": "[take(concat(parameters('industry'), '-CorpPeering', variables('deploymentSuffix')), 60)]",
            "connectivitySubscriptionPlacement": "[take(concat(parameters('industry'), '-ConnectivitySub', variables('deploymentSuffix')), 64)]",
            "ingressSubscriptionPlacement": "[take(concat(parameters('industry'), '-IngressSub', variables('deploymentSuffix')), 64)]",
            "egressSubscriptionPlacement": "[take(concat(parameters('industry'), '-EgressSub', variables('deploymentSuffix')), 64)]",
            "identitySubscriptionPlacement": "[take(concat(parameters('industry'), '-IdentitySub', variables('deploymentSuffix')), 64)]",
            "policyDeploymentName": "[take(concat(parameters('industry'), '-Policy', variables('deploymentSuffix')), 64)]",
            "dataPolicyDeploymentName": "[take(concat(parameters('industry'),'-Data-Policy', variables('deploymentSuffix')), 64)]",
            "ddosRgDeploymentName": "[take(concat(parameters('industry'), '-DDoSRg', variables('deploymentSuffix')), 64)]",
            "ddosDeploymentName": "[take(concat(parameters('industry'), '-DDoS', variables('deploymentSuffix')), 64)]",
            "ddosHubPolicyDeploymentName": "[take(concat(parameters('industry'), '-DDoSHubPolicy', variables('deploymentSuffix')), 64)]",
            "cmkPolicyDeploymentName": "[take(concat(parameters('industry'), '-CMKPolicy', variables('deploymentSuffix')), 64)]",
            "cmkPolicyAssignmentDeploymentName": "[take(concat(parameters('industry'), '-CMKPolicyAssignment', variables('deploymentSuffix')), 64)]",
            "ddosLzPolicyDeploymentName": "[take(concat(parameters('industry'), '-DDoSLZPolicy', variables('deploymentSuffix')), 64)]",
            "monitoringDeploymentName": "[take(concat(parameters('industry'), '-Monitoring', variables('deploymentSuffix')), 64)]",
            "logAnalyticsPolicyDeploymentName": "[take(concat(parameters('industry'), '-LAPolicy', variables('deploymentSuffix')), 64)]",
            "monitoringSolutionsDeploymentName": "[take(concat(parameters('industry'), '-Solutions', variables('deploymentSuffix')), 64)]",
            "asbPolicyDeploymentName": "[take(concat(parameters('industry'), '-ASB', variables('deploymentSuffix')), 64)]",
            "resourceDiagnosticsPolicyDeploymentName": "[take(concat(parameters('industry'), '-ResourceDiagnostics', variables('deploymentSuffix')), 64)]",
            "activityDiagnosticsPolicyDeploymentName": "[take(concat(parameters('industry'), '-ActivityDiagnostics', variables('deploymentSuffix')), 64)]",
            "ascPolicyDeploymentName": "[take(concat(parameters('industry'), '-ASC', variables('deploymentSuffix')), 64)]",
            "ascGovPolicyDeploymentName": "[take(concat(parameters('industry'), '-Gov-ASC', variables('deploymentSuffix')), 64)]",
            "vnetConnectivityHubDeploymentName": "[take(concat(parameters('industry'), '-HubSpoke', variables('deploymentSuffix')), 64)]",
            "ingressDeploymentName": "[take(concat(parameters('industry'), '-Ingress', variables('deploymentSuffix')), 64)]",
            "egressDeploymentName": "[take(concat(parameters('industry'), '-Egress', variables('deploymentSuffix')), 64)]",
            "vwanConnectivityHubDeploymentName": "[take(concat(parameters('industry'), '-VWanHub', variables('deploymentSuffix')), 64)]",
            "nvaConnectivityHubDeploymentName": "[take(concat(parameters('industry'), '-NVAHub', variables('deploymentSuffix')), 64)]",
            "azVmMonitorPolicyDeploymentName": "[take(concat(parameters('industry'), '-AzVmMonitor', variables('deploymentSuffix')), 64)]",
            "defenderEndpointPolicyDeploymentName": "[take(concat(parameters('industry'), '-DefenderEndpoint', variables('deploymentSuffix')), 64)]",
            "azVmssMonitorPolicyDeploymentName": "[take(concat(parameters('industry'),'-AzVmssMonitor', variables('deploymentSuffix')), 64)]",
            "azBackupLzPolicyDeploymentName": "[take(concat(parameters('industry'),'-AzBackupLz', variables('deploymentSuffix')), 64)]",
            "azBackupIdentityPolicyDeploymentName": "[take(concat(parameters('industry'), '-AzBackupIdentity', variables('deploymentSuffix')), 64)]",
            "azPolicyForAksPolicyDeploymentName": "[take(concat(parameters('industry'), '-AksPolicy', variables('deploymentSuffix')), 64)]",
            "aksPrivEscalationPolicyDeploymentName": "[take(concat(parameters('industry'), '-AksPrivEsc', variables('deploymentSuffix')), 64)]",
            "aksHttpsPolicyDeploymentName": "[take(concat(parameters('industry'), '-AksHttps', variables('deploymentSuffix')), 64)]",
            "aksPrivilegedPolicyDeploymentName": "[take(concat(parameters('industry'), '-AksPrivileged', variables('deploymentSuffix')), 64)]",
            "tlsSslPolicyDeploymentName": "[take(concat(parameters('industry'), '-TLSSSL', variables('deploymentSuffix')), 64)]",
            "ipFwPolicyDeploymentName": "[take(concat(parameters('industry'), '-IPFwd', variables('deploymentSuffix')), 64)]",
            "publicEndpointPolicyDeploymentName": "[take(concat(parameters('industry'), '-PEndpoint', variables('deploymentSuffix')), 64)]",
            "publicEndpointPolicyDefinitionName": "[take(concat(parameters('industry'), '-Policy-PEndpoints', variables('deploymentSuffix')), 64)]",
            "privateDnsPolicyDefinitionName": "[take(concat(parameters('industry'), '-Policy-PrivateDns', variables('deploymentSuffix')), 64)]",
            "privateDnsPolicyDeploymentName": "[take(concat(parameters('industry'), '-PrivDNSAssignment', variables('deploymentSuffix')), 64)]",
            "pipPolicyDeploymentName": "[take(concat(parameters('industry'), '-PIP', variables('deploymentSuffix')), 64)]",
            "rdpFromInternetPolicyDeploymentName": "[take(concat(parameters('industry'), '-RDP', variables('deploymentSuffix')), 64)]",
            "sshFromInternetPolicyDeploymentName": "[take(concat(parameters('industry'), '-SSH', variables('deploymentSuffix')), 64)]",
            "rdpFromInternetIdentityPolicyDeploymentName": "[take(concat(parameters('industry'), '-RDPIdentity', variables('deploymentSuffix')), 64)]",
            "storageHttpsPolicyDeploymentName": "[take(concat(parameters('industry'), '-StorageHttps', variables('deploymentSuffix')), 64)]",
            "subnetNsgPolicyDeploymentName": "[take(concat(parameters('industry'), '-SubnetNsg', variables('deploymentSuffix')), 64)]",
            "subnetNsgIdentityPolicyDeploymentName": "[take(concat(parameters('industry'), '-SubnetNsgIdentity', variables('deploymentSuffix')), 64)]",
            "playgroundSubs": "[take(concat(parameters('industry'), '-Playground', variables('deploymentSuffix')), 60)]",
            "onlineLzSubs": "[take(concat(parameters('industry'), '-OnlineLzs', variables('deploymentSuffix')), 60)]",
            "corpLzSubs": "[take(concat(parameters('industry'), '-CorpLzs', variables('deploymentSuffix')), 60)]",
            "corpConnectedMoveLzSubs": "[take(concat(parameters('industry'), '-CorpConnLzs', variables('deploymentSuffix')), 50)]",
            "corpConnectedLzSubs": "[take(concat(parameters('industry'), '-CorpPeering', variables('deploymentSuffix')), 50)]",
            "privateDnsZoneRgDeploymentName": "[take(concat(parameters('industry'), '-PrivDNSRG', variables('deploymentSuffix')), 64)]",
            "privateDnsZonesDeploymentName": "[take(concat(parameters('industry'), '-PrivDNSZones', variables('deploymentSuffix')), 35)]",
            "dnsZoneRoleAssignmentDeploymentName": "[take(concat(parameters('industry'), '-DNSZoneRole', variables('deploymentSuffix')), 64)]",
            "dnsZoneOperatorRoleAssignmentDeploymentName": "[take(concat(parameters('industry'), '-DNSZoneOperatorRole', variables('deploymentSuffix')), 64)]",
            "nsgFLowLogRoleAssignmentDeploymentName": "[take(concat(parameters('industry'), '-NSGFlowRole', variables('deploymentSuffix')), 64)]",
            "identityPeeringDeploymentName": "[take(concat(parameters('industry'), '-IDPeering', variables('deploymentSuffix')), 64)]",
            "identityVwanPeeringDeploymentName": "[take(concat(parameters('industry'), '-IDVwanPeering', variables('deploymentSuffix')), 64)]",
            "corpConnectedLzVwanSubs": "[take(concat(parameters('industry'), '-CorpConnLzsVwan', variables('deploymentSuffix')), 50)]",
            "logStorageDeploymentName": "[take(concat(parameters('industry'), '-LogStorage', variables('deploymentSuffix')), 64)]",
            "nwDeploymentName": "[take(concat(parameters('industry'), '-NwPlatform', variables('deploymentSuffix')), 64)]",
            "nwRgLzPolicyAssignment": "[take(concat(parameters('industry'), '-NwRgLz', variables('deploymentSuffix')), 64)]",
            "nsgFlowLogsPlatformPolicyAssignment": "[take(concat(parameters('industry'), '-NSGFlowPlatform', variables('deploymentSuffix')), 64)]",
            "nsgFLowLogsLzPolicyAssignment": "[take(concat(parameters('industry'), '-NSGFlowLz', variables('deploymentSuffix')), 64)]",
            "nsgFlowLogPolicyExemption": "[take(concat(parameters('industry'), '-NSGExempt', variables('deploymentSuffix')), 64)]",
            "denyVnetPeeringDeploymentName": "[take(concat(parameters('industry'), '-VNetPeering', variables('deploymentSuffix')), 64)]",
            "budgetDeploymentName": "[take(concat(parameters('industry'), '-Budget', variables('deploymentSuffix')), 64)]",
            // Compliant Azure Service Policy Assignment deployment names
            "centralizedPlaygroundLogsAssignmentDeploymentName": "[take(concat(parameters('industry'), '-Enforce-Logging-Playground', variables('deploymentSuffix')), 64)]",
            "centralizedPlatformLogsAssignmentDeploymentName": "[take(concat(parameters('industry'), '-Enforce-Logging-Platform', variables('deploymentSuffix')), 64)]",
            "compliantCorpLzAssignmentDeploymentName": "[take(concat(parameters('industry'), '-Enforce-Compliant-CorpLz', variables('deploymentSuffix')), 64)]",
            "compliantAutomationAssignmentDeploymentName": "[take(concat(parameters('industry'), '-Enforce-Compliant-Auto', variables('deploymentSuffix')), 64)]",
            "compliantBackupAssignmentDeploymentName": "[take(concat(parameters('industry'), '-Enforce-Compliant-Backup', variables('deploymentSuffix')), 64)]",
            "compliantCosmosDbAssignmentDeploymentName": "[take(concat(parameters('industry'), '-Enforce-Compliant-CosmosDb', variables('deploymentSuffix')), 64)]",
            "compliantComputeAssignmentDeploymentName": "[take(concat(parameters('industry'), '-Enforce-Compliant-Compute', variables('deploymentSuffix')), 64)]",
            "compliantDataExplorerAssignmentDeploymentName": "[take(concat(parameters('industry'), '-Enforce-Compliant-ADE', variables('deploymentSuffix')), 64)]",
            "compliantDataFactoryAssignmentDeploymentName": "[take(concat(parameters('industry'), '-Enforce-Compliant-ADF', variables('deploymentSuffix')), 64)]",
            "compliantEventGridAssignmentDeploymentName": "[take(concat(parameters('industry'), '-Enforce-Compliant-EG', variables('deploymentSuffix')), 64)]",
            "compliantEventHubAssignmentDeploymentName": "[take(concat(parameters('industry'), '-Enforce-Compliant-EH', variables('deploymentSuffix')), 64)]",
            "compliantKeyVaultAssignmentDeploymentName": "[take(concat(parameters('industry'), '-Enforce-Compliant-KeyVault', variables('deploymentSuffix')), 64)]",
            "compliantOpenAiAssignmentDeploymentName": "[take(concat(parameters('industry'), '-Enforce-Compliant-OpenAi', variables('deploymentSuffix')), 64)]",
            "compliantPostgreAssignmentDeploymentName": "[take(concat(parameters('industry'), '-Enforce-Compliant-Postgre', variables('deploymentSuffix')), 64)]",
            "compliantSqlAssignmentDeploymentName": "[take(concat(parameters('industry'), '-Enforce-Compliant-SQL', variables('deploymentSuffix')), 64)]",
            "compliantSynapseAssignmentDeploymentName": "[take(concat(parameters('industry'), '-Enforce-Compliant-Synapse', variables('deploymentSuffix')), 64)]",
            "compliantMachineLearningAssignmentDeploymentName": "[take(concat(parameters('industry'), '-Enforce-Compliant-MachineLearning', variables('deploymentSuffix')), 64)]",
            "compliantNetworkAssignmentDeploymentName": "[take(concat(parameters('industry'), '-Enforce-Compliant-Network', variables('deploymentSuffix')), 64)]",
            "compliantPlatformNetworkAssignmentDeploymentName": "[take(concat(parameters('industry'), '-Enforce-Compliant-PlatformNetwork', variables('deploymentSuffix')), 64)]",
            "compliantContainerAppsAssignmentDeploymentName": "[take(concat(parameters('industry'), '-Enforce-Compliant-ContainerApps', variables('deploymentSuffix')), 64)]",            
            "compliantContainerInstanceAssignmentDeploymentName": "[take(concat(parameters('industry'), '-Enforce-Compliant-ContainerInstance', variables('deploymentSuffix')), 64)]",            
            "compliantContainerRegistryAssignmentDeploymentName": "[take(concat(parameters('industry'), '-Enforce-Compliant-ContainerRegistry', variables('deploymentSuffix')), 64)]",            
            "compliantServiceBusAssignmentDeploymentName": "[take(concat(parameters('industry'), '-Enforce-Compliant-ServiceBus', variables('deploymentSuffix')), 64)]",            
            "compliantKubernetesAssignmentDeploymentName": "[take(concat(parameters('industry'), '-Enforce-Compliant-Kubernetes', variables('deploymentSuffix')), 64)]",            
            "compliantStorageAssignmentDeploymentName": "[take(concat(parameters('industry'), '-Enforce-Compliant-Storage', variables('deploymentSuffix')), 64)]",            
            "compliantApimAssignmentDeploymentName": "[take(concat(parameters('industry'), '-Enforce-Compliant-Apim', variables('deploymentSuffix')), 64)]",
            "compliantAppServiceAssignmentDeploymentName": "[take(concat(parameters('industry'), '-Enforce-Compliant-AppService', variables('deploymentSuffix')), 64)]",
            "compliantVirtualDesktopAssignmentDeploymentName": "[take(concat(parameters('industry'), '-Enforce-Compliant-AVD', variables('deploymentSuffix')), 64)]",
            // Telco specific policies assignment deployments
            "erHaPolicyAssignment": "[take(concat(parameters('industry'), '-DenyNonHaEr', variables('deploymentSuffix')), 64)]",
            "pipHaPolicyAssignment": "[take(concat(parameters('industry'), '-DenyNonHaPip', variables('deploymentSuffix')), 64)]",
            "privateDnsOperatorPolicyDeploymentName": "[take(concat(parameters('industry'), '-PrivateDNSOperator',variables('deploymentSuffix')), 64)]"
        },
        // Declaring deterministic names for Resource Groups that will be created for platform resources
        "platformRgNames": {
            "mgmtRg": "[concat(parameters('industryPrefix'), '-mgmt')]",
            "userAssignedIdentity": "[concat(parameters('industryPrefix'), '-policy-identity')]",
            "connectivityRg": "[concat(parameters('industryPrefix'), '-vnethub-', parameters('location'))]",
            "ddosRg": "[concat(parameters('industryPrefix'), '-ddos')]",
            "privateDnsRg": "[concat(parameters('industryPrefix'), '-privatedns')]",
            "identityVnetRg": "[concat(parameters('industryPrefix'), '-vnet-', parameters('location'))]",
            "lzVnetRg": "[concat(parameters('industryPrefix'), '-vnet-', parameters('location'))]",
            "logNwRg": "[concat(parameters('industryPrefix'), '-nwlog-', parameters('location'))]"
        },
        // Declaring deterministic names for platform resources that will be created
        "platformResourceNames": {
            "logAnalyticsWorkspace": "[concat(parameters('industryPrefix'), '-law')]",
            "eventHubNamespace": "[concat(parameters('industryPrefix'), '-ehn-', parameters('location'))]",
            "userAssignedIdentityName": "[concat(parameters('industryPrefix'), '-policy-identity')]",
            "logNwStorageAccount": "[toLower(take(concat(replace(replace(parameters('industryPrefix'), '-', ''), '_', ''), parameters('location'), uniqueString(deployment().name)), 23))]",
            "automationAccount": "[concat(parameters('industryPrefix'), '-aauto')]",
            "vpnGwName": "[concat(parameters('industryPrefix'), '-vpngw-', parameters('location'))]",
            "erGwName": "[concat(parameters('industryPrefix'), '-ergw-', parameters('location'))]",
            "ddosName": "[concat(parameters('industryPrefix'), '-ddos-', parameters('location'))]",
            "azFwPolicyName": "[concat(parameters('industryPrefix'), '-azfwpolicy-', parameters('location'))]",
            "azFwName": "[concat(parameters('industryPrefix'), '-fw-', parameters('location'))]",
            "azErGwIpName": "[concat(parameters('industryPrefix'), '-erpip-', parameters('location'))]",
            "hubName": "[concat(parameters('industryPrefix'), '-hub-', parameters('location'))]",
            "vwanName": "[concat(parameters('industryPrefix'), '-vwan-', parameters('location'))]",
            "azVpnGwIpName": "[concat(parameters('industryPrefix'), '-gwpip-', parameters('location'))]",
            "azFwIpName": "[concat(parameters('industryPrefix'), '-fwpip-', parameters('location'))]",
            "identityVnet": "[concat(parameters('industryPrefix'), '-vnet-', parameters('location'))]",
            "lzVnet": "[concat(parameters('industryPrefix'), '-vnet-', parameters('location'))]"
        },
        // Declaring deterministic resourceId's for platform resources that will be created
        "singleVsDedicatedMgmtSub": "[if(empty(parameters('managementSubscriptionId')), parameters('singlePlatformSubscriptionId'), parameters('managementSubscriptionId'))]",
        "singleVsDedicatedConnectivitySub": "[if(empty(parameters('connectivitySubscriptionId')), parameters('singlePlatformSubscriptionId'), parameters('connectivitySubscriptionId'))]",
        "singleVsDedicatedIdentitySub": "[if(empty(parameters('identitySubscriptionId')), parameters('singlePlatformSubscriptionId'), parameters('identitySubscriptionId'))]",                
        "platformResourceIds": {
            "userAssignedIdentityResourceId": "[concat('/subscriptions/', variables('singleVsDedicatedMgmtSub'), '/resourceGroups/', variables('platformRgNames').userAssignedIdentity, '/providers/Microsoft.ManagedIdentity/userAssignedIdentities/', variables('platformResourceNames').userAssignedIdentityName)]",
            "logStorageResourceId": "[concat('/subscriptions/', variables('singleVsDedicatedMgmtSub'), '/resourceGroups/', variables('platformRgNames').logNwRg, '/providers/Microsoft.Storage/storageAccounts/', variables('platformResourceNames').logNwStorageAccount)]",
            "logAnalyticsResourceId": "[concat('/subscriptions/', variables('singleVsDedicatedMgmtSub'), '/resourceGroups/', variables('platformRgNames').mgmtRg, '/providers/Microsoft.OperationalInsights/workspaces/', variables('platformResourceNames').logAnalyticsWorkspace)]",
            "automationResourceId": "[concat('/subscriptions/', variables('singleVsDedicatedMgmtSub'), '/resourceGroups/', variables('platformRgNames').mgmtRg, '/providers/Microsoft.Automation/automationAccounts/', variables('platformResourceNames').automationAccount)]",
            "ddosProtectionResourceId": "[concat('/subscriptions/', variables('singleVsDedicatedConnectivitySub'), '/resourceGroups/', variables('platformRgNames').ddosRg, '/providers/Microsoft.Network/ddosProtectionPlans/', variables('platformResourceNames').ddosName)]",
            "vNetHubResourceId": "[concat('/subscriptions/', variables('singleVsDedicatedConnectivitySub'), '/resourceGroups/', variables('platformRgNames').connectivityRg, '/providers/Microsoft.Network/virtualNetworks/', variables('platformResourceNames').hubName)]",
            "vWanHubResourceId": "[concat('/subscriptions/', variables('singleVsDedicatedConnectivitySub'), '/resourceGroups/', variables('platformRgNames').connectivityRg, '/providers/Microsoft.Network/virtualHubs/', variables('platformResourceNames').hubName)]",
            "privateDnsRgResourceId": "[concat('/subscriptions/', variables('singleVsDedicatedConnectivitySub'), '/resourceGroups/', variables('platformRgNames').privateDnsRg)]",
            "azFirewallResourceId": "[concat('/subscriptions/', variables('singleVsDedicatedConnectivitySub'), '/resourceGroups/', variables('platformRgNames').connectivityRg, '/providers/Microsoft.Network/azureFirewalls/', variables('platformResourceNames').azFwName)]"
        },
        // Declaring deterministic resourceId's for FSILZ platform resources (as they will be consolidated into a single platform subscription)
        "deterministicRoleAssignmentGuids": {
            "ddosForConnectivity": "[take(guid(concat(parameters('industryPrefix'), 'ddos')), 10)]",
            "backupForIdentity": "[take(guid(concat(parameters('industryPrefix'), 'idbackup')), 10)]"
        },
        "privateDnsZones": [
            "privatelink.azure-automation.net",
            "privatelink.database.windows.net",
            "privatelink.sql.azuresynapse.net",
            "privatelink.blob.core.windows.net",
            "privatelink.table.core.windows.net",
            "privatelink.queue.core.windows.net",
            "privatelink.file.core.windows.net",
            "privatelink.web.core.windows.net",
            "privatelink.dfs.core.windows.net",
            "privatelink.documents.azure.com",
            "privatelink.mongo.cosmos.azure.com",
            "privatelink.cassandra.cosmos.azure.com",
            "privatelink.gremlin.cosmos.azure.com",
            "privatelink.postgres.database.azure.com",
            "privatelink.mysql.database.azure.com",
            "privatelink.mariadb.database.azure.com",
            "privatelink.vaultcore.azure.net",
            "privatelink.datafactory.azure.net",
            "[concat('privatelink.', parameters('location'), '.azmk8s.io')]",
            "privatelink.search.windows.net",
            "privatelink.azurecr.io",
            "privatelink.azconfig.io",
            "[concat('privatelink.', parameters('location'), '.backup.windowsazure.com')]",
            "privatelink.siterecovery.windowsazure.com",
            "privatelink.servicebus.windows.net",
            "privatelink.azure-devices.net",
            "privatelink.eventgrid.azure.net",
            "privatelink.azurewebsites.net",
            "privatelink.api.azureml.ms",
            "privatelink.notebooks.azure.net",
            "privatelink.service.signalr.net",
            "privatelink.cognitiveservices.azure.com",
            "privatelink.openai.azure.com",
            "[concat(parameters('location'), '.privatelink.afs.azure.net')]",
            "privatelink.adf.azure.com",
            "privatelink.redis.cache.windows.net",
            "privatelink.dev.azuresynapse.net",
            "privatelink.azuresynapse.net",
            "privatelink.table.cosmos.azure.com",
            "privatelink.batch.azure.com",
            "privatelink.managedhsm.azure.net",
            "[concat(parameters('location'), '.privatelink.azurecr.io')]",
            "privatelink.azure-devices-provisioning.net",
            "scm.privatelink.azurewebsites.net",
            "privatelink.redisenterprise.cache.azure.net",
            "privatelink.purview.azure.com",
            "privatelink.purviewstudio.azure.com",
            "privatelink.digitaltwins.azure.net",
            "privatelink.azurehdinsight.net",
            "privatelink.his.arc.azure.com",
            "privatelink.guestconfiguration.azure.com",
            "privatelink.kubernetesconfiguration.azure.com",
            "privatelink.media.azure.net",
            "[concat('privatelink.', parameters('location'), '.kusto.windows.net')]",
            "privatelink.azurestaticapps.net",
            "privatelink.prod.migration.windowsazure.com",
            "privatelink.azure-api.net",
            "privatelink.developer.azure-api.net",
            "privatelink.analysis.windows.net",
            "privatelink.pbidedicated.windows.net",
            "privatelink.tip1.powerquery.microsoft.com",
            "privatelink.directline.botframework.com",
            "privatelink.token.botframework.com",
            "privatelink.workspace.azurehealthcareapis.com",
            "privatelink.fhir.azurehealthcareapis.com",
            "privatelink.dicom.azurehealthcareapis.com",
            "privatelink.azuredatabricks.net",
            "privatelink.wvd.microsoft.com"
        ],
        "baseId": "[concat(variables('platformResourceIds').privateDnsRgResourceId, '/providers/Microsoft.Network/privateDnsZones/')]",
        "privateDnsPolicyParameterMapping": {
            "azureSynapsePrivateDnsZoneId": "[concat(variables('baseId'), 'privatelink.sql.azuresynapse.ne')]",
            "azureAutomationPrivateDnsZoneId": "[concat(variables('baseId'), 'privatelink.azure-automation.net')]",
            "azureCosmosTablePrivateDnsZoneId": "[concat(variables('baseId'), 'privatelink.table.cosmos.azure.com')]",
            "azureMlPrivateDnsZoneId": "[concat(variables('baseId'), 'privatelink.api.azureml.ms')]",
            "azureMlSecondaryPrivateDnsZoneId": "[concat(variables('baseId'), 'privatelink.notebooks.azure.net')]",
            "azureCosmosSqlPrivateDnsZoneId": "[concat(variables('baseId'), 'privatelink.documents.azure.com')]",
            "azureDataFactoryPrivateDnsZoneId": "[concat(variables('baseId'), 'privatelink.datafactory.azure.net')]",
            "azureEventGridPrivateDnsZoneId": "[concat(variables('baseId'), 'privatelink.eventgrid.azure.net')]",
            "azureBackupPrivateDnsZoneId": "[concat(variables('baseId'), 'privatelink.', parameters('location'), '.backup.windowsazure.com')]",
            "azureBackupBlobPrivateDnsZoneId": "[concat(variables('baseId'), 'privatelink.blob.core.windows.net')]",
            "azureBackupQueuePrivateDnsZoneId": "[concat(variables('baseId'), 'privatelink.queue.core.windows.net')]",
            "azureManagedDiskPrivateDnsZoneId": "[concat(variables('baseId'), 'privatelink.blob.core.windows.net')]",
            "azureFilePrivateDnsZoneId": "[concat(variables('baseId'), 'privatelink.afs.azure.net')]",
            "azureWebPrivateDnsZoneId": "[concat(variables('baseId'), 'privatelink.webpubsub.azure.com')]",
            "azureBatchPrivateDnsZoneId": "[concat(variables('baseId'), 'privatelink.', parameters('location'), '.batch.azure.com')]",
            "azureAppPrivateDnsZoneId": "[concat(variables('baseId'), 'privatelink.azconfig.io')]",
            "azureAsrPrivateDnsZoneId": "[concat(variables('baseId'), parameters('location'), '.privatelink.siterecovery.windowsazure.com')]",
            "azureIotPrivateDnsZoneId": "[concat(variables('baseId'), 'privatelink.azure-devices-provisioning.net')]",
            "azureKeyVaultPrivateDnsZoneId": "[concat(variables('baseId'), 'privatelink.vaultcore.azure.net')]",
            "azureSignalRPrivateDnsZoneId": "[concat(variables('baseId'), 'privatelink.service.signalr.net')]",
            "azureAppServicesPrivateDnsZoneId": "[concat(variables('baseId'), 'privatelink.azurewebsites.net')]",
            "azureDiskAccessPrivateDnsZoneId": "[concat(variables('baseId'), 'privatelink.blob.core.windows.net')]",
            "azureCognitiveServicesPrivateDnsZoneId": "[concat(variables('baseId'), 'privatelink.cognitiveservices.azure.com')]",
            "azureCognitiveServicesOpenAiPrivateDnsZoneId": "[concat(variables('baseId'), 'privatelink.openai.azure.com')]",
            "azureIotHubsPrivateDnsZoneId": "[concat(variables('baseId'), 'privatelink.azure-devices.net')]",
            "azureRedisCachePrivateDnsZoneId": "[concat(variables('baseId'), 'privatelink.redis.cache.windows.net')]",
            "azureAcrPrivateDnsZoneId": "[concat(variables('baseId'), 'privatelink.azurecr.io')]",
            "azureContainerRegistryPrivateDnsZoneId": "[concat(variables('baseId'), parameters('location'), '.privatelink.azurecr.io')]",
            "azureEventHubNamespacePrivateDnsZoneId": "[concat(variables('baseId'), 'privatelink.servicebus.windows.net')]",
            "azureMachineLearningWorkspacePrivateDnsZoneId": "[concat(variables('baseId'), 'privatelink.api.azureml.ms')]",
            "azureServiceBusNamespacePrivateDnsZoneId": "[concat(variables('baseId'), 'privatelink.servicebus.windows.net')]",
            "azureCognitiveSearchPrivateDnsZoneId": "[concat(variables('baseId'), 'privatelink.search.windows.net')]",
            "azureStorageBlobPrivateDnsZoneId": "[concat(variables('baseId'), 'privatelink.blob.core.windows.net')]",
            "azureSecondaryStorageBlobPrivateDnsZoneId": "[concat(variables('baseId'), 'privatelink.blob.core.windows.net')]",
            "azureStorageTablePrivateDnsZoneId":"[concat(variables('baseId'), 'privatelink.table.core.windows.net')]",
            "azureSecondaryStorageTablePrivateDnsZoneId":"[concat(variables('baseId'), 'privatelink.table.core.windows.net')]",
            "azureStorageQueuePrivateDnsZoneId":"[concat(variables('baseId'), 'privatelink.queue.core.windows.net')]",
            "azureSecondaryStorageQueuePrivateDnsZoneId":"[concat(variables('baseId'), 'privatelink.queue.core.windows.net')]",
            "azureStorageFilePrivateDnsZoneId":"[concat(variables('baseId'), 'privatelink.file.core.windows.net')]",
            "azureSecondaryStorageFilePrivateDnsZoneId":"[concat(variables('baseId'), 'privatelink.file.core.windows.net')]",
            "azureStorageWebPrivateDnsZoneId":"[concat(variables('baseId'), 'privatelink.web.core.windows.net')]",
            "azureSecondaryStorageWebPrivateDnsZoneId":"[concat(variables('baseId'), 'privatelink.web.core.windows.net')]",
            "azureStorageDfsPrivateDnsZoneId":"[concat(variables('baseId'), 'privatelink.dfs.core.windows.net')]",
            "azureSecondaryStorageDfsPrivateDnsZoneId":"[concat(variables('baseId'), 'privatelink.dfs.core.windows.net')]",
            "azureStorageFileSyncPrivateDnsZoneId": "[concat(variables('baseId'), parameters('location'), '.privatelink.afs.azure.net')]",
            "azureDesktopVirtualizationPrivateDnsZoneId": "[concat(variables('baseId'), 'privatelink.wvd.microsoft.com')]"
        },
        "roleDefinitions": {
            "networkContributor": "4d97b98b-1d4f-4787-a291-c67834d212e7",
            "contributor": "b24988ac-6180-42a0-ab88-20f7382dd24c"
        },
        "allowedResources": {
            "automation": [
                "microsoft.automation/automationaccounts",
                "microsoft.automation/deletedautomationaccounts",
                "microsoft.automation/automationaccounts/runbooks",
                "microsoft.automation/automationaccounts/configurations",
                "microsoft.automation/automationaccounts/webhooks",
                "microsoft.automation/operations",
                "microsoft.automation/automationaccounts/softwareupdateconfigurations",
                "microsoft.automation/automationaccounts/softwareupdateconfigurationruns",
                "microsoft.automation/automationaccounts/softwareupdateconfigurationmachineruns",
                "microsoft.automation/automationaccounts/jobs",
                "microsoft.automation/automationaccounts/varaibles",
                "microsoft.automation/automationaccounts/certificates",
                "microsoft.automation/automationaccounts/modules",
                "microsoft.automation/automationaccounts/schedules",
                "microsoft.automation/automationaccounts/nodes",
                "microsoft.automation/automationaccounts/privatelinkresources",
                "microsoft.automation/automationaccounts/privateendpointconnections",
                "microsoft.automation/automationaccounts/privateendpointconnectionproxies",
                "microsoft.automation/automationaccounts/hybridrunbookworkergroups",
                "microsoft.automation/automationaccounts/hybridrunbookworkergroups/hybridrunbookworkers",
                "microsoft.automation/automationaccounts/agentregistrationinformation"

            ],
            "apiManagement": [
                "microsoft.apimanagement/checkfeedbackrequired",
                "microsoft.apimanagement/checknameavailability",
                "microsoft.apimanagement/checkservicenameavailability",
                "microsoft.apimanagement/deletedservices",
                "microsoft.apimanagement/getdomainownershipidentifier",
                "microsoft.apimanagement/locations",
                "microsoft.apimanagement/locations/deletedservices",
                "microsoft.apimanagement/operations",
                "microsoft.apimanagement/reportfeedback",
                "microsoft.apimanagement/service",
                "microsoft.apimanagement/service/apis",
                "microsoft.apimanagement/service/apis/diagnostics",
                "microsoft.apimanagement/service/apis/issues",
                "microsoft.apimanagement/service/apis/issues/attachments",
                "microsoft.apimanagement/service/apis/issues/comments",
                "microsoft.apimanagement/service/apis/operations",
                "microsoft.apimanagement/service/apis/operations/policies",
                "microsoft.apimanagement/service/apis/operations/tags",
                "microsoft.apimanagement/service/apis/policies",
                "microsoft.apimanagement/service/apis/releases",
                "microsoft.apimanagement/service/apis/schemas",
                "microsoft.apimanagement/service/apis/tagdescriptions",
                "microsoft.apimanagement/service/apis/tags",
                "microsoft.apimanagement/service/apiversionsets",
                "microsoft.apimanagement/service/authorizationproviders",
                "microsoft.apimanagement/service/authorizationservers",
                "microsoft.apimanagement/service/backends",
                "microsoft.apimanagement/service/caches",
                "microsoft.apimanagement/service/certificates",
                "microsoft.apimanagement/service/contenttypes",
                "microsoft.apimanagement/service/diagnostics",
                "microsoft.apimanagement/service/eventgridfilters",
                "microsoft.apimanagement/service/gateways",
                "microsoft.apimanagement/service/gateways/certificateauthorities",
                "microsoft.apimanagement/service/gateways/hostnameconfigurations",
                "microsoft.apimanagement/service/groups",
                "microsoft.apimanagement/service/identityproviders",
                "microsoft.apimanagement/service/loggers",
                "microsoft.apimanagement/service/namedvalues",
                "microsoft.apimanagement/service/notifications",
                "microsoft.apimanagement/service/openidconnectproviders",
                "microsoft.apimanagement/service/policies",
                "microsoft.apimanagement/service/policyfragments",
                "microsoft.apimanagement/service/portalconfigs",
                "microsoft.apimanagement/service/portalrevisions",
                "microsoft.apimanagement/service/portalsettings",
                "microsoft.apimanagement/service/privateendpointconnections",
                "microsoft.apimanagement/service/products",
                "microsoft.apimanagement/service/products/policies",
                "microsoft.apimanagement/service/products/tags",
                "microsoft.apimanagement/service/properties",
                "microsoft.apimanagement/service/schemas",
                "microsoft.apimanagement/service/subscriptions",
                "microsoft.apimanagement/service/tags",
                "microsoft.apimanagement/service/templates",
                "microsoft.apimanagement/service/tenant",
                "microsoft.apimanagement/service/users",
                "microsoft.apimanagement/validateservicename"
            ],
            "appService": [
                "microsoft.web/apimanagementaccounts",
                "microsoft.web/apimanagementaccounts/apiacls",
                "microsoft.web/apimanagementaccounts/apis",
                "microsoft.web/apimanagementaccounts/apis/apiacls",
                "microsoft.web/apimanagementaccounts/apis/connectionacls",
                "microsoft.web/apimanagementaccounts/apis/connections",
                "microsoft.web/apimanagementaccounts/apis/connections/connectionacls",
                "microsoft.web/apimanagementaccounts/apis/localizeddefinitions",
                "microsoft.web/apimanagementaccounts/connectionacls",
                "microsoft.web/apimanagementaccounts/connections",
                "microsoft.web/availablestacks",
                "microsoft.web/billingmeters",
                "microsoft.web/certificates",
                "microsoft.web/checknameavailability",
                "microsoft.web/connectiongateways",
                "microsoft.web/connections",
                "microsoft.web/containerapps",
                "microsoft.web/customapis",
                "microsoft.web/customhostnamesites",
                "microsoft.web/deletedsites",
                "microsoft.web/deploymentlocations",
                "microsoft.web/functionappstacks",
                "microsoft.web/generategithubaccesstokenforappservicecli",
                "microsoft.web/georegions",
                "microsoft.web/hostingenvironments",
                "microsoft.web/hostingenvironments/configurations",
                "microsoft.web/hostingenvironments/eventgridfilters",
                "microsoft.web/hostingenvironments/metricdefinitions",
                "microsoft.web/hostingenvironments/metrics",
                "microsoft.web/hostingenvironments/multirolepools",
                "microsoft.web/hostingenvironments/multirolepools/instances",
                "microsoft.web/hostingenvironments/multirolepools/instances/metricdefinitions",
                "microsoft.web/hostingenvironments/multirolepools/instances/metrics",
                "microsoft.web/hostingenvironments/multirolepools/metricdefinitions",
                "microsoft.web/hostingenvironments/multirolepools/metrics",
                "microsoft.web/hostingenvironments/privateendpointconnections",
                "microsoft.web/hostingenvironments/workerpools",
                "microsoft.web/hostingenvironments/workerpools/instances",
                "microsoft.web/hostingenvironments/workerpools/instances/metricdefinitions",
                "microsoft.web/hostingenvironments/workerpools/instances/metrics",
                "microsoft.web/hostingenvironments/workerpools/metricdefinitions",
                "microsoft.web/hostingenvironments/workerpools/metrics",
                "microsoft.web/ishostingenvironmentnameavailable",
                "microsoft.web/ishostnameavailable",
                "microsoft.web/isusernameavailable",
                "microsoft.web/kubeenvironments",
                "microsoft.web/listsitesassignedtohostname",
                "microsoft.web/locations",
                "microsoft.web/locations/apioperations",
                "microsoft.web/locations/connectiongatewayinstallations",
                "microsoft.web/locations/deletedsites",
                "microsoft.web/locations/deletevirtualnetworkorsubnets",
                "microsoft.web/locations/extractapidefinitionfromwsdl",
                "microsoft.web/locations/functionappstacks",
                "microsoft.web/locations/getnetworkpolicies",
                "microsoft.web/locations/listwsdlinterfaces",
                "microsoft.web/locations/managedapis",
                "microsoft.web/locations/operationresults",
                "microsoft.web/locations/operations",
                "microsoft.web/locations/previewstaticsiteworkflowfile",
                "microsoft.web/locations/runtimes",
                "microsoft.web/locations/validatedeletevirtualnetworkorsubnets",
                "microsoft.web/locations/webappstacks",
                "microsoft.web/operations",
                "microsoft.web/publishingusers",
                "microsoft.web/recommendations",
                "microsoft.web/resourcehealthmetadata",
                "microsoft.web/runtimes",
                "microsoft.web/serverfarms",
                "microsoft.web/serverfarms/eventgridfilters",
                "microsoft.web/serverfarms/firstpartyapps",
                "microsoft.web/serverfarms/firstpartyapps/keyvaultsettings",
                "microsoft.web/serverfarms/metricdefinitions",
                "microsoft.web/serverfarms/metrics",
                "microsoft.web/serverfarms/virtualnetworkconnections/gateways",
                "microsoft.web/serverfarms/virtualnetworkconnections/routes",
                "microsoft.web/serverfarms/workers",
                "microsoft.web/sites",
                "microsoft.web/sites/basicpublishingcredentialspolicies",
                "microsoft.web/sites/basicpublishingcredentialspolicies/ftp",
                "microsoft.web/sites/basicpublishingcredentialspolicies/scm",
                "microsoft.web/sites/config",
                "microsoft.web/sites/domainownershipidentifiers",
                "microsoft.web/sites/eventgridfilters",
                "microsoft.web/sites/extensions",
                "microsoft.web/sites/functions",
                "microsoft.web/sites/functions/keys",
                "microsoft.web/sites/hostnamebindings",
                "microsoft.web/sites/hybridconnection",
                "microsoft.web/sites/hybridconnectionnamespaces/relays",
                "microsoft.web/sites/instances",
                "microsoft.web/sites/metricdefinitions",
                "microsoft.web/sites/metrics",
                "microsoft.web/sites/networkconfig",
                "microsoft.web/sites/premieraddons",
                "microsoft.web/sites/privateaccess",
                "microsoft.web/sites/privateendpointconnections",
                "microsoft.web/sites/publiccertificates",
                "microsoft.web/sites/recommendations",
                "microsoft.web/sites/resourcehealthmetadata",
                "microsoft.web/sites/siteextensions",
                "microsoft.web/sites/slots",
                "microsoft.web/sites/slots/basicpublishingcredentialspolicies",
                "microsoft.web/sites/slots/config",
                "microsoft.web/sites/slots/domainownershipidentifiers",
                "microsoft.web/sites/slots/eventgridfilters",
                "microsoft.web/sites/slots/extensions",
                "microsoft.web/sites/slots/hostnamebindings",
                "microsoft.web/sites/slots/hybridconnection",
                "microsoft.web/sites/slots/hybridconnectionnamespaces/relays",
                "microsoft.web/sites/slots/instances",
                "microsoft.web/sites/slots/metricdefinitions",
                "microsoft.web/sites/slots/metrics",
                "microsoft.web/sites/slots/networkconfig",
                "microsoft.web/sites/slots/premieraddons",
                "microsoft.web/sites/slots/publiccertificates",
                "microsoft.web/sites/slots/sourcecontrols",
                "microsoft.web/sites/slots/virtualnetworkconnections",
                "microsoft.web/sites/slots/virtualnetworkconnections/gateways",
                "microsoft.web/sites/sourcecontrols",
                "microsoft.web/sites/virtualnetworkconnections",
                "microsoft.web/sites/virtualnetworkconnections/gateways",
                "microsoft.web/sourcecontrols",
                "microsoft.web/staticsites",
                "microsoft.web/staticsites/builds",
                "microsoft.web/staticsites/builds/databaseconnections",
                "microsoft.web/staticsites/builds/linkedbackends",
                "microsoft.web/staticsites/builds/userprovidedfunctionapps",
                "microsoft.web/staticsites/databaseconnections",
                "microsoft.web/staticsites/linkedbackends",
                "microsoft.web/staticsites/privateendpointconnections",
                "microsoft.web/staticsites/userprovidedfunctionapps",
                "microsoft.web/validate",
                "microsoft.web/verifyhostingenvironmentvnet",
                "microsoft.web/webappstacks",
                "microsoft.web/workerapps"
            ],
            "backup": [
                "microsoft.recoveryservices/backupprotecteditems",
                "microsoft.recoveryservices/locations",
                "microsoft.recoveryservices/locations/allocatedstamp",
                "microsoft.recoveryservices/locations/allocatestamp",
                "microsoft.recoveryservices/locations/backupaadproperties",
                "microsoft.recoveryservices/locations/backupcrossregionrestore",
                "microsoft.recoveryservices/locations/backupcrrjob",
                "microsoft.recoveryservices/locations/backupcrrjobs",
                "microsoft.recoveryservices/locations/backupcrroperationresults",
                "microsoft.recoveryservices/locations/backupcrroperationsstatus",
                "microsoft.recoveryservices/locations/backupprevalidateprotection",
                "microsoft.recoveryservices/locations/backupstatus",
                "microsoft.recoveryservices/locations/backupvalidatefeatures",
                "microsoft.recoveryservices/locations/capabilities",
                "microsoft.recoveryservices/locations/checknameavailability",
                "microsoft.recoveryservices/operations",
                "microsoft.recoveryservices/replicationeligibilityresults",
                "microsoft.recoveryservices/vaults",
                "microsoft.recoveryservices/vaults/backupconfig",
                "microsoft.recoveryservices/vaults/backupencryptionconfigs",
                "microsoft.recoveryservices/vaults/backupfabrics/backupprotectionintent",
                "microsoft.recoveryservices/vaults/backupfabrics/protectioncontainers",
                "microsoft.recoveryservices/vaults/backupfabrics/protectioncontainers/protecteditems",
                "microsoft.recoveryservices/vaults/backuppolicies",
                "microsoft.recoveryservices/vaults/backupresourceguardproxies",
                "microsoft.recoveryservices/vaults/backupstorageconfig",
                "microsoft.recoveryservices/vaults/extendedinformation",
                "microsoft.recoveryservices/vaults/privateendpointconnections",
                "microsoft.recoveryservices/vaults/replicationalertsettings",
                "microsoft.recoveryservices/vaults/replicationfabrics",
                "microsoft.recoveryservices/vaults/replicationfabrics/replicationnetworks/replicationnetworkmappings",
                "microsoft.recoveryservices/vaults/replicationfabrics/replicationprotectioncontainers/replicationmigrationitems",
                "microsoft.recoveryservices/vaults/replicationfabrics/replicationprotectioncontainers/replicationprotecteditems",
                "microsoft.recoveryservices/vaults/replicationfabrics/replicationprotectioncontainers/replicationprotectioncontainermappings",
                "microsoft.recoveryservices/vaults/replicationfabrics/replicationrecoveryservicesproviders",
                "microsoft.recoveryservices/vaults/replicationfabrics/replicationstorageclassifications/replicationstorageclassificationmappings",
                "microsoft.recoveryservices/vaults/replicationfabrics/replicationvcenters",
                "microsoft.recoveryservices/vaults/replicationprotectionintents",
                "microsoft.recoveryservices/vaults/replicationrecoveryplans",
                "microsoft.recoveryservices/vaults/replicationvaultsettings"
            ],
            "containerApps": [
                "microsoft.app/connectedenvironments",
                "microsoft.app/connectedenvironments/certificates",
                "microsoft.app/containerapps",
                "microsoft.app/containerapps/authconfigs",
                "microsoft.app/jobs",
                "microsoft.app/locations",
                "microsoft.app/locations/availablemanagedenvironmentsworkloadprofiletypes",
                "microsoft.app/locations/billingmeters",
                "microsoft.app/locations/connectedenvironmentoperationresults",
                "microsoft.app/locations/connectedenvironmentoperationstatuses",
                "microsoft.app/locations/containerappoperationresults",
                "microsoft.app/locations/containerappoperationstatuses",
                "microsoft.app/locations/managedenvironmentoperationresults",
                "microsoft.app/locations/managedenvironmentoperationstatuses",
                "microsoft.app/managedenvironments",
                "microsoft.app/managedenvironments/certificates",
                "microsoft.app/managedenvironments/daprcomponents",
                "microsoft.app/managedenvironments/managedcertificates",
                "microsoft.app/managedenvironments/storages",
                "microsoft.app/operations"
            ],
            "containerinstance": [
                "microsoft.containerinstance/containergroupprofiles",
                "microsoft.containerinstance/containergroups",
                "microsoft.containerinstance/containerscalesets",
                "microsoft.containerinstance/locations",
                "microsoft.containerinstance/locations/cachedimages",
                "microsoft.containerinstance/locations/capabilities",
                "microsoft.containerinstance/locations/containerscalesetoperations",
                "microsoft.containerinstance/locations/deletevirtualnetworkorsubnets",
                "microsoft.containerinstance/locations/operationresults",
                "microsoft.containerinstance/locations/operations",
                "microsoft.containerinstance/locations/usages",
                "microsoft.containerinstance/locations/validatedeletevirtualnetworkorsubnets",
                "microsoft.containerinstance/operations",
                "microsoft.containerinstance/serviceassociationlinks"            
                ],
            "containerRegistry": [
                "microsoft.containerregistry/checknameavailability",
                "microsoft.containerregistry/locations",
                "microsoft.containerregistry/locations/authorize",
                "microsoft.containerregistry/locations/deletevirtualnetworkorsubnets",
                "microsoft.containerregistry/locations/operationresults",
                "microsoft.containerregistry/locations/setupauth",
                "microsoft.containerregistry/operations",
                "microsoft.containerregistry/registries",
                "microsoft.containerregistry/registries/agentpools",
                "microsoft.containerregistry/registries/agentpools/listqueuestatus",
                "microsoft.containerregistry/registries/agentpoolsoperationresults",
                "microsoft.containerregistry/registries/builds",
                "microsoft.containerregistry/registries/builds/cancel",
                "microsoft.containerregistry/registries/builds/getloglink",
                "microsoft.containerregistry/registries/buildtasks",
                "microsoft.containerregistry/registries/buildtasks/listsourcerepositoryproperties",
                "microsoft.containerregistry/registries/buildtasks/steps",
                "microsoft.containerregistry/registries/buildtasks/steps/listbuildarguments",
                "microsoft.containerregistry/registries/cacherules",
                "microsoft.containerregistry/registries/connectedregistries",
                "microsoft.containerregistry/registries/connectedregistries/deactivate",
                "microsoft.containerregistry/registries/credentialsets",
                "microsoft.containerregistry/registries/eventgridfilters",
                "microsoft.containerregistry/registries/exportpipelines",
                "microsoft.containerregistry/registries/generatecredentials",
                "microsoft.containerregistry/registries/getbuildsourceuploadurl",
                "microsoft.containerregistry/registries/getcredentials",
                "microsoft.containerregistry/registries/importimage",
                "microsoft.containerregistry/registries/importpipelines",
                "microsoft.containerregistry/registries/listbuildsourceuploadurl",
                "microsoft.containerregistry/registries/listcredentials",
                "microsoft.containerregistry/registries/listpolicies",
                "microsoft.containerregistry/registries/listusages",
                "microsoft.containerregistry/registries/pipelineruns",
                "microsoft.containerregistry/registries/privateendpointconnectionproxies",
                "microsoft.containerregistry/registries/privateendpointconnectionproxies/validate",
                "microsoft.containerregistry/registries/privateendpointconnections",
                "microsoft.containerregistry/registries/privatelinkresources",
                "microsoft.containerregistry/registries/queuebuild",
                "microsoft.containerregistry/registries/regeneratecredential",
                "microsoft.containerregistry/registries/regeneratecredentials",
                "microsoft.containerregistry/registries/replications",
                "microsoft.containerregistry/registries/runs",
                "microsoft.containerregistry/registries/runs/cancel",
                "microsoft.containerregistry/registries/runs/listlogsasurl",
                "microsoft.containerregistry/registries/schedulerun",
                "microsoft.containerregistry/registries/scopemaps",
                "microsoft.containerregistry/registries/taskruns",
                "microsoft.containerregistry/registries/taskruns/listdetails",
                "microsoft.containerregistry/registries/tasks",
                "microsoft.containerregistry/registries/tasks/listdetails",
                "microsoft.containerregistry/registries/tokens",
                "microsoft.containerregistry/registries/updatepolicies",
                "microsoft.containerregistry/registries/webhooks",
                "microsoft.containerregistry/registries/webhooks/getcallbackconfig",
                "microsoft.containerregistry/registries/webhooks/listevents",
                "microsoft.containerregistry/registries/webhooks/ping",
                "microsoft.containerregistry/swagger"
            ],
            "compute": [
                "microsoft.compute/disks",
                "microsoft.compute/diskaccesses/privateendpointconnections",
                "microsoft.compute/diskaccesses",
                "microsoft.Compute/diskEncryptionSets"
            ],
            "cosmosDb": [
                "microsoft.documentdb/cassandraclusters",
                "microsoft.documentdb/cassandraclusters/datacenters",
                "microsoft.documentdb/databaseaccountnames",
                "microsoft.documentdb/databaseaccounts",
                "microsoft.documentdb/databaseaccounts/apis/databases",
                "microsoft.documentdb/databaseaccounts/apis/databases/collections",
                "microsoft.documentdb/databaseaccounts/apis/databases/collections/settings",
                "microsoft.documentdb/databaseaccounts/apis/databases/containers",
                "microsoft.documentdb/databaseaccounts/apis/databases/containers/settings",
                "microsoft.documentdb/databaseaccounts/apis/databases/graphs",
                "microsoft.documentdb/databaseaccounts/apis/databases/graphs/settings",
                "microsoft.documentdb/databaseaccounts/apis/databases/settings",
                "microsoft.documentdb/databaseaccounts/apis/keyspaces",
                "microsoft.documentdb/databaseaccounts/apis/keyspaces/settings",
                "microsoft.documentdb/databaseaccounts/apis/keyspaces/tables",
                "microsoft.documentdb/databaseaccounts/apis/keyspaces/tables/settings",
                "microsoft.documentdb/databaseaccounts/apis/tables",
                "microsoft.documentdb/databaseaccounts/apis/tables/settings",
                "microsoft.documentdb/databaseaccounts/cassandrakeyspaces",
                "microsoft.documentdb/databaseaccounts/cassandrakeyspaces/tables",
                "microsoft.documentdb/databaseaccounts/cassandrakeyspaces/tables/throughputsettings",
                "microsoft.documentdb/databaseaccounts/cassandrakeyspaces/throughputsettings",
                "microsoft.documentdb/databaseaccounts/cassandrakeyspaces/views",
                "microsoft.documentdb/databaseaccounts/cassandrakeyspaces/views/throughputsettings",
                "microsoft.documentdb/databaseaccounts/encryptionscopes",
                "microsoft.documentdb/databaseaccounts/graphs",
                "microsoft.documentdb/databaseaccounts/gremlindatabases",
                "microsoft.documentdb/databaseaccounts/gremlindatabases/graphs",
                "microsoft.documentdb/databaseaccounts/gremlindatabases/graphs/throughputsettings",
                "microsoft.documentdb/databaseaccounts/gremlindatabases/throughputsettings",
                "microsoft.documentdb/databaseaccounts/mongodbdatabases",
                "microsoft.documentdb/databaseaccounts/mongodbdatabases/collections",
                "microsoft.documentdb/databaseaccounts/mongodbdatabases/collections/throughputsettings",
                "microsoft.documentdb/databaseaccounts/mongodbdatabases/throughputsettings",
                "microsoft.documentdb/databaseaccounts/notebookworkspaces",
                "microsoft.documentdb/databaseaccounts/privateendpointconnectionproxies",
                "microsoft.documentdb/databaseaccounts/privateendpointconnections",
                "microsoft.documentdb/databaseaccounts/services",
                "microsoft.documentdb/databaseaccounts/sqldatabases",
                "microsoft.documentdb/databaseaccounts/sqldatabases/clientencryptionkeys",
                "microsoft.documentdb/databaseaccounts/sqldatabases/containers",
                "microsoft.documentdb/databaseaccounts/sqldatabases/containers/storedprocedures",
                "microsoft.documentdb/databaseaccounts/sqldatabases/containers/throughputsettings",
                "microsoft.documentdb/databaseaccounts/sqldatabases/containers/triggers",
                "microsoft.documentdb/databaseaccounts/sqldatabases/containers/userdefinedfunctions",
                "microsoft.documentdb/databaseaccounts/sqldatabases/throughputsettings",
                "microsoft.documentdb/databaseaccounts/sqlroleassignments",
                "microsoft.documentdb/databaseaccounts/sqlroledefinitions",
                "microsoft.documentdb/databaseaccounts/tables",
                "microsoft.documentdb/databaseaccounts/tables/throughputsettings",
                "microsoft.documentdb/locations",
                "microsoft.documentdb/locations/checkmongoclusternameavailability",
                "microsoft.documentdb/locations/deletevirtualnetworkorsubnets",
                "microsoft.documentdb/locations/mongoclusterazureasyncoperation",
                "microsoft.documentdb/locations/mongoclusteroperationresults",
                "microsoft.documentdb/locations/operationresults",
                "microsoft.documentdb/locations/operationsstatus",
                "microsoft.documentdb/locations/restorabledatabaseaccounts",
                "microsoft.documentdb/mongoclusters",
                "microsoft.documentdb/operationresults",
                "microsoft.documentdb/operations",
                "microsoft.documentdb/operationsstatus",
                "microsoft.documentdb/restorabledatabaseaccounts"
            ],
            "dataExplorer": [
                "microsoft.kusto/clusters",
                "microsoft.kusto/clusters/attacheddatabaseconfigurations",
                "microsoft.kusto/clusters/databases",
                "microsoft.kusto/clusters/databases/dataconnections",
                "microsoft.kusto/clusters/databases/eventhubconnections",
                "microsoft.kusto/clusters/databases/principalassignments",
                "microsoft.kusto/clusters/databases/scripts",
                "microsoft.kusto/clusters/dataconnections",
                "microsoft.kusto/clusters/managedprivateendpoints",
                "microsoft.kusto/clusters/principalassignments",
                "microsoft.kusto/clusters/privateendpointconnections",
                "microsoft.kusto/clusters/sharedidentities",
                "microsoft.kusto/locations",
                "microsoft.kusto/locations/checknameavailability",
                "microsoft.kusto/locations/operationresults",
                "microsoft.kusto/locations/skus",
                "microsoft.kusto/operations"
            ],
            "dataFactory": [
                "microsoft.datafactory/checkazuredatafactorynameavailability",
                "microsoft.datafactory/checkdatafactorynameavailability",
                "microsoft.datafactory/datafactories",
                "microsoft.datafactory/datafactories/diagnosticsettings",
                "microsoft.datafactory/datafactories/metricdefinitions",
                "microsoft.datafactory/datafactoryschema",
                "microsoft.datafactory/factories",
                "microsoft.datafactory/factories/dataflows",
                "microsoft.datafactory/factories/datasets",
                "microsoft.datafactory/factories/integrationruntimes",
                "microsoft.datafactory/factories/linkedservices",
                "microsoft.datafactory/factories/managedvirtualnetworks",
                "microsoft.datafactory/factories/managedvirtualnetworks/managedprivateendpoints",
                "microsoft.datafactory/factories/pipelines",
                "microsoft.datafactory/factories/privateendpointconnections",
                "microsoft.datafactory/factories/triggers",
                "microsoft.datafactory/locations",
                "microsoft.datafactory/locations/configurefactoryrepo",
                "microsoft.datafactory/locations/getfeaturevalue",
                "microsoft.datafactory/operations"

            ],
            "eventGrid": [
                "microsoft.eventgrid/domains",
                "microsoft.eventgrid/domains/privateendpointconnections",
                "microsoft.eventgrid/domains/topics",
                "microsoft.eventgrid/eventsubscriptions",
                "microsoft.eventgrid/extensiontopics",
                "microsoft.eventgrid/locations",
                "microsoft.eventgrid/locations/eventsubscriptions",
                "microsoft.eventgrid/locations/operationresults",
                "microsoft.eventgrid/locations/operationsstatus",
                "microsoft.eventgrid/locations/topictypes",
                "microsoft.eventgrid/namespaces",
                "microsoft.eventgrid/operationresults",
                "microsoft.eventgrid/operations",
                "microsoft.eventgrid/operationsstatus",
                "microsoft.eventgrid/partnerconfigurations",
                "microsoft.eventgrid/partnerdestinations",
                "microsoft.eventgrid/partnernamespaces",
                "microsoft.eventgrid/partnernamespaces/channels",
                "microsoft.eventgrid/partnernamespaces/eventchannels",
                "microsoft.eventgrid/partnerregistrations",
                "microsoft.eventgrid/partnertopics",
                "microsoft.eventgrid/partnertopics/eventsubscriptions",
                "microsoft.eventgrid/systemtopics",
                "microsoft.eventgrid/systemtopics/eventsubscriptions",
                "microsoft.eventgrid/topics",
                "microsoft.eventgrid/topics/privateendpointconnections",
                "microsoft.eventgrid/topictypes",
                "microsoft.eventgrid/verifiedpartners"
            ],
            "eventHub": [
                "microsoft.eventhub/availableclusterregions",
                "microsoft.eventhub/checknameavailability",
                "microsoft.eventhub/checknamespaceavailability",
                "microsoft.eventhub/clusters",
                "microsoft.eventhub/locations",
                "microsoft.eventhub/locations/clusteroperationresults",
                "microsoft.eventhub/locations/deletevirtualnetworkorsubnets",
                "microsoft.eventhub/locations/operationstatus",
                "microsoft.eventhub/namespaces",
                "microsoft.eventhub/namespaces/applicationgroups",
                "microsoft.eventhub/namespaces/authorizationrules",
                "microsoft.eventhub/namespaces/disasterrecoveryconfigs",
                "microsoft.eventhub/namespaces/disasterrecoveryconfigs/checknameavailability",
                "microsoft.eventhub/namespaces/eventhubs",
                "microsoft.eventhub/namespaces/eventhubs/authorizationrules",
                "microsoft.eventhub/namespaces/eventhubs/consumergroups",
                "microsoft.eventhub/namespaces/ipfilterrules",
                "microsoft.eventhub/namespaces/networkrulesets",
                "microsoft.eventhub/namespaces/privateendpointconnections",
                "microsoft.eventhub/namespaces/schemagroups",
                "microsoft.eventhub/namespaces/virtualnetworkrules",
                "microsoft.eventhub/operations",
                "microsoft.eventhub/sku"
            ],
            "keyVault": [
                "microsoft.keyvault/checkmhsmnameavailability",
                "microsoft.keyvault/checknameavailability",
                "microsoft.keyvault/deletedmanagedhsms",
                "microsoft.keyvault/deletedvaults",
                "microsoft.keyvault/hsmpools",
                "microsoft.keyvault/locations",
                "microsoft.keyvault/locations/deletedmanagedhsms",
                "microsoft.keyvault/locations/deletedvaults",
                "microsoft.keyvault/locations/deletevirtualnetworkorsubnets",
                "microsoft.keyvault/locations/managedhsmoperationresults",
                "microsoft.keyvault/locations/notifynetworksecurityperimeterupdatesavailable",
                "microsoft.keyvault/locations/operationresults",
                "microsoft.keyvault/managedhsms",
                "microsoft.keyvault/managedhsms/keys",
                "microsoft.keyvault/managedhsms/keys/versions",
                "microsoft.keyvault/managedhsms/privateendpointconnections",
                "microsoft.keyvault/operations",
                "microsoft.keyvault/vaults",
                "microsoft.keyvault/vaults/accesspolicies",
                "microsoft.keyvault/vaults/eventgridfilters",
                "microsoft.keyvault/vaults/keys",
                "microsoft.keyvault/vaults/keys/versions",
                "microsoft.keyvault/vaults/privateendpointconnectionproxies",
                "microsoft.keyvault/vaults/privateendpointconnections",
                "microsoft.keyvault/vaults/secrets"
            ],
            "kubernetes": [
                "Microsoft.ContainerService/managedClusters/eventGridFilters",
                "Microsoft.ContainerService/containerServices",
                "Microsoft.ContainerService/fleetMemberships",
                "Microsoft.ContainerService/fleets",
                "Microsoft.ContainerService/fleets/members",
                "Microsoft.ContainerService/locations",
                "Microsoft.ContainerService/locations/notifyNetworkSecurityPerimeterUpdatesAvailable",
                "Microsoft.ContainerService/locations/operationResults",
                "Microsoft.ContainerService/locations/operations",
                "Microsoft.ContainerService/locations/orchestrators",
                "Microsoft.ContainerService/locations/osOptions",
                "Microsoft.ContainerService/managedClusters",
                "Microsoft.ContainerService/managedclustersnapshots",
                "Microsoft.ContainerService/operations",
                "Microsoft.ContainerService/snapshots",
                "microsoft.kubernetes/connectedclusters",
                "microsoft.kubernetes/locations",
                "microsoft.kubernetes/locations/operationstatuses",
                "microsoft.kubernetes/operations",
                "microsoft.kubernetes/registeredsubscriptions",
                "microsoft.kubernetesconfiguration/extensions",
                "microsoft.kubernetesconfiguration/extensiontypes",
                "microsoft.kubernetesconfiguration/fluxconfigurations",
                "microsoft.kubernetesconfiguration/locations",
                "microsoft.kubernetesconfiguration/locations/extensiontypes",
                "microsoft.kubernetesconfiguration/locations/extensiontypes/versions",
                "microsoft.kubernetesconfiguration/namespaces",
                "microsoft.kubernetesconfiguration/operations",
                "microsoft.kubernetesconfiguration/privatelinkscopes",
                "microsoft.kubernetesconfiguration/privatelinkscopes/privateendpointconnectionproxies",
                "microsoft.kubernetesconfiguration/privatelinkscopes/privateendpointconnections",
                "microsoft.kubernetesconfiguration/sourcecontrolconfigurations"
            ],
            "machineLearning": [
                "Microsoft.MachineLearning/Workspaces",
                "Microsoft.MachineLearning/webServices",
                "Microsoft.MachineLearning/operations",
                "Microsoft.MachineLearning/locations",
                "Microsoft.MachineLearning/locations/operations",
                "Microsoft.MachineLearning/locations/operationResults",
                "Microsoft.MachineLearning/committmentPlans"
            ],
            "network": [
                "Microsoft.Network/virtualNetworks",
                "Microsoft.Network/virtualNetworks/taggedTrafficConsumers",
                "Microsoft.Network/natGateways",
                "Microsoft.Network/internalPublicIpAddresses",
                "Microsoft.Network/customIpPrefixes",
                "Microsoft.Network/networkInterfaces",
                "Microsoft.Network/dscpConfigurations",
                "Microsoft.Network/privateEndpoints",
                "Microsoft.Network/privateEndpoints/privateLinkServiceProxies",
                "Microsoft.Network/privateEndpointRedirectMaps",
                "Microsoft.Network/loadBalancers",
                "Microsoft.Network/networkSecurityGroups",
                "Microsoft.Network/applicationSecurityGroups",
                "Microsoft.Network/serviceEndpointPolicies",
                "Microsoft.Network/networkIntentPolicies",
                "Microsoft.Network/routeTables",
                "Microsoft.Network/publicIPPrefixes",
                "Microsoft.Network/networkWatchers",
                "Microsoft.Network/networkWatchers/connectionMonitors",
                "Microsoft.Network/networkWatchers/flowLogs",
                "Microsoft.Network/networkWatchers/pingMeshes",
                "Microsoft.Network/virtualNetworkGateways",
                "Microsoft.Network/localNetworkGateways",
                "Microsoft.Network/connections",
                "Microsoft.Network/applicationGateways",
                "Microsoft.Network/applicationGatewayWebApplicationFirewallPolicies",
                "Microsoft.Network/locations",
                "Microsoft.Network/locations/operations",
                "Microsoft.Network/locations/operationResults",
                "Microsoft.Network/locations/CheckDnsNameAvailability",
                "Microsoft.Network/locations/setLoadBalancerFrontendPublicIpAddresses",
                "Microsoft.Network/cloudServiceSlots",
                "Microsoft.Network/locations/usages",
                "Microsoft.Network/locations/virtualNetworkAvailableEndpointServices",
                "Microsoft.Network/locations/availableDelegations",
                "Microsoft.Network/locations/ApplicationGatewayWafDynamicManifests",
                "Microsoft.Network/locations/serviceTags",
                "Microsoft.Network/locations/availablePrivateEndpointTypes",
                "Microsoft.Network/locations/availableServiceAliases",
                "Microsoft.Network/locations/checkPrivateLinkServiceVisibility",
                "Microsoft.Network/locations/autoApprovedPrivateLinkServices",
                "Microsoft.Network/locations/batchValidatePrivateEndpointsForResourceMove",
                "Microsoft.Network/locations/batchNotifyPrivateEndpointsForResourceMove",
                "Microsoft.Network/locations/supportedVirtualMachineSizes",
                "Microsoft.Network/locations/setAzureNetworkManagerConfiguration",
                "Microsoft.Network/locations/publishResources",
                "Microsoft.Network/locations/getAzureNetworkManagerConfiguration",
                "Microsoft.Network/locations/checkAcceleratedNetworkingSupport",
                "Microsoft.Network/locations/validateResourceOwnership",
                "Microsoft.Network/locations/setResourceOwnership",
                "Microsoft.Network/locations/effectiveResourceOwnership",
                "Microsoft.Network/operations",
                "Microsoft.Network/dnszones",
                "Microsoft.Network/dnsOperationResults",
                "Microsoft.Network/dnsOperationStatuses",
                "Microsoft.Network/getDnsResourceReference",
                "Microsoft.Network/internalNotify",
                "Microsoft.Network/dnszones/A",
                "Microsoft.Network/dnszones/AAAA",
                "Microsoft.Network/dnszones/CNAME",
                "Microsoft.Network/dnszones/PTR",
                "Microsoft.Network/dnszones/MX",
                "Microsoft.Network/dnszones/TXT",
                "Microsoft.Network/dnszones/SRV",
                "Microsoft.Network/dnszones/SOA",
                "Microsoft.Network/dnszones/NS",
                "Microsoft.Network/dnszones/CAA",
                "Microsoft.Network/dnszones/recordsets",
                "Microsoft.Network/dnszones/all",
                "Microsoft.Network/privateDnsZones",
                "Microsoft.Network/privateDnsZones/virtualNetworkLinks",
                "Microsoft.Network/privateDnsOperationResults",
                "Microsoft.Network/privateDnsOperationStatuses",
                "Microsoft.Network/privateDnsZonesInternal",
                "Microsoft.Network/privateDnsZones/A",
                "Microsoft.Network/privateDnsZones/AAAA",
                "Microsoft.Network/privateDnsZones/CNAME",
                "Microsoft.Network/privateDnsZones/PTR",
                "Microsoft.Network/privateDnsZones/MX",
                "Microsoft.Network/privateDnsZones/TXT",
                "Microsoft.Network/privateDnsZones/SRV",
                "Microsoft.Network/privateDnsZones/SOA",
                "Microsoft.Network/privateDnsZones/all",
                "Microsoft.Network/virtualNetworks/privateDnsZoneLinks",
                "Microsoft.Network/dnsResolvers",
                "Microsoft.Network/virtualNetworks/virtualNetworkPeerings",
                "Microsoft.Network/dnsResolvers/inboundEndpoints",
                "Microsoft.Network/dnsResolvers/outboundEndpoints",
                "Microsoft.Network/dnsForwardingRulesets",
                "Microsoft.Network/dnsForwardingRulesets/forwardingRules",
                "Microsoft.Network/dnsForwardingRulesets/virtualNetworkLinks",
                "Microsoft.Network/virtualNetworks/listDnsResolvers",
                "Microsoft.Network/virtualNetworks/listDnsForwardingRulesets",
                "Microsoft.Network/locations/dnsResolverOperationResults",
                "Microsoft.Network/locations/dnsResolverOperationStatuses",
                "Microsoft.Network/trafficmanagerprofiles",
                "Microsoft.Network/trafficmanagerprofiles/heatMaps",
                "Microsoft.Network/trafficmanagerprofiles/azureendpoints",
                "Microsoft.Network/trafficmanagerprofiles/externalendpoints",
                "Microsoft.Network/trafficmanagerprofiles/nestedendpoints",
                "Microsoft.Network/checkTrafficManagerNameAvailability",
                "Microsoft.Network/trafficManagerUserMetricsKeys",
                "Microsoft.Network/trafficManagerGeographicHierarchies",
                "Microsoft.Network/expressRouteCircuits",
                "Microsoft.Network/expressRouteServiceProviders",
                "Microsoft.Network/applicationGatewayAvailableWafRuleSets",
                "Microsoft.Network/applicationGatewayAvailableSslOptions",
                "Microsoft.Network/applicationGatewayAvailableServerVariables",
                "Microsoft.Network/applicationGatewayAvailableRequestHeaders",
                "Microsoft.Network/applicationGatewayAvailableResponseHeaders",
                "Microsoft.Network/routeFilters",
                "Microsoft.Network/bgpServiceCommunities",
                "Microsoft.Network/virtualWans",
                "Microsoft.Network/vpnSites",
                "Microsoft.Network/vpnServerConfigurations",
                "Microsoft.Network/virtualHubs",
                "Microsoft.Network/vpnGateways",
                "Microsoft.Network/p2sVpnGateways",
                "Microsoft.Network/expressRouteGateways",
                "Microsoft.Network/locations/hybridEdgeZone",
                "Microsoft.Network/expressRoutePortsLocations",
                "Microsoft.Network/expressRoutePorts",
                "Microsoft.Network/firewallPolicies",
                "Microsoft.Network/ipGroups",
                "Microsoft.Network/azureWebCategories",
                "Microsoft.Network/locations/nfvOperations",
                "Microsoft.Network/locations/nfvOperationResults",
                "Microsoft.Network/securityPartnerProviders",
                "Microsoft.Network/azureFirewalls",
                "Microsoft.Network/azureFirewallFqdnTags",
                "Microsoft.Network/virtualNetworkTaps",
                "Microsoft.Network/privateLinkServices",
                "Microsoft.Network/locations/privateLinkServices",
                "Microsoft.Network/ddosProtectionPlans",
                "Microsoft.Network/networkProfiles",
                "Microsoft.Network/frontdoorOperationResults",
                "Microsoft.Network/checkFrontdoorNameAvailability",
                "Microsoft.Network/frontdoors",
                "Microsoft.Network/frontdoors/frontendEndpoints",
                "Microsoft.Network/frontdoors/frontendEndpoints/customHttpsConfiguration",
                "Microsoft.Network/frontdoorWebApplicationFirewallPolicies",
                "Microsoft.Network/frontdoorWebApplicationFirewallManagedRuleSets",
                "Microsoft.Network/networkExperimentProfiles",
                "Microsoft.Network/locations/bareMetalTenants",
                "Microsoft.Network/bastionHosts",
                "Microsoft.Network/virtualRouters",
                "Microsoft.Network/networkVirtualAppliances",
                "Microsoft.Network/ipAllocations",
                "Microsoft.Network/networkManagers",
                "Microsoft.Network/networkManagerConnections",
                "Microsoft.Network/locations/queryNetworkSecurityPerimeter",
                "Microsoft.Network/virtualNetworks/listNetworkManagerEffectiveConnectivityConfigurations",
                "Microsoft.Network/virtualNetworks/listNetworkManagerEffectiveSecurityAdminRules",
                "Microsoft.Network/locations/commitInternalAzureNetworkManagerConfiguration",
                "Microsoft.Network/locations/internalAzureVirtualNetworkManagerOperation",
                "Microsoft.Network/networkVirtualApplianceSkus",
                "Microsoft.Network/locations/serviceTagDetails",
                "Microsoft.Network/locations/dataTasks"

            ],
            "openAi": [
                "microsoft.cognitiveservices/accounts",
                "microsoft.cognitiveservices/accounts/commitmentplans",
                "microsoft.cognitiveservices/accounts/deployments",
                "microsoft.cognitiveservices/accounts/networksecurityperimeterassociationproxies",
                "microsoft.cognitiveservices/accounts/privateendpointconnectionproxies",
                "microsoft.cognitiveservices/accounts/privateendpointconnections",
                "microsoft.cognitiveservices/accounts/privatelinkresources",
                "microsoft.cognitiveservices/checkdomainavailability",
                "microsoft.cognitiveservices/commitmentplans",
                "microsoft.cognitiveservices/deletedaccounts",
                "microsoft.cognitiveservices/locations",
                "microsoft.cognitiveservices/locations/checkskuavailability",
                "microsoft.cognitiveservices/locations/commitmenttiers",
                "microsoft.cognitiveservices/locations/deletevirtualnetworkorsubnets",
                "microsoft.cognitiveservices/locations/networksecurityperimeterproxies",
                "microsoft.cognitiveservices/locations/networksecurityperimeterproxies/profileproxies",
                "microsoft.cognitiveservices/locations/networksecurityperimeterproxies/profileproxies/accessruleproxies",
                "microsoft.cognitiveservices/locations/notifynetworksecurityperimeterupdatesavailable",
                "microsoft.cognitiveservices/locations/operationresults",
                "microsoft.cognitiveservices/locations/resourcegroups",
                "microsoft.cognitiveservices/locations/resourcegroups/deletedaccounts",
                "microsoft.cognitiveservices/operations"
            ],
            "postgreSql": [
                "microsoft.dbforpostgresql/availableengineversions",
                "microsoft.dbforpostgresql/checknameavailability",
                "microsoft.dbforpostgresql/flexibleservers",
                "microsoft.dbforpostgresql/flexibleservers/administrators",
                "microsoft.dbforpostgresql/flexibleservers/configurations",
                "microsoft.dbforpostgresql/flexibleservers/databases",
                "microsoft.dbforpostgresql/flexibleservers/firewallrules",
                "microsoft.dbforpostgresql/flexibleservers/migrations",
                "microsoft.dbforpostgresql/getprivatednszonesuffix",
                "microsoft.dbforpostgresql/locations",
                "microsoft.dbforpostgresql/locations/administratorazureasyncoperation",
                "microsoft.dbforpostgresql/locations/administratoroperationresults",
                "microsoft.dbforpostgresql/locations/azureasyncoperation",
                "microsoft.dbforpostgresql/locations/capabilities",
                "microsoft.dbforpostgresql/locations/checknameavailability",
                "microsoft.dbforpostgresql/locations/checkvirtualnetworksubnetusage",
                "microsoft.dbforpostgresql/locations/getcachedservername",
                "microsoft.dbforpostgresql/locations/operationresults",
                "microsoft.dbforpostgresql/locations/performancetiers",
                "microsoft.dbforpostgresql/locations/privateendpointconnectionazureasyncoperation",
                "microsoft.dbforpostgresql/locations/privateendpointconnectionoperationresults",
                "microsoft.dbforpostgresql/locations/privateendpointconnectionproxyazureasyncoperation",
                "microsoft.dbforpostgresql/locations/privateendpointconnectionproxyoperationresults",
                "microsoft.dbforpostgresql/locations/recommendedactionsessionsazureasyncoperation",
                "microsoft.dbforpostgresql/locations/recommendedactionsessionsoperationresults",
                "microsoft.dbforpostgresql/locations/securityalertpoliciesazureasyncoperation",
                "microsoft.dbforpostgresql/locations/securityalertpoliciesoperationresults",
                "microsoft.dbforpostgresql/locations/serverkeyazureasyncoperation",
                "microsoft.dbforpostgresql/locations/serverkeyoperationresults",
                "microsoft.dbforpostgresql/operations",
                "microsoft.dbforpostgresql/servergroupsv2",
                "microsoft.dbforpostgresql/servers",
                "microsoft.dbforpostgresql/servers/administrators",
                "microsoft.dbforpostgresql/servers/advisors",
                "microsoft.dbforpostgresql/servers/configurations",
                "microsoft.dbforpostgresql/servers/databases",
                "microsoft.dbforpostgresql/servers/firewallrules",
                "microsoft.dbforpostgresql/servers/keys",
                "microsoft.dbforpostgresql/servers/privateendpointconnectionproxies",
                "microsoft.dbforpostgresql/servers/privateendpointconnections",
                "microsoft.dbforpostgresql/servers/privatelinkresources",
                "microsoft.dbforpostgresql/servers/querytexts",
                "microsoft.dbforpostgresql/servers/recoverableservers",
                "microsoft.dbforpostgresql/servers/resetqueryperformanceinsightdata",
                "microsoft.dbforpostgresql/servers/securityalertpolicies",
                "microsoft.dbforpostgresql/servers/topquerystatistics",
                "microsoft.dbforpostgresql/servers/virtualnetworkrules",
                "microsoft.dbforpostgresql/servers/waitstatistics"
            ],
            "serviceBus": [
                "microsoft.servicebus/checknameavailability",
                "microsoft.servicebus/checknamespaceavailability",
                "microsoft.servicebus/locations",
                "microsoft.servicebus/locations/deletevirtualnetworkorsubnets",
                "microsoft.servicebus/locations/operationstatus",
                "microsoft.servicebus/namespaces",
                "microsoft.servicebus/namespaces/authorizationrules",
                "microsoft.servicebus/namespaces/disasterrecoveryconfigs",
                "microsoft.servicebus/namespaces/disasterrecoveryconfigs/checknameavailability",
                "microsoft.servicebus/namespaces/eventgridfilters",
                "microsoft.servicebus/namespaces/ipfilterrules",
                "microsoft.servicebus/namespaces/messagingplan",
                "microsoft.servicebus/namespaces/migrationconfigurations",
                "microsoft.servicebus/namespaces/networkrulesets",
                "microsoft.servicebus/namespaces/privateendpointconnections",
                "microsoft.servicebus/namespaces/queues",
                "microsoft.servicebus/namespaces/queues/authorizationrules",
                "microsoft.servicebus/namespaces/topics",
                "microsoft.servicebus/namespaces/topics/authorizationrules",
                "microsoft.servicebus/namespaces/topics/subscriptions",
                "microsoft.servicebus/namespaces/topics/subscriptions/rules",
                "microsoft.servicebus/namespaces/virtualnetworkrules",
                "microsoft.servicebus/operations",
                "microsoft.servicebus/premiummessagingregions",
                "microsoft.servicebus/sku"
            ],
            "sql": [
                "microsoft.sql/checknameavailability",
                "microsoft.sql/instancepools",
                "microsoft.sql/locations",
                "microsoft.sql/locations/administratorazureasyncoperation",
                "microsoft.sql/locations/administratoroperationresults",
                "microsoft.sql/locations/advancedthreatprotectionazureasyncoperation",
                "microsoft.sql/locations/advancedthreatprotectionoperationresults",
                "microsoft.sql/locations/auditingsettingsazureasyncoperation",
                "microsoft.sql/locations/auditingsettingsoperationresults",
                "microsoft.sql/locations/capabilities",
                "microsoft.sql/locations/connectionpoliciesazureasyncoperation",
                "microsoft.sql/locations/connectionpoliciesoperationresults",
                "microsoft.sql/locations/databaseazureasyncoperation",
                "microsoft.sql/locations/databaseencryptionprotectorrevalidateazureasyncoperation",
                "microsoft.sql/locations/databaseencryptionprotectorrevalidateoperationresults",
                "microsoft.sql/locations/databaseencryptionprotectorrevertazureasyncoperation",
                "microsoft.sql/locations/databaseencryptionprotectorrevertoperationresults",
                "microsoft.sql/locations/databaseoperationresults",
                "microsoft.sql/locations/databaserestoreazureasyncoperation",
                "microsoft.sql/locations/deletevirtualnetworkorsubnets",
                "microsoft.sql/locations/deletevirtualnetworkorsubnetsazureasyncoperation",
                "microsoft.sql/locations/deletevirtualnetworkorsubnetsoperationresults",
                "microsoft.sql/locations/devopsauditingsettingsazureasyncoperation",
                "microsoft.sql/locations/devopsauditingsettingsoperationresults",
                "microsoft.sql/locations/distributedavailabilitygroupsazureasyncoperation",
                "microsoft.sql/locations/distributedavailabilitygroupsoperationresults",
                "microsoft.sql/locations/dnsaliasasyncoperation",
                "microsoft.sql/locations/dnsaliasoperationresults",
                "microsoft.sql/locations/elasticpoolazureasyncoperation",
                "microsoft.sql/locations/elasticpooloperationresults",
                "microsoft.sql/locations/encryptionprotectorazureasyncoperation",
                "microsoft.sql/locations/encryptionprotectoroperationresults",
                "microsoft.sql/locations/extendedauditingsettingsazureasyncoperation",
                "microsoft.sql/locations/extendedauditingsettingsoperationresults",
                "microsoft.sql/locations/externalpolicybasedauthorizationsazureasycoperation",
                "microsoft.sql/locations/externalpolicybasedauthorizationsoperationresults",
                "microsoft.sql/locations/failovergroupazureasyncoperation",
                "microsoft.sql/locations/failovergroupoperationresults",
                "microsoft.sql/locations/firewallrulesazureasyncoperation",
                "microsoft.sql/locations/firewallrulesoperationresults",
                "microsoft.sql/locations/importexportazureasyncoperation",
                "microsoft.sql/locations/importexportoperationresults",
                "microsoft.sql/locations/instancefailovergroupazureasyncoperation",
                "microsoft.sql/locations/instancefailovergroupoperationresults",
                "microsoft.sql/locations/instancefailovergroups",
                "microsoft.sql/locations/instancepoolazureasyncoperation",
                "microsoft.sql/locations/instancepooloperationresults",
                "microsoft.sql/locations/jobagentazureasyncoperation",
                "microsoft.sql/locations/jobagentoperationresults",
                "microsoft.sql/locations/ledgerdigestuploadsazureasyncoperation",
                "microsoft.sql/locations/ledgerdigestuploadsoperationresults",
                "microsoft.sql/locations/longtermretentionbackupazureasyncoperation",
                "microsoft.sql/locations/longtermretentionbackupoperationresults",
                "microsoft.sql/locations/longtermretentionbackups",
                "microsoft.sql/locations/longtermretentionmanagedinstancebackupazureasyncoperation",
                "microsoft.sql/locations/longtermretentionmanagedinstancebackupoperationresults",
                "microsoft.sql/locations/longtermretentionmanagedinstancebackups",
                "microsoft.sql/locations/longtermretentionmanagedinstances",
                "microsoft.sql/locations/longtermretentionpolicyazureasyncoperation",
                "microsoft.sql/locations/longtermretentionpolicyoperationresults",
                "microsoft.sql/locations/longtermretentionservers",
                "microsoft.sql/locations/manageddatabaseazureasyncoperation",
                "microsoft.sql/locations/manageddatabasecompleterestoreazureasyncoperation",
                "microsoft.sql/locations/manageddatabasecompleterestoreoperationresults",
                "microsoft.sql/locations/manageddatabasemoveazureasyncoperation",
                "microsoft.sql/locations/manageddatabasemoveoperationresults",
                "microsoft.sql/locations/manageddatabaseoperationresults",
                "microsoft.sql/locations/manageddatabaserestoreazureasyncoperation",
                "microsoft.sql/locations/manageddatabaserestoreoperationresults",
                "microsoft.sql/locations/manageddnsaliasasyncoperation",
                "microsoft.sql/locations/manageddnsaliasoperationresults",
                "microsoft.sql/locations/managedinstanceadvancedthreatprotectionazureasyncoperation",
                "microsoft.sql/locations/managedinstanceadvancedthreatprotectionoperationresults",
                "microsoft.sql/locations/managedinstanceazureasyncoperation",
                "microsoft.sql/locations/managedinstancedtcazureasyncoperation",
                "microsoft.sql/locations/managedinstanceencryptionprotectorazureasyncoperation",
                "microsoft.sql/locations/managedinstanceencryptionprotectoroperationresults",
                "microsoft.sql/locations/managedinstancekeyazureasyncoperation",
                "microsoft.sql/locations/managedinstancekeyoperationresults",
                "microsoft.sql/locations/managedinstancelongtermretentionpolicyazureasyncoperation",
                "microsoft.sql/locations/managedinstancelongtermretentionpolicyoperationresults",
                "microsoft.sql/locations/managedinstanceoperationresults",
                "microsoft.sql/locations/managedinstanceprivateendpointconnectionazureasyncoperation",
                "microsoft.sql/locations/managedinstanceprivateendpointconnectionoperationresults",
                "microsoft.sql/locations/managedinstanceprivateendpointconnectionproxyazureasyncoperation",
                "microsoft.sql/locations/managedinstanceprivateendpointconnectionproxyoperationresults",
                "microsoft.sql/locations/managedinstancetdecertazureasyncoperation",
                "microsoft.sql/locations/managedinstancetdecertoperationresults",
                "microsoft.sql/locations/managedledgerdigestuploadsazureasyncoperation",
                "microsoft.sql/locations/managedledgerdigestuploadsoperationresults",
                "microsoft.sql/locations/managedserversecurityalertpoliciesazureasyncoperation",
                "microsoft.sql/locations/managedserversecurityalertpoliciesoperationresults",
                "microsoft.sql/locations/managedshorttermretentionpolicyazureasyncoperation",
                "microsoft.sql/locations/managedshorttermretentionpolicyoperationresults",
                "microsoft.sql/locations/managedtransparentdataencryptionazureasyncoperation",
                "microsoft.sql/locations/managedtransparentdataencryptionoperationresults",
                "microsoft.sql/locations/notifyazureasyncoperation",
                "microsoft.sql/locations/notifynetworksecurityperimeterupdatesavailable",
                "microsoft.sql/locations/outboundfirewallrulesazureasyncoperation",
                "microsoft.sql/locations/outboundfirewallrulesoperationresults",
                "microsoft.sql/locations/privateendpointconnectionazureasyncoperation",
                "microsoft.sql/locations/privateendpointconnectionoperationresults",
                "microsoft.sql/locations/privateendpointconnectionproxyazureasyncoperation",
                "microsoft.sql/locations/privateendpointconnectionproxyoperationresults",
                "microsoft.sql/locations/refreshexternalgovernancestatusazureasyncoperation",
                "microsoft.sql/locations/refreshexternalgovernancestatusoperationresults",
                "microsoft.sql/locations/replicationlinksazureasyncoperation",
                "microsoft.sql/locations/replicationlinksoperationresults",
                "microsoft.sql/locations/securityalertpoliciesazureasyncoperation",
                "microsoft.sql/locations/securityalertpoliciesoperationresults",
                "microsoft.sql/locations/serveradministratorazureasyncoperation",
                "microsoft.sql/locations/serveradministratoroperationresults",
                "microsoft.sql/locations/serverazureasyncoperation",
                "microsoft.sql/locations/serverconfigurationoptionazureasyncoperation",
                "microsoft.sql/locations/serverkeyazureasyncoperation",
                "microsoft.sql/locations/serverkeyoperationresults",
                "microsoft.sql/locations/serveroperationresults",
                "microsoft.sql/locations/servertrustcertificatesazureasyncoperation",
                "microsoft.sql/locations/servertrustcertificatesoperationresults",
                "microsoft.sql/locations/servertrustgroupazureasyncoperation",
                "microsoft.sql/locations/servertrustgroupoperationresults",
                "microsoft.sql/locations/servertrustgroups",
                "microsoft.sql/locations/shorttermretentionpolicyazureasyncoperation",
                "microsoft.sql/locations/shorttermretentionpolicyoperationresults",
                "microsoft.sql/locations/sqlvulnerabilityassessmentazureasyncoperation",
                "microsoft.sql/locations/sqlvulnerabilityassessmentoperationresults",
                "microsoft.sql/locations/startmanagedinstanceazureasyncoperation",
                "microsoft.sql/locations/startmanagedinstanceoperationresults",
                "microsoft.sql/locations/stopmanagedinstanceazureasyncoperation",
                "microsoft.sql/locations/stopmanagedinstanceoperationresults",
                "microsoft.sql/locations/syncagentoperationresults",
                "microsoft.sql/locations/syncdatabaseids",
                "microsoft.sql/locations/syncgroupoperationresults",
                "microsoft.sql/locations/syncmemberoperationresults",
                "microsoft.sql/locations/tdecertazureasyncoperation",
                "microsoft.sql/locations/tdecertoperationresults",
                "microsoft.sql/locations/transparentdataencryptionazureasyncoperation",
                "microsoft.sql/locations/transparentdataencryptionoperationresults",
                "microsoft.sql/locations/updatemanagedinstancednsserversazureasyncoperation",
                "microsoft.sql/locations/updatemanagedinstancednsserversoperationresults",
                "microsoft.sql/locations/usages",
                "microsoft.sql/locations/virtualclusterazureasyncoperation",
                "microsoft.sql/locations/virtualclusteroperationresults",
                "microsoft.sql/locations/virtualnetworkrulesazureasyncoperation",
                "microsoft.sql/locations/virtualnetworkrulesoperationresults",
                "microsoft.sql/locations/vulnerabilityassessmentscanazureasyncoperation",
                "microsoft.sql/locations/vulnerabilityassessmentscanoperationresults",
                "microsoft.sql/managedinstances",
                "microsoft.sql/managedinstances/administrators",
                "microsoft.sql/managedinstances/advancedthreatprotectionsettings",
                "microsoft.sql/managedinstances/azureadonlyauthentications",
                "microsoft.sql/managedinstances/databases",
                "microsoft.sql/managedinstances/databases/advancedthreatprotectionsettings",
                "microsoft.sql/managedinstances/databases/backuplongtermretentionpolicies",
                "microsoft.sql/managedinstances/databases/backupshorttermretentionpolicies",
                "microsoft.sql/managedinstances/databases/ledgerdigestuploads",
                "microsoft.sql/managedinstances/databases/schemas/tables/columns/sensitivitylabels",
                "microsoft.sql/managedinstances/databases/securityalertpolicies",
                "microsoft.sql/managedinstances/databases/transparentdataencryption",
                "microsoft.sql/managedinstances/databases/vulnerabilityassessments",
                "microsoft.sql/managedinstances/databases/vulnerabilityassessments/rules/baselines",
                "microsoft.sql/managedinstances/distributedavailabilitygroups",
                "microsoft.sql/managedinstances/dnsaliases",
                "microsoft.sql/managedinstances/dtc",
                "microsoft.sql/managedinstances/encryptionprotector",
                "microsoft.sql/managedinstances/keys",
                "microsoft.sql/managedinstances/metricdefinitions",
                "microsoft.sql/managedinstances/metrics",
                "microsoft.sql/managedinstances/privateendpointconnections",
                "microsoft.sql/managedinstances/recoverabledatabases",
                "microsoft.sql/managedinstances/restorabledroppeddatabases/backupshorttermretentionpolicies",
                "microsoft.sql/managedinstances/securityalertpolicies",
                "microsoft.sql/managedinstances/servertrustcertificates",
                "microsoft.sql/managedinstances/sqlagent",
                "microsoft.sql/managedinstances/startstopschedules",
                "microsoft.sql/managedinstances/tdecertificates",
                "microsoft.sql/managedinstances/vulnerabilityassessments",
                "microsoft.sql/operations",
                "microsoft.sql/servers",
                "microsoft.sql/servers/administratoroperationresults",
                "microsoft.sql/servers/administrators",
                "microsoft.sql/servers/advancedthreatprotectionsettings",
                "microsoft.sql/servers/advisors",
                "microsoft.sql/servers/aggregateddatabasemetrics",
                "microsoft.sql/servers/auditingpolicies",
                "microsoft.sql/servers/auditingsettings",
                "microsoft.sql/servers/automatictuning",
                "microsoft.sql/servers/azureadonlyauthentications",
                "microsoft.sql/servers/backuplongtermretentionvaults",
                "microsoft.sql/servers/communicationlinks",
                "microsoft.sql/servers/connectionpolicies",
                "microsoft.sql/servers/databases",
                "microsoft.sql/servers/databases/activate",
                "microsoft.sql/servers/databases/activatedatabase",
                "microsoft.sql/servers/databases/advancedthreatprotectionsettings",
                "microsoft.sql/servers/databases/advisors",
                "microsoft.sql/servers/databases/advisors/recommendedactions",
                "microsoft.sql/servers/databases/auditingpolicies",
                "microsoft.sql/servers/databases/auditingsettings",
                "microsoft.sql/servers/databases/auditrecords",
                "microsoft.sql/servers/databases/automatictuning",
                "microsoft.sql/servers/databases/backuplongtermretentionpolicies",
                "microsoft.sql/servers/databases/backupshorttermretentionpolicies",
                "microsoft.sql/servers/databases/connectionpolicies",
                "microsoft.sql/servers/databases/databasestate",
                "microsoft.sql/servers/databases/datamaskingpolicies",
                "microsoft.sql/servers/databases/datamaskingpolicies/rules",
                "microsoft.sql/servers/databases/deactivate",
                "microsoft.sql/servers/databases/deactivatedatabase",
                "microsoft.sql/servers/databases/extendedauditingsettings",
                "microsoft.sql/servers/databases/extensions",
                "microsoft.sql/servers/databases/geobackuppolicies",
                "microsoft.sql/servers/databases/ledgerdigestuploads",
                "microsoft.sql/servers/databases/maintenancewindows",
                "microsoft.sql/servers/databases/metricdefinitions",
                "microsoft.sql/servers/databases/metrics",
                "microsoft.sql/servers/databases/recommendedsensitivitylabels",
                "microsoft.sql/servers/databases/schemas/tables/columns/sensitivitylabels",
                "microsoft.sql/servers/databases/securityalertpolicies",
                "microsoft.sql/servers/databases/sqlvulnerabilityassessments",
                "microsoft.sql/servers/databases/sqlvulnerabilityassessments/baselines",
                "microsoft.sql/servers/databases/sqlvulnerabilityassessments/baselines/rules",
                "microsoft.sql/servers/databases/syncgroups",
                "microsoft.sql/servers/databases/syncgroups/syncmembers",
                "microsoft.sql/servers/databases/topqueries",
                "microsoft.sql/servers/databases/topqueries/querytext",
                "microsoft.sql/servers/databases/transparentdataencryption",
                "microsoft.sql/servers/databases/vulnerabilityassessment",
                "microsoft.sql/servers/databases/vulnerabilityassessments",
                "microsoft.sql/servers/databases/vulnerabilityassessments/rules/baselines",
                "microsoft.sql/servers/databases/vulnerabilityassessmentscans",
                "microsoft.sql/servers/databases/vulnerabilityassessmentsettings",
                "microsoft.sql/servers/databases/workloadgroups",
                "microsoft.sql/servers/databases/workloadgroups/workloadclassifiers",
                "microsoft.sql/servers/databasesecuritypolicies",
                "microsoft.sql/servers/devopsauditingsettings",
                "microsoft.sql/servers/disasterrecoveryconfiguration",
                "microsoft.sql/servers/dnsaliases",
                "microsoft.sql/servers/elasticpoolestimates",
                "microsoft.sql/servers/elasticpools",
                "microsoft.sql/servers/elasticpools/advisors",
                "microsoft.sql/servers/elasticpools/metricdefinitions",
                "microsoft.sql/servers/elasticpools/metrics",
                "microsoft.sql/servers/encryptionprotector",
                "microsoft.sql/servers/extendedauditingsettings",
                "microsoft.sql/servers/failovergroups",
                "microsoft.sql/servers/firewallrules",
                "microsoft.sql/servers/import",
                "microsoft.sql/servers/importexportoperationresults",
                "microsoft.sql/servers/ipv6firewallrules",
                "microsoft.sql/servers/jobaccounts",
                "microsoft.sql/servers/jobagents",
                "microsoft.sql/servers/jobagents/credentials",
                "microsoft.sql/servers/jobagents/jobs",
                "microsoft.sql/servers/jobagents/jobs/executions",
                "microsoft.sql/servers/jobagents/jobs/steps",
                "microsoft.sql/servers/jobagents/targetgroups",
                "microsoft.sql/servers/keys",
                "microsoft.sql/servers/operationresults",
                "microsoft.sql/servers/outboundfirewallrules",
                "microsoft.sql/servers/privateendpointconnections",
                "microsoft.sql/servers/recommendedelasticpools",
                "microsoft.sql/servers/recoverabledatabases",
                "microsoft.sql/servers/restorabledroppeddatabases",
                "microsoft.sql/servers/securityalertpolicies",
                "microsoft.sql/servers/serviceobjectives",
                "microsoft.sql/servers/sqlvulnerabilityassessments",
                "microsoft.sql/servers/sqlvulnerabilityassessments/baselines",
                "microsoft.sql/servers/sqlvulnerabilityassessments/baselines/rules",
                "microsoft.sql/servers/syncagents",
                "microsoft.sql/servers/tdecertificates",
                "microsoft.sql/servers/usages",
                "microsoft.sql/servers/virtualnetworkrules",
                "microsoft.sql/servers/vulnerabilityassessments",
                "microsoft.sql/virtualclusters"
            ],
            "storage": [
                "microsoft.storage/checknameavailability",
                "microsoft.storage/datamovers",
                "microsoft.storage/datamovers/agents",
                "microsoft.storage/datamovers/endpoints",
                "microsoft.storage/datamovers/projects",
                "microsoft.storage/datamovers/projects/jobdefinitions",
                "microsoft.storage/datamovers/projects/jobdefinitions/jobruns",
                "microsoft.storage/deletedaccounts",
                "microsoft.storage/locations",
                "microsoft.storage/locations/asyncoperations",
                "microsoft.storage/locations/checknameavailability",
                "microsoft.storage/locations/deletedaccounts",
                "microsoft.storage/locations/deletevirtualnetworkorsubnets",
                "microsoft.storage/locations/notifynetworksecurityperimeterupdatesavailable",
                "microsoft.storage/locations/usages",
                "microsoft.storage/operations",
                "microsoft.storage/storageaccounts",
                "microsoft.storage/storageaccounts/blobservices",
                "microsoft.storage/storageaccounts/blobservices/containers/immutabilitypolicies",
                "microsoft.storage/storageaccounts/encryptionscopes",
                "microsoft.storage/storageaccounts/fileservices",
                "microsoft.storage/storageaccounts/fileservices/shares",
                "microsoft.storage/storageaccounts/inventorypolicies",
                "microsoft.storage/storageaccounts/listaccountsas",
                "microsoft.storage/storageaccounts/listservicesas",
                "microsoft.storage/storageaccounts/localusers",
                "microsoft.storage/storageaccounts/managementpolicies",
                "microsoft.storage/storageaccounts/objectreplicationpolicies",
                "microsoft.storage/storageaccounts/privateendpointconnectionproxies",
                "microsoft.storage/storageaccounts/privateendpointconnections",
                "microsoft.storage/storageaccounts/queueservices",
                "microsoft.storage/storageaccounts/queueservices/queues",
                "microsoft.storage/storageaccounts/services",
                "microsoft.storage/storageaccounts/services/metricdefinitions",
                "microsoft.storage/storageaccounts/storagetaskassignments",
                "microsoft.storage/storageaccounts/tableservices",
                "microsoft.storage/storageaccounts/tableservices/tables",
                "microsoft.storage/storagetasks",
                "microsoft.storage/usages"
            ],
            "synapse": [
                "microsoft.synapse/checknameavailability",
                "microsoft.synapse/kustooperations",
                "microsoft.synapse/locations",
                "microsoft.synapse/locations/kustopoolchecknameavailability",
                "microsoft.synapse/locations/kustopooloperationresults",
                "microsoft.synapse/locations/operationresults",
                "microsoft.synapse/locations/operationstatuses",
                "microsoft.synapse/locations/sqldatabaseazureasyncoperation",
                "microsoft.synapse/locations/sqldatabaseoperationresults",
                "microsoft.synapse/locations/sqlpoolazureasyncoperation",
                "microsoft.synapse/locations/sqlpooloperationresults",
                "microsoft.synapse/operations",
                "microsoft.synapse/privatelinkhubs",
                "microsoft.synapse/workspaces",
                "microsoft.synapse/workspaces/administrators",
                "microsoft.synapse/workspaces/auditingsettings",
                "microsoft.synapse/workspaces/azureadonlyauthentications",
                "microsoft.synapse/workspaces/bigdatapools",
                "microsoft.synapse/workspaces/dedicatedsqlminimaltlssettings",
                "microsoft.synapse/workspaces/extendedauditingsettings",
                "microsoft.synapse/workspaces/firewallrules",
                "microsoft.synapse/workspaces/integrationruntimes",
                "microsoft.synapse/workspaces/keys",
                "microsoft.synapse/workspaces/kustopools",
                "microsoft.synapse/workspaces/kustopools/attacheddatabaseconfigurations",
                "microsoft.synapse/workspaces/kustopools/databases",
                "microsoft.synapse/workspaces/kustopools/databases/dataconnections",
                "microsoft.synapse/workspaces/kustopools/databases/principalassignments",
                "microsoft.synapse/workspaces/kustopools/principalassignments",
                "microsoft.synapse/workspaces/managedidentitysqlcontrolsettings",
                "microsoft.synapse/workspaces/operationresults",
                "microsoft.synapse/workspaces/operationstatuses",
                "microsoft.synapse/workspaces/privateendpointconnectionproxies",
                "microsoft.synapse/workspaces/privateendpointconnections",
                "microsoft.synapse/workspaces/securityalertpolicies",
                "microsoft.synapse/workspaces/sqladministrators",
                "microsoft.synapse/workspaces/sqldatabases",
                "microsoft.synapse/workspaces/sqlpools",
                "microsoft.synapse/workspaces/sqlpools/auditingsettings",
                "microsoft.synapse/workspaces/sqlpools/datamaskingpolicies",
                "microsoft.synapse/workspaces/sqlpools/datamaskingpolicies/rules",
                "microsoft.synapse/workspaces/sqlpools/extendedauditingsettings",
                "microsoft.synapse/workspaces/sqlpools/maintenancewindows",
                "microsoft.synapse/workspaces/sqlpools/metadatasync",
                "microsoft.synapse/workspaces/sqlpools/schemas/tables/columns/sensitivitylabels",
                "microsoft.synapse/workspaces/sqlpools/securityalertpolicies",
                "microsoft.synapse/workspaces/sqlpools/transparentdataencryption",
                "microsoft.synapse/workspaces/sqlpools/vulnerabilityassessments",
                "microsoft.synapse/workspaces/sqlpools/vulnerabilityassessments/rules/baselines",
                "microsoft.synapse/workspaces/sqlpools/workloadgroups",
                "microsoft.synapse/workspaces/sqlpools/workloadgroups/workloadclassifiers",
                "microsoft.synapse/workspaces/vulnerabilityassessments"
            ],
            "vdi": [
                "microsoft.desktopvirtualization/applicationgroups",
                "microsoft.desktopvirtualization/applicationgroups/applications",
                "microsoft.desktopvirtualization/applicationgroups/desktops",
                "microsoft.desktopvirtualization/applicationgroups/startmenuitems",
                "microsoft.desktopvirtualization/hostpools",
                "microsoft.desktopvirtualization/hostpools/msixpackages",
                "microsoft.desktopvirtualization/hostpools/sessionhosts",
                "microsoft.desktopvirtualization/hostpools/sessionhosts/usersessions",
                "microsoft.desktopvirtualization/hostpools/usersessions",
                "microsoft.desktopvirtualization/operations",
                "microsoft.desktopvirtualization/scalingplans",
                "microsoft.desktopvirtualization/workspaces"
            ],
            "platform": [
                "microsoft.advisor/advisorscore",
                "microsoft.advisor/configurations",
                "microsoft.advisor/generaterecommendations",
                "microsoft.advisor/metadata",
                "microsoft.advisor/operations",
                "microsoft.advisor/predict",
                "microsoft.advisor/recommendations",
                "microsoft.advisor/suppressions",
                "microsoft.alertsmanagement/actionrules",
                "microsoft.alertsmanagement/alertrulerecommendations",
                "microsoft.alertsmanagement/alerts",
                "microsoft.alertsmanagement/alertsmetadata",
                "microsoft.alertsmanagement/alertssummary",
                "microsoft.alertsmanagement/migratefromsmartdetection",
                "microsoft.alertsmanagement/operations",
                "microsoft.alertsmanagement/prometheusrulegroups",
                "microsoft.alertsmanagement/smartdetectoralertrules",
                "microsoft.alertsmanagement/smartgroups",
                "microsoft.authorization/accessreviewhistorydefinitions",
                "microsoft.authorization/accessreviewscheduledefinitions",
                "microsoft.authorization/accessreviewschedulesettings",
                "microsoft.authorization/batchresourcecheckaccess",
                "microsoft.authorization/checkaccess",
                "microsoft.authorization/dataaliases",
                "microsoft.authorization/datapolicymanifests",
                "microsoft.authorization/denyassignments",
                "microsoft.authorization/diagnosticsettings",
                "microsoft.authorization/diagnosticsettingscategories",
                "microsoft.authorization/elevateaccess",
                "microsoft.authorization/eligiblechildresources",
                "microsoft.authorization/findorphanroleassignments",
                "microsoft.authorization/locks",
                "microsoft.authorization/operations",
                "microsoft.authorization/operationstatus",
                "microsoft.authorization/permissions",
                "microsoft.authorization/policyassignments",
                "microsoft.authorization/policydefinitions",
                "microsoft.authorization/policyexemptions",
                "microsoft.authorization/policysetdefinitions",
                "microsoft.authorization/privatelinkassociations",
                "microsoft.authorization/provideroperations",
                "microsoft.authorization/resourcemanagementprivatelinks",
                "microsoft.authorization/roleassignmentapprovals",
                "microsoft.authorization/roleassignments",
                "microsoft.authorization/roleassignmentscheduleinstances",
                "microsoft.authorization/roleassignmentschedulerequests",
                "microsoft.authorization/roleassignmentschedules",
                "microsoft.authorization/roleassignmentsusagemetrics",
                "microsoft.authorization/roledefinitions",
                "microsoft.authorization/roleeligibilityscheduleinstances",
                "microsoft.authorization/roleeligibilityschedulerequests",
                "microsoft.authorization/roleeligibilityschedules",
                "microsoft.authorization/rolemanagementalertconfigurations",
                "microsoft.authorization/rolemanagementalertdefinitions",
                "microsoft.authorization/rolemanagementalerts",
                "microsoft.authorization/rolemanagementpolicies",
                "microsoft.authorization/rolemanagementpolicyassignments",
                "microsoft.costmanagement/benefitrecommendations",
                "microsoft.costmanagement/benefitutilizationsummaries",
                "microsoft.costmanagement/billingaccounts",
                "microsoft.costmanagement/budgets",
                "microsoft.costmanagement/calculateprice",
                "microsoft.costmanagement/checkconnectoreligibility",
                "microsoft.costmanagement/checknameavailability",
                "microsoft.costmanagement/departments",
                "microsoft.costmanagement/dimensions",
                "microsoft.costmanagement/enrollmentaccounts",
                "microsoft.costmanagement/exports",
                "microsoft.costmanagement/externalbillingaccounts",
                "microsoft.costmanagement/externalbillingaccounts/alerts",
                "microsoft.costmanagement/externalbillingaccounts/dimensions",
                "microsoft.costmanagement/externalbillingaccounts/forecast",
                "microsoft.costmanagement/externalbillingaccounts/query",
                "microsoft.costmanagement/externalsubscriptions",
                "microsoft.costmanagement/externalsubscriptions/alerts",
                "microsoft.insights/actiongroups",
                "microsoft.insights/actiongroups/networksecurityperimeterassociationproxies",
                "microsoft.insights/actiongroups/networksecurityperimeterconfigurations",
                "microsoft.insights/activitylogalerts",
                "microsoft.insights/alertrules",
                "microsoft.insights/autoscalesettings",
                "microsoft.insights/components",
                "microsoft.insights/components/aggregate",
                "microsoft.insights/components/analyticsitems",
                "microsoft.insights/components/annotations",
                "microsoft.insights/components/api",
                "microsoft.insights/components/apikeys",
                "microsoft.insights/components/currentbillingfeatures",
                "microsoft.insights/components/defaultworkitemconfig",
                "microsoft.insights/components/events",
                "microsoft.insights/components/exportconfiguration",
                "microsoft.insights/components/extendqueries",
                "microsoft.insights/components/favorites",
                "microsoft.insights/components/featurecapabilities",
                "microsoft.insights/components/generatediagnosticservicereadonlytoken",
                "microsoft.insights/components/generatediagnosticservicereadwritetoken",
                "microsoft.insights/components/getavailablebillingfeatures",
                "microsoft.insights/components/linkedstorageaccounts",
                "microsoft.insights/components/metadata",
                "microsoft.insights/components/metricdefinitions",
                "microsoft.insights/components/metrics",
                "microsoft.insights/components/move",
                "microsoft.insights/components/myanalyticsitems",
                "microsoft.insights/components/myfavorites",
                "microsoft.insights/components/operations",
                "microsoft.insights/components/pricingplans",
                "microsoft.insights/components/proactivedetectionconfigs",
                "microsoft.insights/components/purge",
                "microsoft.insights/components/query",
                "microsoft.insights/components/quotastatus",
                "microsoft.insights/components/syntheticmonitorlocations",
                "microsoft.insights/components/webtests",
                "microsoft.insights/components/workitemconfigs",
                "microsoft.insights/createnotifications",
                "microsoft.insights/datacollectionendpoints",
                "microsoft.insights/datacollectionendpoints/networksecurityperimeterassociationproxies",
                "microsoft.insights/datacollectionendpoints/networksecurityperimeterconfigurations",
                "microsoft.insights/datacollectionendpoints/scopedprivatelinkproxies",
                "microsoft.insights/datacollectionruleassociations",
                "microsoft.insights/datacollectionrules",
                "microsoft.insights/diagnosticsettings",
                "microsoft.insights/diagnosticsettingscategories",
                "microsoft.insights/eventcategories",
                "microsoft.insights/eventtypes",
                "microsoft.insights/extendeddiagnosticsettings",
                "microsoft.insights/generatediagnosticservicereadonlytoken",
                "microsoft.insights/generatediagnosticservicereadwritetoken",
                "microsoft.insights/generatelivetoken",
                "microsoft.insights/guestdiagnosticsettings",
                "microsoft.insights/guestdiagnosticsettingsassociation",
                "microsoft.insights/listmigrationdate",
                "microsoft.insights/locations",
                "microsoft.insights/locations/notifynetworksecurityperimeterupdatesavailable",
                "microsoft.insights/locations/operationresults",
                "microsoft.insights/logdefinitions",
                "microsoft.insights/logprofiles",
                "microsoft.insights/logs",
                "microsoft.insights/metricalerts",
                "microsoft.insights/metricbaselines",
                "microsoft.insights/metricbatch",
                "microsoft.insights/metricdefinitions",
                "microsoft.insights/metricnamespaces",
                "microsoft.insights/metrics",
                "microsoft.insights/migratealertrules",
                "microsoft.insights/migratetonewpricingmodel",
                "microsoft.insights/monitoredobjects",
                "microsoft.insights/myworkbooks",
                "microsoft.insights/notificationgroups",
                "microsoft.insights/notificationstatus",
                "microsoft.insights/operations",
                "microsoft.insights/privatelinkscopeoperationstatuses",
                "microsoft.insights/privatelinkscopes",
                "microsoft.insights/privatelinkscopes/privateendpointconnectionproxies",
                "microsoft.insights/privatelinkscopes/privateendpointconnections",
                "microsoft.insights/privatelinkscopes/scopedresources",
                "microsoft.insights/rollbacktolegacypricingmodel",
                "microsoft.insights/scheduledqueryrules",
                "microsoft.insights/scheduledqueryrules/networksecurityperimeterassociationproxies",
                "microsoft.insights/scheduledqueryrules/networksecurityperimeterconfigurations",
                "microsoft.insights/topology",
                "microsoft.insights/transactions",
                "microsoft.insights/vminsightsonboardingstatuses",
                "microsoft.insights/webtests",
                "microsoft.insights/webtests/gettestresultfile",
                "microsoft.insights/workbooks",
                "microsoft.insights/workbooktemplates",
                "microsoft.operationalinsights/clusters",
                "microsoft.operationalinsights/deletedworkspaces",
                "microsoft.operationalinsights/linktargets",
                "microsoft.operationalinsights/locations",
                "microsoft.operationalinsights/locations/operationstatuses",
                "microsoft.operationalinsights/locations/workspaces",
                "microsoft.operationalinsights/operations",
                "microsoft.operationalinsights/querypacks",
                "microsoft.operationalinsights/querypacks/queries",
                "microsoft.operationalinsights/storageinsightconfigs",
                "microsoft.operationalinsights/workspaces",
                "microsoft.operationalinsights/workspaces/dataexports",
                "microsoft.operationalinsights/workspaces/datasources",
                "microsoft.operationalinsights/workspaces/linkedservices",
                "microsoft.operationalinsights/workspaces/linkedstorageaccounts",
                "microsoft.operationalinsights/workspaces/metadata",
                "microsoft.operationalinsights/workspaces/networksecurityperimeterassociationproxies",
                "microsoft.operationalinsights/workspaces/networksecurityperimeterconfigurations",
                "microsoft.operationalinsights/workspaces/query",
                "microsoft.operationalinsights/workspaces/savedsearches",
                "microsoft.operationalinsights/workspaces/savedsearches/schedules",
                "microsoft.operationalinsights/workspaces/savedsearches/schedules/actions",
                "microsoft.operationalinsights/workspaces/savedsearches/schedules/events",
                "microsoft.operationalinsights/workspaces/savedsearches/schedules/events/ticks",
                "microsoft.operationalinsights/workspaces/scopedprivatelinkproxies",
                "microsoft.operationalinsights/workspaces/storageinsightconfigs",
                "microsoft.operationalinsights/workspaces/tables",
                "microsoft.operationalinsights/workspaces/views",
                "microsoft.operationsmanagement/solutions",
                "microsoft.operationsmanagement/views",
                "microsoft.resourcegraph/operations",
                "microsoft.resourcegraph/queries",
                "microsoft.resourcegraph/resourcechangedetails",
                "microsoft.resourcegraph/resourcechanges",
                "microsoft.resourcegraph/resources",
                "microsoft.resourcegraph/resourceshistory",
                "microsoft.resourcegraph/subscriptionsstatus",
                "microsoft.resourcehealth/availabilitystatuses",
                "microsoft.resourcehealth/childavailabilitystatuses",
                "microsoft.resourcehealth/childresources",
                "microsoft.resourcehealth/emergingissues",
                "microsoft.resourcehealth/events",
                "microsoft.resourcehealth/impactedresources",
                "microsoft.resourcehealth/metadata",
                "microsoft.resourcehealth/operations",
                "microsoft.resources/builtintemplatespecs",
                "microsoft.resources/builtintemplatespecs/versions",
                "microsoft.resources/bulkdelete",
                "microsoft.resources/bulkdelete",
                "microsoft.resources/calculatetemplatehash",
                "microsoft.resources/changes",
                "microsoft.resources/checkpolicycompliance",
                "microsoft.resources/checkresourcename",
                "microsoft.resources/checkzonepeers",
                "microsoft.resources/deployments",
                "microsoft.resources/deployments/operations",
                "microsoft.resources/deploymentscripts",
                "microsoft.resources/deploymentscripts/logs",
                "microsoft.resources/deploymentstacks",
                "microsoft.resources/deploymentstacks/snapshots",
                "microsoft.resources/links",
                "microsoft.resources/locations",
                "microsoft.resources/locations/deploymentscriptoperationresults",
                "microsoft.resources/locations/deploymentstackoperationstatus",
                "microsoft.resources/notifyresourcejobs",
                "microsoft.resources/operationresults",
                "microsoft.resources/operations",
                "microsoft.resources/providers",
                "microsoft.resources/resourcegroups",
                "microsoft.resources/resources",
                "microsoft.resources/snapshots",
                "microsoft.resources/subscriptions",
                "microsoft.resources/subscriptions/locations",
                "microsoft.resources/subscriptions/operationresults",
                "microsoft.resources/subscriptions/providers",
                "microsoft.resources/subscriptions/resourcegroups",
                "microsoft.resources/subscriptions/resourcegroups/resources",
                "microsoft.resources/subscriptions/resources",
                "microsoft.resources/subscriptions/tagnames",
                "microsoft.resources/subscriptions/tagnames/tagvalues",
                "microsoft.resources/tags",
                "microsoft.resources/templatespecs",
                "microsoft.resources/templatespecs/versions",
                "microsoft.resources/tenants",
                "microsoft.resources/validateresources",
                "microsoft.security/adaptivenetworkhardenings",
                "microsoft.security/advancedthreatprotectionsettings",
                "microsoft.security/alerts",
                "microsoft.security/alertssuppressionrules",
                "microsoft.security/allowedconnections",
                "microsoft.security/antimalwaresettings",
                "microsoft.security/apicollections",
                "microsoft.security/applications",
                "microsoft.security/applicationwhitelistings",
                "microsoft.security/assessmentmetadata",
                "microsoft.security/assessments",
                "microsoft.security/assessments/governanceassignments",
                "microsoft.security/assignments",
                "microsoft.security/autodismissalertsrules",
                "microsoft.security/automations",
                "microsoft.security/complianceresults",
                "microsoft.security/compliances",
                "microsoft.security/connectedcontainerregistries",
                "microsoft.security/connectors",
                "microsoft.security/customassessmentautomations",
                "microsoft.security/customentitystoreassignments",
                "microsoft.security/datacollectionagents",
                "microsoft.security/datascanners",
                "microsoft.security/datasensitivitysettings",
                "microsoft.security/defenderforstoragesettings",
                "microsoft.security/devicesecuritygroups",
                "microsoft.security/discoveredsecuritysolutions",
                "microsoft.security/externalsecuritysolutions",
                "microsoft.security/governancerules",
                "microsoft.security/informationprotectionpolicies",
                "microsoft.security/ingestionsettings",
                "microsoft.security/iotsecuritysolutions",
                "microsoft.security/iotsecuritysolutions/analyticsmodels",
                "microsoft.security/iotsecuritysolutions/analyticsmodels/aggregatedalerts",
                "microsoft.security/iotsecuritysolutions/analyticsmodels/aggregatedrecommendations",
                "microsoft.security/iotsecuritysolutions/iotalerts",
                "microsoft.security/iotsecuritysolutions/iotalerttypes",
                "microsoft.security/iotsecuritysolutions/iotrecommendations",
                "microsoft.security/iotsecuritysolutions/iotrecommendationtypes",
                "microsoft.security/jitnetworkaccesspolicies",
                "microsoft.security/jitpolicies",
                "microsoft.security/locations",
                "microsoft.security/locations/alerts",
                "microsoft.security/locations/allowedconnections",
                "microsoft.security/locations/applicationwhitelistings",
                "microsoft.security/locations/discoveredsecuritysolutions",
                "microsoft.security/locations/externalsecuritysolutions",
                "microsoft.security/locations/jitnetworkaccesspolicies",
                "microsoft.security/locations/securitysolutions",
                "microsoft.security/locations/securitysolutionsreferencedata",
                "microsoft.security/locations/tasks",
                "microsoft.security/locations/topologies",
                "microsoft.security/mdeonboardings",
                "microsoft.security/operations",
                "microsoft.security/policies",
                "microsoft.security/pricings",
                "microsoft.security/pricings/securityoperators",
                "microsoft.security/query",
                "microsoft.security/regulatorycompliancestandards",
                "microsoft.security/regulatorycompliancestandards/regulatorycompliancecontrols",
                "microsoft.security/regulatorycompliancestandards/regulatorycompliancecontrols/regulatorycomplianceassessments",
                "microsoft.security/securescorecontroldefinitions",
                "microsoft.security/securescorecontrols",
                "microsoft.security/securescores",
                "microsoft.security/securescores/securescorecontrols",
                "microsoft.security/securityconnectors",
                "microsoft.security/securitycontacts",
                "microsoft.security/securitysolutions",
                "microsoft.security/securitysolutionsreferencedata",
                "microsoft.security/securitystatuses",
                "microsoft.security/securitystatusessummaries",
                "microsoft.security/servervulnerabilityassessments",
                "microsoft.security/servervulnerabilityassessmentssettings",
                "microsoft.security/settings",
                "microsoft.security/sqlvulnerabilityassessments",
                "microsoft.security/standards",
                "microsoft.security/subassessments",
                "microsoft.security/tasks",
                "microsoft.security/topologies",
                "microsoft.security/vmscanners",
                "microsoft.security/workspacesettings",
                "microsoft.securitygraph/diagnosticsettings",
                "microsoft.securitygraph/diagnosticsettingscategories",
                "microsoft.securitygraph/operations",
                "microsoft.securityinsights/aggregations",
                "microsoft.securityinsights/alertrules",
                "microsoft.securityinsights/alertrules/actions",
                "microsoft.securityinsights/alertruletemplates",
                "microsoft.securityinsights/automationrules",
                "microsoft.securityinsights/bookmarks",
                "microsoft.securityinsights/bookmarks/relations",
                "microsoft.securityinsights/cases",
                "microsoft.securityinsights/cases/comments",
                "microsoft.securityinsights/confidentialwatchlists",
                "microsoft.securityinsights/contentpackages",
                "microsoft.securityinsights/contenttemplates",
                "microsoft.securityinsights/dataconnectordefinitions",
                "microsoft.securityinsights/dataconnectors",
                "microsoft.securityinsights/dataconnectorscheckrequirements",
                "microsoft.securityinsights/dynamicsummaries",
                "microsoft.securityinsights/enrichment",
                "microsoft.securityinsights/entities",
                "microsoft.securityinsights/entityqueries",
                "microsoft.securityinsights/entityquerytemplates",
                "microsoft.securityinsights/exportconnections",
                "microsoft.securityinsights/fileimports",
                "microsoft.securityinsights/hunts",
                "microsoft.securityinsights/huntsessions",
                "microsoft.securityinsights/incidents",
                "microsoft.securityinsights/incidents/comments",
                "microsoft.securityinsights/incidents/relations",
                "microsoft.securityinsights/listrepositories",
                "microsoft.securityinsights/metadata",
                "microsoft.securityinsights/mitrecoveragerecords",
                "microsoft.securityinsights/officeconsents",
                "microsoft.securityinsights/onboardingstates",
                "microsoft.securityinsights/operations",
                "microsoft.securityinsights/overview",
                "microsoft.securityinsights/recommendations",
                "microsoft.securityinsights/securitymlanalyticssettings",
                "microsoft.securityinsights/settings",
                "microsoft.securityinsights/sourcecontrols",
                "microsoft.securityinsights/threatintelligence",
                "microsoft.securityinsights/threatintelligence/indicators",
                "microsoft.securityinsights/triggeredanalyticsruleruns",
                "microsoft.securityinsights/watchlists",
                "microsoft.securityinsights/workspacemanagerassignments",
                "microsoft.securityinsights/workspacemanagerconfigurations",
                "microsoft.securityinsights/workspacemanagergroups",
                "microsoft.securityinsights/workspacemanagermembers"
            ]
        },
        "allowedResourcesMap": "[concat(if(contains(parameters('compliantAzureServices'), 'Apim'), variables('allowedResources').apiManagement, json('[]')), if(contains(parameters('compliantAzureServices'), 'Automation'), variables('allowedResources').automation, json('[]')),if(contains(parameters('compliantAzureServices'), 'Backup'), variables('allowedResources').backup, json('[]')),if(contains(parameters('compliantAzureServices'), 'Compute'), variables('allowedResources').compute, json('[]')),if(contains(parameters('compliantAzureServices'), 'ContainerApps'), variables('allowedResources').containerApps, json('[]')), if(contains(parameters('compliantAzureServices'), 'ContainerInstance'), variables('allowedResources').containerInstance, json('[]')), if(contains(parameters('compliantAzureServices'), 'ContainerRegistry'), variables('allowedResources').containerRegistry, json('[]')), if(contains(parameters('compliantAzureServices'), 'CosmosDb'), variables('allowedResources').cosmosDb, json('[]')), if(contains(parameters('compliantAzureServices'), 'DataExplorer'), variables('allowedResources').dataExplorer, json('[]')), if(contains(parameters('compliantAzureServices'), 'DataFactory'), variables('allowedResources').dataFactory, json('[]')), if(contains(parameters('compliantAzureServices'), 'EventGrid'), variables('allowedResources').eventGrid, json('[]')), if(contains(parameters('compliantAzureServices'), 'EventHub'), variables('allowedResources').eventHub, json('[]')), if(contains(parameters('compliantAzureServices'), 'KeyVault'), variables('allowedResources').keyVault, json('[]')), if(contains(parameters('compliantAzureServices'), 'Kubernetes'), variables('allowedResources').kubernetes, json('[]')), if(contains(parameters('compliantAzureServices'), 'MachineLearning'), variables('allowedResources').machineLearning, json('[]')), if(contains(parameters('compliantAzureServices'), 'Networking'), variables('allowedResources').network, json('[]')), if(contains(parameters('compliantAzureServices'), 'OpenAi'), variables('allowedResources').openAi, json('[]')), if(contains(parameters('compliantAzureServices'), 'PostgreSql'), variables('allowedResources').postgreSql, json('[]')), if(contains(parameters('compliantAzureServices'), 'ServiceBus'), variables('allowedResources').serviceBus, json('[]')), if(contains(parameters('compliantAzureServices'), 'Sql'), variables('allowedResources').sql, json('[]')), if(contains(parameters('compliantAzureServices'), 'StorageAccount'), variables('allowedResources').storage, json('[]')), if(contains(parameters('compliantAzureServices'), 'Synapse'), variables('allowedResources').synapse, json('[]')), if(contains(parameters('compliantAzureServices'), 'DesktopVirtualization'), variables('allowedResources').vdi, json('[]')), variables('allowedResources').platform)]"
    },
    "resources": [
        /*
            The following deployment will create the management group structure and ensure the sustainable, scalable architecture
        */
        {
            // Creating the management group structure
            "condition": "[empty(parameters('singlePlatformSubscriptionId'))]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2019-10-01",
            "name": "[variables('deploymentNames').mgmtGroupDeploymentName]",
            "location": "[deployment().location]",
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').managementGroups]"
                },
                "parameters": {
                    "topLevelManagementGroupPrefix": {
                        "value": "[parameters('industryPrefix')]"
                    }
                }
            }
        },     
        /*
            The following deployments will deploy the required proactive and preventive Azure policies for policy driven governance
        */
        {
            // Deploying custom Role Definitions. Note: all roleDefinitions will eventually be moved to built-in policies and codebase will be reduced
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2019-10-01",
            "name": "[variables('deploymentNames').customRbacDeploymentName]",
            "location": "[deployment().location]",
            "scope": "[concat('Microsoft.Management/managementGroups/', parameters('industryPrefix'))]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').mgmtGroupDeploymentName)]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').customRbacRoleDefinition]"
                },
                "parameters": {
                    "topLevelManagementGroupPrefix": {
                        "value": "[parameters('industryPrefix')]"
                    }
                }
            }
        },
        {
            // Deploying Compliant Corp Lz PolicySetDefinition
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2019-10-01",
            "name": "[variables('deploymentNames').compliantCorpLzDeploymentName]",
            "location": "[deployment().location]",
            "scope": "[concat('Microsoft.Management/managementGroups/', parameters('industryPrefix'))]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').mgmtGroupDeploymentName)]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').compliantCorpLzPolicySetDefinition]"
                },
                "parameters": {
                    "topLevelManagementGroupPrefix": {
                        "value": "[parameters('industryPrefix')]"
                    }
                }
            }
        },       
        {
            // Deploying Compliant APIM PolicySetDefinition
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2019-10-01",
            "name": "[variables('deploymentNames').compliantApimDeploymentName]",
            "location": "[deployment().location]",
            "scope": "[concat('Microsoft.Management/managementGroups/', parameters('industryPrefix'))]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').mgmtGroupDeploymentName)]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').compliantApiMPolicySetDefinition]"
                },
                "parameters": {
                    "topLevelManagementGroupPrefix": {
                        "value": "[parameters('industryPrefix')]"
                    }
                }
            }
        },
        {
            // Deploying Compliant App Service PolicySetDefinition
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2019-10-01",
            "name": "[variables('deploymentNames').compliantAppServiceDeploymentName]",
            "location": "[deployment().location]",
            "scope": "[concat('Microsoft.Management/managementGroups/', parameters('industryPrefix'))]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').mgmtGroupDeploymentName)]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').compliantAppServicePolicySetDefinition]"
                },
                "parameters": {
                    "topLevelManagementGroupPrefix": {
                        "value": "[parameters('industryPrefix')]"
                    }
                }
            }
        },
        {
            // Deploying Compliant Automation PolicySetDefinition
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2019-10-01",
            "name": "[variables('deploymentNames').compliantAutomationDeploymentName]",
            "location": "[deployment().location]",
            "scope": "[concat('Microsoft.Management/managementGroups/', parameters('industryPrefix'))]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').mgmtGroupDeploymentName)]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').compliantAutomationPolicySetDefinition]"
                },
                "parameters": {
                    "topLevelManagementGroupPrefix": {
                        "value": "[parameters('industryPrefix')]"
                    }
                }
            }
        },
        {
            // Deploying Compliant Backup PolicySetDefinition
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2019-10-01",
            "name": "[variables('deploymentNames').compliantBackupDeploymentName]",
            "location": "[deployment().location]",
            "scope": "[concat('Microsoft.Management/managementGroups/', parameters('industryPrefix'))]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').mgmtGroupDeploymentName)]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').compliantBackupPolicySetDefinition]"
                },
                "parameters": {
                    "topLevelManagementGroupPrefix": {
                        "value": "[parameters('industryPrefix')]"
                    }
                }
            }
        },
        {
            // Deploying Compliant Compute PolicySetDefinition
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2019-10-01",
            "name": "[variables('deploymentNames').compliantComputeDeploymentName]",
            "location": "[deployment().location]",
            "scope": "[concat('Microsoft.Management/managementGroups/', parameters('industryPrefix'))]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').mgmtGroupDeploymentName)]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').compliantComputePolicySetDefinition]"
                },
                "parameters": {
                    "topLevelManagementGroupPrefix": {
                        "value": "[parameters('industryPrefix')]"
                    }
                }
            }
        },
        {
            // Deploying Compliant Container Apps PolicySetDefinition
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2019-10-01",
            "name": "[variables('deploymentNames').compliantContainerAppsDeploymentName]",
            "location": "[deployment().location]",
            "scope": "[concat('Microsoft.Management/managementGroups/', parameters('industryPrefix'))]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').mgmtGroupDeploymentName)]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').compliantContainerAppsPolicySetDefinition]"
                },
                "parameters": {
                    "topLevelManagementGroupPrefix": {
                        "value": "[parameters('industryPrefix')]"
                    }
                }
            }
        },
        {
            // Deploying Compliant Container Instance PolicySetDefinition
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2019-10-01",
            "name": "[variables('deploymentNames').compliantContainerInstanceDeploymentName]",
            "location": "[deployment().location]",
            "scope": "[concat('Microsoft.Management/managementGroups/', parameters('industryPrefix'))]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').mgmtGroupDeploymentName)]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').compliantContainerInstancePolicySetDefinition]"
                },
                "parameters": {
                    "topLevelManagementGroupPrefix": {
                        "value": "[parameters('industryPrefix')]"
                    }
                }
            }
        },
        {
            // Deploying Compliant Container Registry PolicySetDefinition
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2019-10-01",
            "name": "[variables('deploymentNames').compliantContainerRegistryDeploymentName]",
            "location": "[deployment().location]",
            "scope": "[concat('Microsoft.Management/managementGroups/', parameters('industryPrefix'))]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').mgmtGroupDeploymentName)]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').compliantContainerRegistryPolicySetDefinition]"
                },
                "parameters": {
                    "topLevelManagementGroupPrefix": {
                        "value": "[parameters('industryPrefix')]"
                    }
                }
            }
        },
        {
            // Deploying Compliant Cosmos Db PolicySetDefinition
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2019-10-01",
            "name": "[variables('deploymentNames').compliantCosmosDbDeploymentName]",
            "location": "[deployment().location]",
            "scope": "[concat('Microsoft.Management/managementGroups/', parameters('industryPrefix'))]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').mgmtGroupDeploymentName)]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').compliantCosmosDbPolicySetDefinition]"
                },
                "parameters": {
                    "topLevelManagementGroupPrefix": {
                        "value": "[parameters('industryPrefix')]"
                    }
                }
            }
        },
        {
            // Deploying Compliant Data Explorer PolicySetDefinition
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2019-10-01",
            "name": "[variables('deploymentNames').compliantDataExplorerDeploymentName]",
            "location": "[deployment().location]",
            "scope": "[concat('Microsoft.Management/managementGroups/', parameters('industryPrefix'))]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').mgmtGroupDeploymentName)]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').compliantDataExplorerPolicySetDefinition]"
                },
                "parameters": {
                    "topLevelManagementGroupPrefix": {
                        "value": "[parameters('industryPrefix')]"
                    }
                }
            }
        },
        {
            // Deploying Compliant Data Factory PolicySetDefinition
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2019-10-01",
            "name": "[variables('deploymentNames').compliantDataFactoryDeploymentName]",
            "location": "[deployment().location]",
            "scope": "[concat('Microsoft.Management/managementGroups/', parameters('industryPrefix'))]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').mgmtGroupDeploymentName)]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').compliantDataFactoryPolicySetDefinition]"
                },
                "parameters": {
                    "topLevelManagementGroupPrefix": {
                        "value": "[parameters('industryPrefix')]"
                    }
                }
            }
        },
        {
            // Deploying Compliant Event Grid PolicySetDefinition
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2019-10-01",
            "name": "[variables('deploymentNames').compliantEventGridDeploymentName]",
            "location": "[deployment().location]",
            "scope": "[concat('Microsoft.Management/managementGroups/', parameters('industryPrefix'))]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').mgmtGroupDeploymentName)]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').compliantEventGridPolicySetDefinition]"
                },
                "parameters": {
                    "topLevelManagementGroupPrefix": {
                        "value": "[parameters('industryPrefix')]"
                    }
                }
            }
        },
        {
            // Deploying Compliant Event Hub PolicySetDefinition
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2019-10-01",
            "name": "[variables('deploymentNames').compliantEventHubDeploymentName]",
            "location": "[deployment().location]",
            "scope": "[concat('Microsoft.Management/managementGroups/', parameters('industryPrefix'))]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').mgmtGroupDeploymentName)]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').compliantEventHubPolicySetDefinition]"
                },
                "parameters": {
                    "topLevelManagementGroupPrefix": {
                        "value": "[parameters('industryPrefix')]"
                    }
                }
            }
        },
        {
            // Deploying Compliant Key Vault PolicySetDefinition
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2019-10-01",
            "name": "[variables('deploymentNames').compliantKeyVaultDeploymentName]",
            "location": "[deployment().location]",
            "scope": "[concat('Microsoft.Management/managementGroups/', parameters('industryPrefix'))]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').mgmtGroupDeploymentName)]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').compliantKeyVaultPolicySetDefinition]"
                },
                "parameters": {
                    "topLevelManagementGroupPrefix": {
                        "value": "[parameters('industryPrefix')]"
                    }
                }
            }
        },
        {
            // Deploying Compliant Kubernetes PolicySetDefinition
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2019-10-01",
            "name": "[variables('deploymentNames').compliantKubernetesDeploymentName]",
            "location": "[deployment().location]",
            "scope": "[concat('Microsoft.Management/managementGroups/', parameters('industryPrefix'))]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').mgmtGroupDeploymentName)]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').compliantKubernetesPolicySetDefinition]"
                },
                "parameters": {
                    "topLevelManagementGroupPrefix": {
                        "value": "[parameters('industryPrefix')]"
                    }
                }
            }
        },
        {
            // Deploying Compliant Machine Learning PolicySetDefinition
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2019-10-01",
            "name": "[variables('deploymentNames').compliantMachineLearningDeploymentName]",
            "location": "[deployment().location]",
            "scope": "[concat('Microsoft.Management/managementGroups/', parameters('industryPrefix'))]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').mgmtGroupDeploymentName)]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').compliantMachineLearningPolicySetDefinition]"
                },
                "parameters": {
                    "topLevelManagementGroupPrefix": {
                        "value": "[parameters('industryPrefix')]"
                    }
                }
            }
        },
        {
            // Deploying Compliant Network PolicySetDefinition
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2019-10-01",
            "name": "[variables('deploymentNames').compliantNetworkDeploymentName]",
            "location": "[deployment().location]",
            "scope": "[concat('Microsoft.Management/managementGroups/', parameters('industryPrefix'))]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').mgmtGroupDeploymentName)]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').compliantNetworkPolicySetDefinition]"
                },
                "parameters": {
                    "topLevelManagementGroupPrefix": {
                        "value": "[parameters('industryPrefix')]"
                    }
                }
            }
        },
        {
            // Deploying Compliant Open Ai PolicySetDefinition
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2019-10-01",
            "name": "[variables('deploymentNames').compliantOpenAiDeploymentName]",
            "location": "[deployment().location]",
            "scope": "[concat('Microsoft.Management/managementGroups/', parameters('industryPrefix'))]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').mgmtGroupDeploymentName)]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').compliantOpenAIPolicySetDefinition]"
                },
                "parameters": {
                    "topLevelManagementGroupPrefix": {
                        "value": "[parameters('industryPrefix')]"
                    }
                }
            }
        },
        {
            // Deploying Compliant Postgre SQL PolicySetDefinition
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2019-10-01",
            "name": "[variables('deploymentNames').compliantPostgreDeploymentName]",
            "location": "[deployment().location]",
            "scope": "[concat('Microsoft.Management/managementGroups/', parameters('industryPrefix'))]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').mgmtGroupDeploymentName)]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').compliantPostgrePolicySetDefinition]"
                },
                "parameters": {
                    "topLevelManagementGroupPrefix": {
                        "value": "[parameters('industryPrefix')]"
                    }
                }
            }
        },
        {
            // Deploying Compliant Service Bus PolicySetDefinition
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2019-10-01",
            "name": "[variables('deploymentNames').compliantServiceBusDeploymentName]",
            "location": "[deployment().location]",
            "scope": "[concat('Microsoft.Management/managementGroups/', parameters('industryPrefix'))]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').mgmtGroupDeploymentName)]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').compliantServiceBusPolicySetDefinition]"
                },
                "parameters": {
                    "topLevelManagementGroupPrefix": {
                        "value": "[parameters('industryPrefix')]"
                    }
                }
            }
        },
        {
            // Deploying Compliant SQL PolicySetDefinition
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2019-10-01",
            "name": "[variables('deploymentNames').compliantSqlDeploymentName]",
            "location": "[deployment().location]",
            "scope": "[concat('Microsoft.Management/managementGroups/', parameters('industryPrefix'))]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').mgmtGroupDeploymentName)]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').compliantSqlPolicySetDefinition]"
                },
                "parameters": {
                    "topLevelManagementGroupPrefix": {
                        "value": "[parameters('industryPrefix')]"
                    }
                }
            }
        },
        {
            // Deploying Compliant Storage PolicySetDefinition
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2019-10-01",
            "name": "[variables('deploymentNames').compliantStorageDeploymentName]",
            "location": "[deployment().location]",
            "scope": "[concat('Microsoft.Management/managementGroups/', parameters('industryPrefix'))]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').mgmtGroupDeploymentName)]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').compliantStoragePolicySetDefinition]"
                },
                "parameters": {
                    "topLevelManagementGroupPrefix": {
                        "value": "[parameters('industryPrefix')]"
                    }
                }
            }
        },
        {
            // Deploying Compliant Synapse PolicySetDefinition
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2019-10-01",
            "name": "[variables('deploymentNames').compliantSynapseDeploymentName]",
            "location": "[deployment().location]",
            "scope": "[concat('Microsoft.Management/managementGroups/', parameters('industryPrefix'))]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').mgmtGroupDeploymentName)]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').compliantSynapsePolicySetDefinition]"
                },
                "parameters": {
                    "topLevelManagementGroupPrefix": {
                        "value": "[parameters('industryPrefix')]"
                    }
                }
            }
        },
        {
            // Deploying Compliant Virtual Desktop PolicySetDefinition
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2019-10-01",
            "name": "[variables('deploymentNames').compliantVirtualDesktopDeploymentName]",
            "location": "[deployment().location]",
            "scope": "[concat('Microsoft.Management/managementGroups/', parameters('industryPrefix'))]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').mgmtGroupDeploymentName)]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').compliantVirtualDesktopPolicySetDefinition]"
                },
                "parameters": {
                    "topLevelManagementGroupPrefix": {
                        "value": "[parameters('industryPrefix')]"
                    }
                }
            }
        },
        {
            // Deploying Centralized Logging PolicySetDefinition
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2019-10-01",
            "name": "[variables('deploymentNames').centralizedLoggingDeploymentName]",
            "location": "[deployment().location]",
            "scope": "[concat('Microsoft.Management/managementGroups/', parameters('industryPrefix'))]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').mgmtGroupDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').compliantApimDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').compliantAppServiceDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').compliantAutomationDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').compliantBackupDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').compliantComputeDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').compliantContainerAppsDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').compliantContainerInstanceDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').compliantContainerRegistryDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').compliantCosmosDbDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').compliantDataExplorerDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').compliantDataFactoryDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').compliantKeyVaultDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').compliantEventGridDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').compliantEventHubDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').compliantKubernetesDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').compliantMachineLearningDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').compliantNetworkDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').compliantOpenAiDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').compliantPostgreDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').compliantServiceBusDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').compliantSqlDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').compliantStorageDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').compliantCorpLzDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').compliantSynapseDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').compliantVirtualDesktopDeploymentName)]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').centralizedLogsPolicySetDefinition]"
                },
                "parameters": {
                    "topLevelManagementGroupPrefix": {
                        "value": "[parameters('industryPrefix')]"
                    }
                }
            }
        },
        {
            // Deploying custom policies. Note: all policies will eventually be moved to built-in policies and codebase will be reduced
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2019-10-01",
            "name": "[variables('deploymentNames').policyDeploymentName]",
            "location": "[deployment().location]",
            "scope": "[concat('Microsoft.Management/managementGroups/', parameters('industryPrefix'))]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').mgmtGroupDeploymentName)]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').policyDefinitions]"
                },
                "parameters": {
                    "topLevelManagementGroupPrefix": {
                        "value": "[parameters('industryPrefix')]"
                    }
                }
            }
        },                      
        {
            // One of Azure's untold stories.....
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-10-01",
            "name": "[concat('Hydrating-Compliance-Step-', copyIndex())]",
            "location": "[deployment().location]",
            "scope": "[concat('Microsoft.Management/managementGroups/', parameters('industryPrefix'))]",
            "dependsOn": [
                "[variables('deploymentNames').centralizedLoggingDeploymentName]",
                "[variables('deploymentNames').policyDeploymentName]"
            ],
            "copy": {
                "batchSize": 1,
                "count": 21,
                "mode": "Serial",
                "name": "policyCompletion"
            },
            "properties": {
                "mode": "Incremental",
                "template": {
                    "$schema": "https://schema.management.azure.com/schemas/2019-08-01/managementGroupDeploymentTemplate.json#",
                    "contentVersion": "1.0.0.0",
                    "parameters": {},
                    "resources": [],
                    "outputs": {}
                }
            }
        },
        /*
            The following deployments will organize the dedicated platform subscriptions into their respective management groups
        */       
        {
            // Placing management subscription into dedicated management group
            "condition": "[not(empty(parameters('managementSubscriptionId')))]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-10-01",
            "name": "[variables('deploymentNames').mgmtSubscriptionPlacement]",
            "location": "[deployment().location]",
            "scope": "[variables('scopes').managementManagementGroup]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').mgmtGroupDeploymentName)]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').subscriptionPlacement]"
                },
                "parameters": {
                    "targetManagementGroupId": {
                        "value": "[variables('mgmtGroups').management]"
                    },
                    "subscriptionId": {
                        "value": "[parameters('managementSubscriptionId')]"
                    }
                }
            }
        },
        {
            // Placing connectivity subscription into dedicated management group
            "condition": "[not(empty(parameters('connectivitySubscriptionId')))]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-10-01",
            "name": "[variables('deploymentNames').connectivitySubscriptionPlacement]",
            "location": "[deployment().location]",
            "scope": "[variables('scopes').connectivityManagementGroup]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').mgmtGroupDeploymentName)]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').subscriptionPlacement]"
                },
                "parameters": {
                    "targetManagementGroupId": {
                        "value": "[variables('mgmtGroups').connectivity]"
                    },
                    "subscriptionId": {
                        "value": "[parameters('connectivitySubscriptionId')]"
                    }
                }
            }
        },
        {
            // Placing internet ingress subscription into dedicated management group
            "condition": "[not(empty(parameters('ingressSubscriptionId')))]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-10-01",
            "name": "[variables('deploymentNames').ingressSubscriptionPlacement]",
            "location": "[deployment().location]",
            "scope": "[variables('scopes').connectivityManagementGroup]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').mgmtGroupDeploymentName)]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').subscriptionPlacement]"
                },
                "parameters": {
                    "targetManagementGroupId": {
                        "value": "[variables('mgmtGroups').connectivity]"
                    },
                    "subscriptionId": {
                        "value": "[parameters('ingressSubscriptionId')]"
                    }
                }
            }
        }, 
        {
            // Placing internet egress subscription into dedicated management group
            "condition": "[not(empty(parameters('egressSubscriptionId')))]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-10-01",
            "name": "[variables('deploymentNames').egressSubscriptionPlacement]",
            "location": "[deployment().location]",
            "scope": "[variables('scopes').connectivityManagementGroup]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').mgmtGroupDeploymentName)]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').subscriptionPlacement]"
                },
                "parameters": {
                    "targetManagementGroupId": {
                        "value": "[variables('mgmtGroups').connectivity]"
                    },
                    "subscriptionId": {
                        "value": "[parameters('egressSubscriptionId')]"
                    }
                }
            }
        },
        {
            // Placing identity subscription into dedicated management group
            "condition": "[not(empty(parameters('identitySubscriptionId')))]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-10-01",
            "name": "[variables('deploymentNames').identitySubscriptionPlacement]",
            "location": "[deployment().location]",
            "scope": "[variables('scopes').identityManagementGroup]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').mgmtGroupDeploymentName)]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').subscriptionPlacement]"
                },
                "parameters": {
                    "targetManagementGroupId": {
                        "value": "[variables('mgmtGroups').identity]"
                    },
                    "subscriptionId": {
                        "value": "[parameters('identitySubscriptionId')]"
                    }
                }
            }
        },
        /*
            The following deployments will optionally configure the governance, security, and monitoring for the Azure platform and landing zones
        */
        {
            // Deploying Log Analytics workspace to management subscription if condition is true
            "condition": "[and(equals(parameters('enableLogAnalytics'), 'Yes'), not(empty(parameters('managementSubscriptionId'))))]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-10-01",
            "name": "[variables('deploymentNames').monitoringDeploymentName]",
            "location": "[deployment().location]",
            "subscriptionId": "[parameters('managementSubscriptionId')]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').mgmtSubscriptionPlacement)]",
                "policyCompletion"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').monitoring]"
                },
                "parameters": {
                    "rgName": {
                        "value": "[variables('platformRgNames').mgmtRg]"
                    },
                    "workspaceName": {
                        "value": "[variables('platformResourceNames').logAnalyticsWorkspace]"
                    },
                    "workspaceRegion": {
                        "value": "[deployment().location]"
                    },
                    "automationAccountName": {
                        "value": "[variables('platformResourceNames').automationAccount]"
                    },
                    "automationRegion": {
                        "value": "[deployment().location]"
                    },
                    "retentionInDays": {
                        "value": "[parameters('retentionInDays')]"
                    },
                    "enableUpdateMgmt": {
                        "value": "[parameters('enableUpdateMgmt')]"
                    },
                    "enableChangeTracking": {
                        "value": "[parameters('enableChangeTracking')]"
                    },
                    "eventHubNamespaceName": {
                        "value": "[variables('platformResourceNames').eventHubNamespace]"
                    },
                    "dataExports": {
                        "value": "[parameters('dataExports')]"
                    }
                }
            }
        },
        {
            // Deploying User Assigned identity for Policy enforcement
            "condition": "[not(empty(parameters('managementSubscriptionId')))]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-10-01",
            "name": "[variables('deploymentNames').policyIdentityDeploymentName]",
            "location": "[deployment().location]",
            "subscriptionId": "[parameters('managementSubscriptionId')]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').mgmtSubscriptionPlacement)]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').policyIdentity]"
                },
                "parameters": {
                    "resourceGroupName": {
                        "value": "[variables('platformRgNames').userAssignedIdentity]"
                    },
                    "managedIdentityName": {
                        "value": "[variables('platformResourceNames').userAssignedIdentityName]"
                    },
                    "location": {
                        "value": "[deployment().location]"
                    },
                    "managementSubscriptionId": {
                        "value": "[parameters('managementSubscriptionId')]"
                    }
                }
            }
        },
        {
            // Assigning RBAC for User Assigned identity for Azure Policy enforcement
            "condition": "[not(empty(parameters('managementSubscriptionId')))]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2019-10-01",
            "name": "[variables('deploymentNames').policyIdentityRoleAssignmentDeploymentName]",
            "location": "[deployment().location]",
            "scope": "[variables('scopes').industryRootManagementGroup]",
            "dependsOn": [
                "[variables('deploymentNames').policyIdentityDeploymentName]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').roleAssignments]"
                },
                "parameters": {
                    "topLevelManagementGroupPrefix": {
                        "value": "[parameters('industryPrefix')]"
                    },
                    "principalId": {
                        "value": "[reference(variables('deploymentNames').policyIdentityDeploymentName).outputs.identityObjectId.value]"
                    },
                    "roleDefinitionId": {
                        "value": "[variables('roleDefinitions').contributor]"
                    }
                }
            }
        },      
        {
            // Deploying Log Analytics solutions to Log Analytics workspace if condition is true
            "condition": "[and(and(not(empty(parameters('managementSubscriptionId'))), equals(parameters('enableLogAnalytics'), 'Yes')),  equals(parameters('enableLogAnalytics'), 'Yes'), or(or(or(or(or(equals(parameters('enableSecuritySolution'), 'Yes'), equals(parameters('enableAgentHealth'), 'Yes')), equals(parameters('enableChangeTracking'), 'Yes')), equals(parameters('enableUpdateMgmt'), 'Yes'), equals(parameters('enableActivityLog'), 'Yes')), equals(parameters('enableVmInsights'), 'Yes')), equals(parameters('enableServiceMap'), 'Yes'), equals(parameters('enableSqlAssessment'), 'Yes')))]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-10-01",
            "name": "[variables('deploymentNames').monitoringSolutionsDeploymentName]",
            "location": "[deployment().location]",
            "subscriptionId": "[parameters('managementSubscriptionId')]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').monitoringDeploymentName)]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').monitoringSolutions]"
                },
                "parameters": {
                    "rgName": {
                        "value": "[variables('platformRgNames').mgmtRg]"
                    },
                    "workspaceName": {
                        "value": "[variables('platformResourceNames').logAnalyticsWorkspace]"
                    },
                    "workspaceRegion": {
                        "value": "[deployment().location]"
                    },
                    "enableSecuritySolution": {
                        "value": "[parameters('enableSecuritySolution')]"
                    },
                    "enableAgentHealth": {
                        "value": "[parameters('enableAgentHealth')]"
                    },
                    "enableChangeTracking": {
                        "value": "[parameters('enableChangeTracking')]"
                    },
                    "enableUpdateMgmt": {
                        "value": "[parameters('enableUpdateMgmt')]"
                    },
                    "enableActivityLog": {
                        "value": "[parameters('enableActivityLog')]"
                    },
                    "enableVmInsights": {
                        "value": "[parameters('enableVmInsights')]"
                    },
                    "enableServiceMap": {
                        "value": "[parameters('enableServiceMap')]"
                    },
                    "enableSqlAssessment": {
                        "value": "[parameters('enableSqlAssessment')]"
                    }
                }
            }
        },
        {
            // Create storage account for NSG Flow Logs in the management subscription for networking observability
            "condition": "[and(not(empty(parameters('managementSubscriptionId'))), equals(parameters('enableNsgFlowLogs'), 'Yes'))]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-10-01",
            "name": "[variables('deploymentNames').logStorageDeploymentName]",
            "location": "[if(empty(parameters('location')), deployment().location, parameters('location'))]",
            "subscriptionId": "[parameters('managementSubscriptionId')]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').mgmtSubscriptionPlacement)]",
                "policyCompletion",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').monitoringDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').policyIdentityRoleAssignmentDeploymentName)]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').logStorageAccount]"
                },
                "parameters": {
                    "mgmtStorageRgName": {
                        "value": "[variables('platformRgNames').logNwRg]"
                    },
                    "storageAccountName": {
                        "value": "[variables('platformResourceNames').logNwStorageAccount]"
                    },
                    "storageLocation": {
                        "value": "[if(empty(parameters('location')), deployment().location, parameters('location'))]"
                    },
                    "logAnalyticsWorkspaceId": {
                        "value": "[variables('platformResourceIds').logAnalyticsResourceId]"
                    }
                }
            }
        },
        {
            // Assigning Log Analytics workspace policy to management management group if condition is true
            "condition": "[and(equals(parameters('enableLogAnalytics'), 'Yes'), not(empty(parameters('managementSubscriptionId'))))]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-10-01",
            "name": "[variables('deploymentNames').logAnalyticsPolicyDeploymentName]",
            "scope": "[variables('scopes').managementManagementGroup]",
            "location": "[deployment().location]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').mgmtSubscriptionPlacement)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').policyIdentityRoleAssignmentDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').monitoringDeploymentName)]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').logAnalyticsPolicyAssignment]"
                },
                "parameters": {
                    "rgName": {
                        "value": "[variables('platformRgNames').mgmtRg]"
                    },
                    "logAnalyticsWorkspaceName": {
                        "value": "[variables('platformResourceNames').logAnalyticsWorkspace]"
                    },
                    "workspaceRegion": {
                        "value": "[deployment().location]"
                    },
                    "automationAccountName": {
                        "value": "[variables('platformResourceNames').automationAccount]"
                    },
                    "automationRegion": {
                        "value": "[deployment().location]"
                    },
                    "retentionInDays": {
                        "value": "[parameters('retentionInDays')]"
                    },
                    "userAssignedIdentityResourceId": {
                        "value": "[variables('platformResourceIds').userAssignedIdentityResourceId]"
                    }
                }
            }
        },
        {
            // Assigning Azure Security Benchmark policy to intermediate root management group if condition is true
            "condition": "[equals(parameters('enableMcsbPolicy'), 'Yes')]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-10-01",
            "name": "[variables('deploymentNames').asbPolicyDeploymentName]",
            "scope": "[variables('scopes').industryRootManagementGroup]",
            "location": "[deployment().location]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').mgmtSubscriptionPlacement)]",
                "policyCompletion",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').monitoringDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').policyIdentityRoleAssignmentDeploymentName)]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').asbPolicyInitiative]"
                },
                "parameters": {}
            }
        },
        {
            // Assigning Azure Monitor Resource Diagnostics policy to platform management group if condition is true
            "condition": "[and(or(not(empty(parameters('singlePlatformSubscriptionId'))), not(empty(parameters('managementSubscriptionId')))), equals(parameters('enableLogAnalytics'), 'Yes'))]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-10-01",
            "name": "[variables('deploymentNames').centralizedPlatformLogsAssignmentDeploymentName]",
            "scope": "[variables('scopes').platformManagementGroup]",
            "location": "[deployment().location]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').mgmtSubscriptionPlacement)]",       
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').monitoringDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').policyIdentityRoleAssignmentDeploymentName)]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').centralizedLogsPolicyAssignment]"
                },
                "parameters": {
                    "topLevelManagementGroupPrefix": {
                        "value": "[parameters('industryPrefix')]"
                    },
                    "logAnalyticsWorkspaceId": {
                        "value": "[variables('platformResourceIds').logAnalyticsResourceId]"
                    },
                    "userAssignedIdentityResourceId": {
                        "value": "[variables('platformResourceIds').userAssignedIdentityResourceId]"
                    }
                }
            }   
        },
        {
            // Assigning Azure Monitor Resource Diagnostics policy to playground management group if condition is true
            "condition": "[and(or(not(empty(parameters('singlePlatformSubscriptionId'))), not(empty(parameters('managementSubscriptionId')))), equals(parameters('enableLogAnalytics'), 'Yes'))]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-10-01",
            "name": "[variables('deploymentNames').centralizedPlaygroundLogsAssignmentDeploymentName]",
            "scope": "[variables('scopes').playgroundManagementGroup]",
            "location": "[deployment().location]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').mgmtSubscriptionPlacement)]",         
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').monitoringDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').policyIdentityRoleAssignmentDeploymentName)]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').centralizedLogsPolicyAssignment]"
                },
                "parameters": {
                    "topLevelManagementGroupPrefix": {
                        "value": "[parameters('industryPrefix')]"
                    },
                    "logAnalyticsWorkspaceId": {
                        "value": "[variables('platformResourceIds').logAnalyticsResourceId]"
                    },
                    "userAssignedIdentityResourceId": {
                        "value": "[variables('platformResourceIds').userAssignedIdentityResourceId]"
                    }
                }
            }   
        },
        {
            // Assigning Azure Activity Diagnostics Log policy to intermediate root management group if condition is true
            "condition": "[and(or(not(empty(parameters('singlePlatformSubscriptionId'))), not(empty(parameters('managementSubscriptionId')))), equals(parameters('enableLogAnalytics'), 'Yes'))]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-10-01",
            "name": "[variables('deploymentNames').activityDiagnosticsPolicyDeploymentName]",
            "scope": "[variables('scopes').industryRootManagementGroup]",
            "location": "[deployment().location]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').monitoringDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').policyIdentityRoleAssignmentDeploymentName)]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').activityDiagnosticsPolicyAssignment]"
                },
                "parameters": {
                    "logAnalyticsResourceId": {
                        "value": "[variables('platformResourceIds').logAnalyticsResourceId]"
                    },
                    "topLevelManagementGroupPrefix": {
                        "value": "[parameters('industryPrefix')]"
                    },
                    "userAssignedIdentityResourceId": {
                        "value": "[variables('platformResourceIds').userAssignedIdentityResourceId]"
                    }
                }
            }   
        },
        {
            // Registering PolicyInsights RP to intermediate root management group if condition is true
            "condition": "[and(or(not(empty(parameters('singlePlatformSubscriptionId'))), not(empty(parameters('managementSubscriptionId')))), equals(parameters('enableLogAnalytics'), 'Yes'))]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-10-01",
            "name": "[variables('deploymentNames').policyRpRegDeploymentName]",
            "scope": "[variables('scopes').industryRootManagementGroup]",
            "location": "[deployment().location]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').monitoringDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').policyIdentityRoleAssignmentDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').activityDiagnosticsPolicyDeploymentName)]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').policyInsightsRpRegistration]"
                },
                "parameters": {
                    "topLevelManagementGroupPrefix": {
                        "value": "[parameters('industryPrefix')]"
                    },
                    "policyAssignmentIdName": {
                        "value": "Deploy-AzActivity-Log"
                    }
                }
            }   
        },
        {
            // Assigning Microsoft Defender for Cloud configuration policy initiative to intermediate root management group if condition is true
            "condition": "[and(or(not(empty(parameters('managementSubscriptionId'))), not(empty(parameters('singlePlatformSubscriptionId')))), equals(parameters('enableAsc'), 'Yes'), equals(environment().resourceManager, 'https://management.azure.com/'))]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-10-01",
            "name": "[variables('deploymentNames').ascPolicyDeploymentName]",
            "scope": "[variables('scopes').industryRootManagementGroup]",
            "location": "[deployment().location]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').monitoringDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').policyIdentityRoleAssignmentDeploymentName)]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').ascConfigPolicyInitiative]"
                },
                "parameters": {
                    "logAnalyticsResourceId": {
                        "value": "[variables('platformResourceIds').logAnalyticsResourceId]"
                    },
                    "topLevelManagementGroupPrefix": {
                        "value": "[parameters('industryPrefix')]"
                    },
                    "emailContactAsc": {
                        "value": "[parameters('emailContactAsc')]"
                    },
                    "enableAscForServers": {
                        "value": "[parameters('enableAscForServers')]"
                    },
                    "enableAscForSql": {
                        "value": "[parameters('enableAscForSql')]"
                    },
                    "enableAscForCosmosDb": {
                        "value": "[parameters('enableAscForCosmosDb')]"
                    },
                    "enableAscForSynapse": {
                        "value": "[parameters('enableAscForSynapse')]"
                    },
                    "enableAscForCSPM": {
                        "value": "[parameters('enableAscForCSPM')]"
                    },
                    "enableAscForAppServices": {
                        "value": "[parameters('enableAscForAppServices')]"
                    },
                    "enableAscForStorage": {
                        "value": "[parameters('enableAscForStorage')]"
                    },
                    "enableAscForKeyVault": {
                        "value": "[parameters('enableAscForKeyVault')]"
                    },
                    "enableAscForSqlOnVm": {
                        "value": "[parameters('enableAscForSqlOnVm')]"
                    },
                    "enableAscForContainers": {
                        "value": "[parameters('enableAscForContainers')]"
                    },
                    "enableAscForArm": {
                        "value": "[parameters('enableAscForArm')]"
                    },
                    "enableAscForDns": {
                        "value": "[parameters('enableAscForDns')]"
                    },
                    "enableAscForOssDb": {
                        "value": "[parameters('enableAscForOssDb')]"
                    },
                    "userAssignedIdentityResourceId": {
                        "value": "[variables('platformResourceIds').userAssignedIdentityResourceId]"
                    }
                }
            }   
        },
        {
            // Assigning Defender Endpoint VMs policy initiative to intermediate root management group if condition is true
            "condition": "[equals(parameters('enableDefenderEndpoint'), 'Yes')]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-10-01",
            "name": "[variables('deploymentNames').defenderEndpointPolicyDeploymentName]",
            "scope": "[variables('scopes').industryRootManagementGroup]",
            "location": "[deployment().location]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').monitoringDeploymentName)]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').defenderEndpointPolicyAssignment]"
                },
                "parameters": {
                    "enforcementMode": {
                        "value": "[if(equals(parameters('enableDefenderEndpoint'), 'Yes'), 'Default', 'DoNotEnforce')]"
                    },
                    "userAssignedIdentityResourceId": {
                        "value": "[variables('platformResourceIds').userAssignedIdentityResourceId]"
                    }
                }
            }   
        },
        {
            // Az Gov Only - Assigning Azure Security Center configuration policy initiative to intermediate root management group if condition is true
            "condition": "[and(or(not(empty(parameters('managementSubscriptionId'))), not(empty(parameters('singlePlatformSubscriptionId')))), equals(parameters('enableAsc'), 'Yes'), equals(environment().resourceManager, 'https://management.usgovcloudapi.net'))]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-10-01",
            "name": "[variables('deploymentNames').ascGovPolicyDeploymentName]",
            "scope": "[variables('scopes').industryRootManagementGroup]",
            "location": "[deployment().location]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').monitoringDeploymentName)]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').govAscPolicyAssignment]"
                },
                "parameters": {
                    "logAnalyticsResourceId": {
                        "value": "[variables('platformResourceIds').logAnalyticsResourceId]"
                    },
                    "topLevelManagementGroupPrefix": {
                        "value": "[parameters('industryPrefix')]"
                    },
                    "emailContactAsc": {
                        "value": "[parameters('emailContactAsc')]"
                    },
                    "enableAscForServers": {
                        "value": "[parameters('enableAscForServers')]"
                    },
                    "enableAscForSql": {
                        "value": "[parameters('enableAscForSql')]"
                    },
                    "enableAscForStorage": {
                        "value": "[parameters('enableAscForStorage')]"
                    },
                    "enableAscForContainers": {
                        "value": "[parameters('enableAscForContainers')]"
                    },
                    "enableAscForArm": {
                        "value": "[parameters('enableAscForArm')]"
                    },
                    "enableAscForDns": {
                        "value": "[parameters('enableAscForDns')]"
                    }
                }
            }   
        },        
        /*
            The following optional deployment will configure virtual network hub into the connectivity subscription
        */
        {
            // Creating resource group for DDoS Standard Protection
            "condition": "[and(equals(parameters('enableDdoS'), 'Yes'), not(empty(parameters('connectivitySubscriptionId'))))]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-10-01",
            "name": "[variables('deploymentNames').ddosRgDeploymentName]",
            "subscriptionId": "[parameters('connectivitySubscriptionId')]",
            "location": "[deployment().location]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').connectivitySubscriptionPlacement)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').activityDiagnosticsPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').asbPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').ascPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').ascGovPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').centralizedPlatformLogsAssignmentDeploymentName)]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').resourceGroup]"
                },
                "parameters": {
                    "rgName": {
                        "value": "[variables('platformRgNames').ddosRg]"
                    },
                    "location": {
                        "value": "[parameters('location')]"
                    }
                }
            }
        },
        {
            // Creating DDoS protection plan into the connectivity subscription
            "condition": "[and(equals(parameters('enableDdoS'), 'Yes'), not(empty(parameters('connectivitySubscriptionId'))))]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-10-01",
            "name": "[variables('deploymentNames').ddosDeploymentName]",
            "subscriptionId": "[parameters('connectivitySubscriptionId')]",
            "resourceGroup": "[variables('platformRgNames').ddosRg]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').ddosRgDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').activityDiagnosticsPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').centralizedPlatformLogsAssignmentDeploymentName)]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').ddosProtection]"
                },
                "parameters": {
                    "ddosName": {
                        "value": "[variables('platformResourceNames').ddosName]"
                    },
                    "location": {
                        "value": "[parameters('location')]"
                    }
                }
            }
        },
        {
            // Assigning DDoS Policy to enforce DDoS on virtual networks if condition evaluates to true
            "condition": "[and(or(equals(parameters('enableDdoS'), 'Yes'), equals(parameters('enableDdoS'), 'Audit')), not(empty(parameters('connectivitySubscriptionId'))))]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-10-01",
            "name": "[variables('deploymentNames').ddosHubPolicyDeploymentName]",
            "scope": "[variables('scopes').connectivityManagementGroup]",
            "location": "[deployment().location]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').ddosDeploymentName)]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').ddosPolicyAssignment]"
                },
                "parameters": {
                    "ddosPlanResourceId": {
                        "value": "[variables('platformResourceIds').ddosProtectionResourceId]"
                    },
                    "topLevelManagementGroupPrefix": {
                        "value": "[variables('deterministicRoleAssignmentGuids').ddosForConnectivity]"
                    },
                    "enforcementMode": {
                        "value": "[if(equals(parameters('enableDdoS'), 'Yes'), 'Default', 'DoNotEnforce')]"
                    }
                }
            }   
        },
        {
            // Creating the virtual network hub (hub and spoke)
            "condition": "[and(not(empty(parameters('connectivitySubscriptionId'))),equals(parameters('enableHub'), 'vhub'))]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-10-01",
            "scope": "[variables('scopes').connectivityManagementGroup]",
            "name": "[variables('deploymentNames').vnetConnectivityHubDeploymentName]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').connectivitySubscriptionPlacement)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').activityDiagnosticsPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').centralizedPlatformLogsAssignmentDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').asbPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').ascPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').ascGovPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').ddosDeploymentName)]"
            ],
            "location": "[deployment().location]",
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').vnetConnectivityHub]"
                },
                "parameters": {
                    "topLevelManagementGroupPrefix": {
                        "value": "[parameters('industryPrefix')]"
                    },
                    "ddosPlanResourceId": {
                        "value": "[variables('platformResourceIds').ddosProtectionResourceId]"
                    },
                    "enableHub": {
                        "value": "[parameters('enableHub')]"
                    },
                    "enableAzFw": {
                        "value": "[parameters('enableAzFw')]"
                    },
                    "addressPrefix": {
                        "value": "[parameters('addressPrefix')]"
                    },
                    "enableVpnGw": {
                        "value": "[parameters('enableVpnGw')]"
                    },
                    "enableErGw": {
                        "value": "[parameters('enableErGw')]"
                    },
                    "enableDdoS": {
                        "value": "[parameters('enableDdoS')]"
                    },
                    "location": {
                        "value": "[parameters('location')]"
                    },
                    "connectivitySubscriptionId": {
                        "value": "[parameters('connectivitySubscriptionId')]"
                    },
                    "subnetMaskForAzFw": {
                        "value": "[parameters('subnetMaskForAzFw')]"
                    },
                    "subnetMaskForGw": {
                        "value": "[parameters('subnetMaskForGw')]"
                    },
                    "subnetMaskForDnsResolverInbound": {
                        "value": "[parameters('subnetMaskForDnsResolverInbound')]"
                    },
                    "subnetMaskForDnsResolverOutbound": {
                        "value": "[parameters('subnetMaskForDnsResolverOutbound')]"
                    },
                    "logAnalyticsWorkspaceId": {
                        "value": "[if(equals(parameters('enableLogAnalytics'), 'Yes'), variables('platformResourceIds').logAnalyticsResourceId, '')]"
                    },
                    "firewallSku": {
                        "value": "[parameters('firewallSku')]"
                    },
                    "firewallZones": {
                        "value": "[parameters('firewallZones')]"
                    },
                    "enableAzFwDnsProxy": {
                        "value": "[parameters('enableAzFwDnsProxy')]"
                    },
                    "gwRegionalOrAz": {
                        "value": "[parameters('gwRegionalOrAz')]"
                    },
                    "gwAzSku": {
                        "value": "[parameters('gwAzSku')]"
                    },
                    "gwRegionalSku": {
                        "value": "[parameters('gwRegionalSku')]"
                    },
                    "erRegionalOrAz": {
                        "value": "[parameters('erRegionalOrAz')]"
                    },
                    "erAzSku": {
                        "value": "[parameters('erAzSku')]"
                    },
                    "erRegionalSku": {
                        "value": "[parameters('erRegionalSku')]"
                    },
                    "enableAvnm": {
                        "value": "[parameters('enableAvnm')]"
                    }
                }
            }
        },
        {
            // Creating the ingress subscription
            "condition": "[and(not(empty(parameters('ingressSubscriptionId'))),equals(parameters('enableHub'), 'vhub'))]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-10-01",
            "scope": "[variables('scopes').connectivityManagementGroup]",
            "name": "[variables('deploymentNames').ingressDeploymentName]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').connectivitySubscriptionPlacement)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').activityDiagnosticsPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').centralizedPlatformLogsAssignmentDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').asbPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').ascPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').ascGovPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').ddosDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').vnetConnectivityHubDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').ingressSubscriptionPlacement)]"
            ],
            "location": "[deployment().location]",
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').ingressAndEgress]"
                },
                "parameters": {
                    "topLevelManagementGroupPrefix": {
                        "value": "[parameters('industryPrefix')]"
                    },
                    "ddosPlanResourceId": {
                        "value": "[variables('platformResourceIds').ddosProtectionResourceId]"
                    },
                    "enableHub": {
                        "value": "[parameters('enableHub')]"
                    },
                    "enableAzFw": {
                        "value": "[parameters('enableAzFwIngress')]"
                    },
                    "addressPrefix": {
                        "value": "[parameters('addressPrefixIngress')]"
                    },
                    "enableDdoS": {
                        "value": "[parameters('enableDdoS')]"
                    },
                    "location": {
                        "value": "[parameters('location')]"
                    },
                    "subscriptionId": {
                        "value": "[parameters('ingressSubscriptionId')]"
                    },
                    "subnetMaskForAzFw": {
                        "value": "[parameters('subnetMaskForAzFwIngress')]"
                    },
                    "logAnalyticsWorkspaceId": {
                        "value": "[if(equals(parameters('enableLogAnalytics'), 'Yes'), variables('platformResourceIds').logAnalyticsResourceId, '')]"
                    },
                    "firewallSku": {
                        "value": "[parameters('firewallSkuIngress')]"
                    },
                    "firewallZones": {
                        "value": "[parameters('firewallZonesIngress')]"
                    },
                    "enableAzFwDnsProxy": {
                        "value": "[parameters('enableAzFwDnsProxy')]"
                    },
                    "ingressOrEgress": {
                        "value": "ingress"
                    }
                }
            }
        },
        {
            // Creating the egress subscription
            "condition": "[and(not(empty(parameters('egressSubscriptionId'))),equals(parameters('enableHub'), 'vhub'))]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-10-01",
            "scope": "[variables('scopes').connectivityManagementGroup]",
            "name": "[variables('deploymentNames').egressDeploymentName]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').connectivitySubscriptionPlacement)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').activityDiagnosticsPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').centralizedPlatformLogsAssignmentDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').asbPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').ascPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').ascGovPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').ddosDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').vnetConnectivityHubDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').egressSubscriptionPlacement)]"
            ],
            "location": "[deployment().location]",
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').ingressAndEgress]"
                },
                "parameters": {
                    "topLevelManagementGroupPrefix": {
                        "value": "[parameters('industryPrefix')]"
                    },
                    "ddosPlanResourceId": {
                        "value": "[variables('platformResourceIds').ddosProtectionResourceId]"
                    },
                    "enableHub": {
                        "value": "[parameters('enableHub')]"
                    },
                    "enableAzFw": {
                        "value": "[parameters('enableAzFwEgress')]"
                    },
                    "addressPrefix": {
                        "value": "[parameters('addressPrefixEgress')]"
                    },
                    "enableDdoS": {
                        "value": "[parameters('enableDdoS')]"
                    },
                    "location": {
                        "value": "[parameters('location')]"
                    },
                    "subscriptionId": {
                        "value": "[parameters('egressSubscriptionId')]"
                    },
                    "subnetMaskForAzFw": {
                        "value": "[parameters('subnetMaskForAzFwEgress')]"
                    },
                    "logAnalyticsWorkspaceId": {
                        "value": "[if(equals(parameters('enableLogAnalytics'), 'Yes'), variables('platformResourceIds').logAnalyticsResourceId, '')]"
                    },
                    "firewallSku": {
                        "value": "[parameters('firewallSkuEgress')]"
                    },
                    "firewallZones": {
                        "value": "[parameters('firewallZonesEgress')]"
                    },
                    "enableAzFwDnsProxy": {
                        "value": "[parameters('enableAzFwDnsProxy')]"
                    },
                    "ingressOrEgress": {
                        "value": "egress"
                    }
                }
            }
        },
        {
            // Creating the virtual network hub (with NVA)
            "condition": "[and(not(empty(parameters('connectivitySubscriptionId'))),equals(parameters('enableHub'), 'nva'))]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-10-01",
            "scope": "[variables('scopes').connectivityManagementGroup]",
            "name": "[variables('deploymentNames').nvaConnectivityHubDeploymentName]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').connectivitySubscriptionPlacement)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').activityDiagnosticsPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').centralizedPlatformLogsAssignmentDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').asbPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').ascPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').ascGovPolicyDeploymentName)]",                
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').ddosDeploymentName)]"
            ],
            "location": "[deployment().location]",
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').nvaConnectivityHub]"
                },
                "parameters": {
                    "topLevelManagementGroupPrefix": {
                        "value": "[parameters('industryPrefix')]"
                    },
                    "ddosPlanResourceId": {
                        "value": "[variables('platformResourceIds').ddosProtectionResourceId]"
                    },
                    "enableHub": {
                        "value": "[parameters('enableHub')]"
                    },
                    "addressPrefix": {
                        "value": "[parameters('addressPrefix')]"
                    },
                    "enableVpnGw": {
                        "value": "[parameters('enableVpnGw')]"
                    },
                    "enableErGw": {
                        "value": "[parameters('enableErGw')]"
                    },
                    "enableDdoS": {
                        "value": "[parameters('enableDdoS')]"
                    },
                    "location": {
                        "value": "[parameters('location')]"
                    },
                    "connectivitySubscriptionId": {
                        "value": "[parameters('connectivitySubscriptionId')]"
                    },
                    "subnetMaskForGw": {
                        "value": "[parameters('subnetMaskForGw')]"
                    },
                    "gwRegionalOrAz": {
                        "value": "[parameters('gwRegionalOrAz')]"
                    },
                    "gwAzSku": {
                        "value": "[parameters('gwAzSku')]"
                    },
                    "gwRegionalSku": {
                        "value": "[parameters('gwRegionalSku')]"
                    },
                    "erRegionalOrAz": {
                        "value": "[parameters('erRegionalOrAz')]"
                    },
                    "erAzSku": {
                        "value": "[parameters('erAzSku')]"
                    },
                    "erRegionalSku": {
                        "value": "[parameters('erRegionalSku')]"
                    }
                }
            }
        },        
        {
            // Creating the VWAN network hub (Microsoft managed)
            "condition": "[and(not(empty(parameters('connectivitySubscriptionId'))),equals(parameters('enableHub'), 'vwan'))]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-10-01",
            "scope": "[variables('scopes').connectivityManagementGroup]",
            "name": "[variables('deploymentNames').vwanConnectivityHubDeploymentName]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').connectivitySubscriptionPlacement)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').activityDiagnosticsPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').centralizedPlatformLogsAssignmentDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').asbPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').ascPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').ascGovPolicyDeploymentName)]",                
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').ddosDeploymentName)]"
            ],
            "location": "[deployment().location]",
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').vwanConnectivityHub]"
                },
                "parameters": {
                    "topLevelManagementGroupPrefix": {
                        "value": "[parameters('industryPrefix')]"
                    },
                    "enableHub": {
                        "value": "[parameters('enableHub')]"
                    },
                    "enableAzFw": {
                        "value": "[parameters('enableAzFw')]"
                    },
                    "firewallSku": {
                        "value": "[parameters('firewallSku')]"
                    },
                    "addressPrefix": {
                        "value": "[parameters('addressPrefix')]"
                    },
                    "enableVpnGw": {
                        "value": "[parameters('enableVpnGw')]"
                    },
                    "enableErGw": {
                        "value": "[parameters('enableErGw')]"
                    },
                    "location": {
                        "value": "[parameters('location')]"
                    },
                    "connectivitySubscriptionId": {
                        "value": "[parameters('connectivitySubscriptionId')]"
                    },
                    "expressRouteScaleUnit": {
                        "value": "[parameters('expressRouteScaleUnit')]"
                    },
                    "vpnGateWayScaleUnit": {
                        "value": "[parameters('vpnGateWayScaleUnit')]"
                    }
                }
            }
        },
        {
            // Creating resource group for Private DNS Zones
            "condition": "[and(equals(parameters('enablePrivateDnsZones'), 'Yes'), not(empty(parameters('connectivitySubscriptionId'))))]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-10-01",
            "name": "[variables('deploymentNames').privateDnsZoneRgDeploymentName]",
            "subscriptionId": "[parameters('connectivitySubscriptionId')]",
            "location": "[deployment().location]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').connectivitySubscriptionPlacement)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').activityDiagnosticsPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').asbPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').ascPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').ascGovPolicyDeploymentName)]",                
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').centralizedPlatformLogsAssignmentDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').vnetConnectivityHubDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').vwanConnectivityHubDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').nvaConnectivityHubDeploymentName)]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').resourceGroup]"
                },
                "parameters": {
                    "rgName": {
                        "value": "[variables('platformRgNames').privateDnsRg]"
                    },
                    "location": {
                        "value": "[parameters('location')]"
                    }
                }
            }
        },
        {
            // Creating Private DNS Zones into the connectivity subscription
            "condition": "[and(equals(parameters('enablePrivateDnsZones'), 'Yes'), not(empty(parameters('connectivitySubscriptionId'))))]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-10-01",
            "name": "[concat(variables('deploymentNames').privateDnsZonesDeploymentName, copyIndex())]",
            "subscriptionId": "[parameters('connectivitySubscriptionId')]",
            "resourceGroup": "[variables('platformRgNames').privateDnsRg]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').privateDnsZoneRgDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').activityDiagnosticsPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').centralizedPlatformLogsAssignmentDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').vnetConnectivityHubDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').vwanConnectivityHubDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').nvaConnectivityHubDeploymentName)]"
            ],
            "copy": {
                "name": "dnsZones",
                "count": "[length(variables('privateDnsZones'))]"
            },
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').privateDnsZones]"
                },
                "parameters": {
                    "privateDnsZoneName": {
                        "value": "[concat(variables('privateDnsZones')[copyIndex()])]"
                    },
                    "connectivityHubResourceId": {
                        "value": "[variables('platformResourceIds').vNetHubResourceId]"
                    }
                }
            }
        },
        {   // Creating Policy Assignment for NSG Flow Logs Policy on Platform scope
            "condition": "[and(equals(parameters('enableNetworkWatcher'), 'Yes'), equals(parameters('enableNsgFlowLogs'), 'Yes'))]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2021-04-01",
            "location": "[if(empty(parameters('location')), deployment().location, parameters('location'))]",
            "name": "[variables('deploymentNames').nsgFlowLogsPlatformPolicyAssignment]",
            "scope": "[variables('scopes').platformManagementGroup]",
            "dependsOn": [
                "policyCompletion",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').monitoringDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').policyIdentityRoleAssignmentDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').logStorageDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').nwDeploymentName)]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').nsgFlowLogPolicyAssignment]"
                },
                "parameters": {
                    "enforcementMode": {
                        "value": "[if(equals(parameters('enableNsgFlowLogs'), 'Yes'), 'Default', 'DoNotEnforce')]"
                    },
                    "storageId": {
                        "value": "[variables('platformResourceIds').logStorageResourceId]"
                    },
                    "workspaceId": {
                        "value": "[variables('platformResourceIds').logAnalyticsResourceId]"
                    },
                    "workspaceResourceId": {
                        "value": "[variables('platformResourceIds').logAnalyticsResourceId]"
                    },
                    "workspaceRegion": {
                        "value": "[deployment().location]"
                    },
                    "nsgRegion": {
                        "value": "[if(empty(parameters('location')), deployment().location, parameters('location'))]"
                    },
                    "networkWatcherName": {
                        "value": "[concat('NetworkWatcher_', parameters('location'))]"
                    },
                    "networkWatcherRg": {
                        "value": "NetworkWatcherRG"
                    },
                    "userAssignedIdentityResourceId": {
                        "value": "[variables('platformResourceIds').userAssignedIdentityResourceId]"
                    }
                }
            }
        },
        {   // Creating Policy Exemption for storage accounts for NSG in management management group scope
            "condition": "[and(equals(parameters('enableMcsbPolicy'), 'Yes'), equals(parameters('enableNsgFlowLogs'), 'Yes'))]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2021-04-01",
            "location": "[if(empty(parameters('location')), deployment().location, parameters('location'))]",
            "name": "[variables('deploymentNames').nsgFlowLogPolicyExemption]",
            "scope": "[variables('scopes').platformManagementGroup]",
            "dependsOn": [
                "policyCompletion",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').monitoringDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').logStorageDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').nwDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').asbPolicyDeploymentName)]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').nsgFlowLogPolicyExemption]"
                },
                "parameters": {
                    "topLevelManagementGroupPrefix": {
                        "value": "[parameters('industryPrefix')]"
                    }
                }
            }
        },               
        {   // Creating Network Watcher on Connectivity subscription
            "condition": "[and(not(empty(parameters('connectivitySubscriptionId'))), equals(parameters('enableNetworkWatcher'), 'Yes'))]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2021-04-01",
            "location": "[deployment().location]",
            "name": "[variables('deploymentNames').nwDeploymentName]",
            "subscriptionId": "[parameters('connectivitySubscriptionId')]",
            "dependsOn": [
                "policyCompletion",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').monitoringDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').logStorageDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').connectivitySubscriptionPlacement)]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').nwDeployment]"
                },
                "parameters": {
                    "location": {
                        "value": "[if(empty(parameters('location')), deployment().location, parameters('location'))]"
                    }
                }
            }
        },
        /*
            The following deployments will deploy and configure the Azure policy governance for the landing zones
        */
        {   // Creating Policy Assignment for allowed Azure Regions on the Landing Zone management group
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2021-04-01",
            "location": "[if(empty(parameters('location')), deployment().location, parameters('location'))]",
            "name": "[variables('deploymentNames').allowedRegionsDeploymentName]",
            "scope": "[variables('scopes').lzsManagementGroup]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').policyIdentityRoleAssignmentDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').monitoringDeploymentName)]",
                "policyCompletion",
                "dnsZones"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').allowedRegionsPolicyAssignment]"
                },
                "parameters": {
                    "topLevelManagementGroupPrefix": {
                        "value": "[parameters('industryPrefix')]"
                    },
                    "listOfAllowedLocations": {
                        "value": [
                            "Global",
                            "[if(empty(parameters('location')), deployment().location, parameters('location'))]"
                        ]
                    }
                    // Add parameter to toggle DINE to 'disabled' of condition is not met so the policy does not show up as non-compliant
                }
            }
        },
        {   // Creating Policy Assignment for allowed Azure Regions for Rgs on the Landing Zone management group
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2021-04-01",
            "location": "[if(empty(parameters('location')), deployment().location, parameters('location'))]",
            "name": "[variables('deploymentNames').allowedRgRegionsDeploymentName]",
            "scope": "[variables('scopes').lzsManagementGroup]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').policyIdentityRoleAssignmentDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').monitoringDeploymentName)]",
                "policyCompletion",
                "dnsZones"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').allowedRgRegionsPolicyAssignment]"
                },
                "parameters": {
                    "listOfAllowedLocations": {
                        "value": [
                            "[if(empty(parameters('location')), deployment().location, parameters('location'))]"
                        ]
                    }
                    // Add parameter to toggle DINE to 'disabled' of condition is not met so the policy does not show up as non-compliant
                }
            }
        },
        {   // Creating Policy Assignment for allowed Azure Resources on Landing Zone management group
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2021-04-01",
            "location": "[if(empty(parameters('location')), deployment().location, parameters('location'))]",
            "name": "[variables('deploymentNames').allowedResourcesDeploymentName]",
            "scope": "[variables('scopes').lzsManagementGroup]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').policyIdentityRoleAssignmentDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').monitoringDeploymentName)]",
                "policyCompletion",
                "dnsZones"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').allowedResourcesPolicyAssignment]"
                },
                "parameters": {
                    "listOfResourceTypesAllowed": {
                        "value": "[variables('allowedResourcesMap')]"
                    }
                    // Add parameter to toggle DINE to 'disabled' of condition is not met so the policy does not show up as non-compliant
                }
            }
        },       
        {   // Creating Policy Assignment for NSG Flow Logs Policy on Landing zone scope
            "condition": "[and(equals(parameters('enableNetworkWatcher'), 'Yes'), equals(parameters('enableNsgFlowLogs'), 'Yes'))]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2021-04-01",
            "location": "[if(empty(parameters('location')), deployment().location, parameters('location'))]",
            "name": "[variables('deploymentNames').nsgFlowLogsLzPolicyAssignment]",
            "scope": "[variables('scopes').lzsManagementGroup]",
            "dependsOn": [
                "policyCompletion",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').nwDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').policyIdentityRoleAssignmentDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').monitoringDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').logStorageDeploymentName)]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').nsgFlowLogPolicyAssignment]"
                },
                "parameters": {
                    "enforcementMode": {
                        "value": "[if(equals(parameters('enableNsgFlowLogs'), 'Yes'), 'Default', 'DoNotEnforce')]"
                    },
                    "storageId": {
                        "value": "[variables('platformResourceIds').logStorageResourceId]"
                    },
                    "workspaceId": {
                        "value": "[variables('platformResourceIds').logAnalyticsResourceId]"
                    },
                    "workspaceResourceId": {
                        "value": "[variables('platformResourceIds').logAnalyticsResourceId]"
                    },
                    "workspaceRegion": {
                        "value": "[deployment().location]"
                    },
                    "nsgRegion": {
                        "value": "[if(empty(parameters('location')), deployment().location, parameters('location'))]"
                    },
                    "networkWatcherName": {
                        "value": "[concat('NetworkWatcher_', parameters('location'))]"
                    },
                    "networkWatcherRg": {
                        "value": "NetworkWatcherRG"
                    },
                    "userAssignedIdentityResourceId": {
                        "value": "[variables('platformResourceIds').userAssignedIdentityResourceId]"
                    }
                }
            }
        },
        {   // Creating Policy Assignment API management to Landing Zone scope
            "condition": "[contains(parameters('compliantAzureServices'), 'Apim')]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2021-04-01",
            "location": "[if(empty(parameters('location')), deployment().location, parameters('location'))]",
            "name": "[variables('deploymentNames').compliantApimAssignmentDeploymentName]",
            "scope": "[variables('scopes').lzsManagementGroup]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').policyIdentityRoleAssignmentDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').compliantApimDeploymentName)]",
                "policyCompletion",
                "dnsZones",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').monitoringDeploymentName)]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').compliantApimPolicyAssignment]"
                },
                "parameters": {
                    "topLevelManagementGroupPrefix": {
                        "value": "[parameters('industryPrefix')]"
                    },
                    "apimDiagnostics": {
                        "value": "[if(equals(parameters('enableLogAnalytics'), 'Yes'), 'DeployIfNotExists', 'Disabled')]"
                    },
                    "apimLogAnalyticsWorkspaceId": {
                        "value": "[if(equals(parameters('enableLogAnalytics'), 'Yes'), variables('platformResourceIds').logAnalyticsResourceId, '')]"
                    },
                    "userAssignedIdentityResourceId": {
                        "value": "[variables('platformResourceIds').userAssignedIdentityResourceId]"
                    }
                    // Add parameter to toggle DINE to 'disabled' of condition is not met so the policy does not show up as non-compliant
                }
            }
        }, 
        {   // Creating Policy Assignment App Service to Landing Zone scope
            "condition": "[contains(parameters('compliantAzureServices'), 'AppService')]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2021-04-01",
            "location": "[if(empty(parameters('location')), deployment().location, parameters('location'))]",
            "name": "[variables('deploymentNames').compliantAppServiceAssignmentDeploymentName]",
            "scope": "[variables('scopes').lzsManagementGroup]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').policyIdentityRoleAssignmentDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').compliantAppServiceDeploymentName)]",
                "dnsZones",
                "policyCompletion",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').monitoringDeploymentName)]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').compliantAppServicePolicyAssignment]"
                },
                "parameters": {
                    "topLevelManagementGroupPrefix": {
                        "value": "[parameters('industryPrefix')]"
                    },
                    "appServiceDiagnostics": {
                        "value": "[if(equals(parameters('enableLogAnalytics'), 'Yes'), 'DeployIfNotExists', 'Disabled')]"
                    },
                    "appServiceLogAnalyticsWorkspaceId": {
                        "value": "[if(equals(parameters('enableLogAnalytics'), 'Yes'), variables('platformResourceIds').logAnalyticsResourceId, '')]"
                    },
                    "functionDiagnostics": {
                        "value": "[if(equals(parameters('enableLogAnalytics'), 'Yes'), 'DeployIfNotExists', 'Disabled')]"
                    },
                    "functionLogAnalyticsWorkspaceId": {
                        "value": "[if(equals(parameters('enableLogAnalytics'), 'Yes'), variables('platformResourceIds').logAnalyticsResourceId, '')]"
                    },                    
                    "userAssignedIdentityResourceId": {
                        "value": "[variables('platformResourceIds').userAssignedIdentityResourceId]"
                    }
                    // Add parameter to toggle DINE to 'disabled' of condition is not met so the policy does not show up as non-compliant
                }
            }
        },
        {   // Creating Policy Assignment Compliant Automation Account to Landing Zone scope
            "condition": "[contains(parameters('compliantAzureServices'), 'Automation')]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2021-04-01",
            "location": "[if(empty(parameters('location')), deployment().location, parameters('location'))]",
            "name": "[variables('deploymentNames').compliantAutomationAssignmentDeploymentName]",
            "scope": "[variables('scopes').lzsManagementGroup]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').policyIdentityRoleAssignmentDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').compliantAutomationDeploymentName)]",
                "dnsZones",
                "policyCompletion",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').monitoringDeploymentName)]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').compliantAutomationPolicyAssignment]"
                },
                "parameters": {
                    "topLevelManagementGroupPrefix": {
                        "value": "[parameters('industryPrefix')]"
                    },
                    "aaDiagnostics": {
                        "value": "[if(equals(parameters('enableLogAnalytics'), 'Yes'), 'DeployIfNotExists', 'Disabled')]"
                    },
                    "aaLogAnalyticsWorkspaceId": {
                        "value": "[if(equals(parameters('enableLogAnalytics'), 'Yes'), variables('platformResourceIds').logAnalyticsResourceId, '')]"
                    },
                    "userAssignedIdentityResourceId": {
                        "value": "[variables('platformResourceIds').userAssignedIdentityResourceId]"
                    }
                    // Add parameter to toggle DINE to 'disabled' of condition is not met so the policy does not show up as non-compliant
                }
            }
        },
        {   // Creating Policy Assignment Compliant Backup to Landing Zone scope
            "condition": "[contains(parameters('compliantAzureServices'), 'Backup')]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2021-04-01",
            "location": "[if(empty(parameters('location')), deployment().location, parameters('location'))]",
            "name": "[variables('deploymentNames').compliantBackupAssignmentDeploymentName]",
            "scope": "[variables('scopes').lzsManagementGroup]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').policyIdentityRoleAssignmentDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').compliantBackupDeploymentName)]",
                "dnsZones",
                "policyCompletion",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').monitoringDeploymentName)]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').compliantBackupPolicyAssignment]"
                },
                "parameters": {
                    "topLevelManagementGroupPrefix": {
                        "value": "[parameters('industryPrefix')]"
                    },
                    "asrLogAnalyticsWorkspaceId": {
                        "value": "[if(equals(parameters('enableLogAnalytics'), 'Yes'), variables('platformResourceIds').logAnalyticsResourceId, '')]"
                    },
                    "userAssignedIdentityResourceId": {
                        "value": "[variables('platformResourceIds').userAssignedIdentityResourceId]"
                    }
                    // Add parameter to toggle DINE to 'disabled' of condition is not met so the policy does not show up as non-compliant
                }
            }
        },
        {   // Creating Policy Assignment Compliant Compute to Landing Zone scope
            "condition": "[contains(parameters('compliantAzureServices'), 'Compute')]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2021-04-01",
            "location": "[if(empty(parameters('location')), deployment().location, parameters('location'))]",
            "name": "[variables('deploymentNames').compliantComputeAssignmentDeploymentName]",
            "scope": "[variables('scopes').lzsManagementGroup]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').policyIdentityRoleAssignmentDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').compliantComputeDeploymentName)]",
                "dnsZones",
                "policyCompletion",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').monitoringDeploymentName)]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').compliantComputePolicyAssignment]"
                },
                "parameters": {
                    "topLevelManagementGroupPrefix": {
                        "value": "[parameters('industryPrefix')]"
                    },
                    "userAssignedIdentityResourceId": {
                        "value": "[variables('platformResourceIds').userAssignedIdentityResourceId]"
                    }
                    // Add parameter to toggle DINE to 'disabled' of condition is not met so the policy does not show up as non-compliant
                }
            }
        },
        {   // Creating Policy Assignment Compliant Container Apps to Landing Zone scope
            "condition": "[contains(parameters('compliantAzureServices'), 'ContainerApps')]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2021-04-01",
            "location": "[if(empty(parameters('location')), deployment().location, parameters('location'))]",
            "name": "[variables('deploymentNames').compliantContainerAppsAssignmentDeploymentName]",
            "scope": "[variables('scopes').lzsManagementGroup]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').policyIdentityRoleAssignmentDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').compliantContainerAppsDeploymentName)]",
                "dnsZones",
                "policyCompletion",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').monitoringDeploymentName)]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').compliantContainerAppsPolicyAssignment]"
                },
                "parameters": {
                    "topLevelManagementGroupPrefix": {
                        "value": "[parameters('industryPrefix')]"
                    },
                    "userAssignedIdentityResourceId": {
                        "value": "[variables('platformResourceIds').userAssignedIdentityResourceId]"
                    }
                    // Add parameter to toggle DINE to 'disabled' of condition is not met so the policy does not show up as non-compliant
                }
            }
        },
        {   // Creating Policy Assignment Compliant Container Instance to Landing Zone scope
            "condition": "[contains(parameters('compliantAzureServices'), 'ContainerInstance')]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2021-04-01",
            "location": "[if(empty(parameters('location')), deployment().location, parameters('location'))]",
            "name": "[variables('deploymentNames').compliantContainerInstanceAssignmentDeploymentName]",
            "scope": "[variables('scopes').lzsManagementGroup]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').policyIdentityRoleAssignmentDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').compliantContainerInstanceDeploymentName)]",
                "dnsZones",
                "policyCompletion",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').monitoringDeploymentName)]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').compliantContainerInstancePolicyAssignment]"
                },
                "parameters": {
                    "topLevelManagementGroupPrefix": {
                        "value": "[parameters('industryPrefix')]"
                    },
                    "userAssignedIdentityResourceId": {
                        "value": "[variables('platformResourceIds').userAssignedIdentityResourceId]"
                    }
                    // Add parameter to toggle DINE to 'disabled' of condition is not met so the policy does not show up as non-compliant
                }
            }
        },
        {   // Creating Policy Assignment Compliant Container Registry to Landing Zone scope
            "condition": "[contains(parameters('compliantAzureServices'), 'ContainerRegistry')]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2021-04-01",
            "location": "[if(empty(parameters('location')), deployment().location, parameters('location'))]",
            "name": "[variables('deploymentNames').compliantContainerRegistryAssignmentDeploymentName]",
            "scope": "[variables('scopes').lzsManagementGroup]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').policyIdentityRoleAssignmentDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').compliantContainerRegistryDeploymentName)]",
                "dnsZones",
                "policyCompletion",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').monitoringDeploymentName)]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').compliantContainerRegistryPolicyAssignment]"
                },
                "parameters": {
                    "topLevelManagementGroupPrefix": {
                        "value": "[parameters('industryPrefix')]"
                    },
                    "containerRegistryDiagnostics": {
                        "value": "[if(equals(parameters('enableLogAnalytics'), 'Yes'), 'DeployIfNotExists', 'Disabled')]"
                    },
                    "containerRegistryLogAnalyticsWorkspaceId": {
                        "value": "[if(equals(parameters('enableLogAnalytics'), 'Yes'), variables('platformResourceIds').logAnalyticsResourceId, '')]"
                    },
                    "userAssignedIdentityResourceId": {
                        "value": "[variables('platformResourceIds').userAssignedIdentityResourceId]"
                    }
                    // Add parameter to toggle DINE to 'disabled' of condition is not met so the policy does not show up as non-compliant
                }
            }
        },
        {   // Creating Policy Assignment Compliant Cosmos Db to Landing Zone scope
            "condition": "[contains(parameters('compliantAzureServices'), 'CosmosDb')]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2021-04-01",
            "location": "[if(empty(parameters('location')), deployment().location, parameters('location'))]",
            "name": "[variables('deploymentNames').compliantCosmosDbAssignmentDeploymentName]",
            "scope": "[variables('scopes').lzsManagementGroup]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').policyIdentityRoleAssignmentDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').compliantCosmosDbDeploymentName)]",
                "dnsZones",
                "policyCompletion",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').monitoringDeploymentName)]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').compliantCosmosDbPolicyAssignment]"
                },
                "parameters": {
                    "topLevelManagementGroupPrefix": {
                        "value": "[parameters('industryPrefix')]"
                    },
                    "cosmosDiagnostics": {
                        "value": "[if(equals(parameters('enableLogAnalytics'), 'Yes'), 'DeployIfNotExists', 'Disabled')]"
                    },
                    "cosmosLogAnalyticsWorkspaceId": {
                        "value": "[if(equals(parameters('enableLogAnalytics'), 'Yes'), variables('platformResourceIds').logAnalyticsResourceId, '')]"
                    },
                    "userAssignedIdentityResourceId": {
                        "value": "[variables('platformResourceIds').userAssignedIdentityResourceId]"
                    }
                    // Add parameter to toggle DINE to 'disabled' of condition is not met so the policy does not show up as non-compliant
                }
            }
        },
        {   // Creating Policy Assignment Compliant Data Explorer to Landing Zone scope
            "condition": "[contains(parameters('compliantAzureServices'), 'DataExplorer')]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2021-04-01",
            "location": "[if(empty(parameters('location')), deployment().location, parameters('location'))]",
            "name": "[variables('deploymentNames').compliantDataExplorerAssignmentDeploymentName]",
            "scope": "[variables('scopes').lzsManagementGroup]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').policyIdentityRoleAssignmentDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').compliantDataExplorerDeploymentName)]",
                "dnsZones",
                "policyCompletion",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').monitoringDeploymentName)]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').compliantDataExplorerPolicyAssignment]"
                },
                "parameters": {
                    "topLevelManagementGroupPrefix": {
                        "value": "[parameters('industryPrefix')]"
                    },
                    "adeDiagnostics": {
                        "value": "[if(equals(parameters('enableLogAnalytics'), 'Yes'), 'DeployIfNotExists', 'Disabled')]"
                    },
                    "adeLogAnalyticsWorkspaceId": {
                        "value": "[if(equals(parameters('enableLogAnalytics'), 'Yes'), variables('platformResourceIds').logAnalyticsResourceId, '')]"
                    },
                    "userAssignedIdentityResourceId": {
                        "value": "[variables('platformResourceIds').userAssignedIdentityResourceId]"
                    }
                    // Add parameter to toggle DINE to 'disabled' of condition is not met so the policy does not show up as non-compliant
                }
            }
        },
        {   // Creating Policy Assignment Data Factory Vault to Landing Zone scope
            "condition": "[contains(parameters('compliantAzureServices'), 'DataFactory')]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2021-04-01",
            "location": "[if(empty(parameters('location')), deployment().location, parameters('location'))]",
            "name": "[variables('deploymentNames').compliantDataFactoryAssignmentDeploymentName]",
            "scope": "[variables('scopes').lzsManagementGroup]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').policyIdentityRoleAssignmentDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').compliantDataFactoryDeploymentName)]",
                "dnsZones",
                "policyCompletion",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').monitoringDeploymentName)]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').compliantDataFactoryPolicyAssignment]"
                },
                "parameters": {
                    "topLevelManagementGroupPrefix": {
                        "value": "[parameters('industryPrefix')]"
                    },
                    "adfDiagnostics": {
                        "value": "[if(equals(parameters('enableLogAnalytics'), 'Yes'), 'DeployIfNotExists', 'Disabled')]"
                    },
                    "adfLogAnalyticsWorkspaceId": {
                        "value": "[if(equals(parameters('enableLogAnalytics'), 'Yes'), variables('platformResourceIds').logAnalyticsResourceId, '')]"
                    },
                    "userAssignedIdentityResourceId": {
                        "value": "[variables('platformResourceIds').userAssignedIdentityResourceId]"
                    }
                    // Add parameter to toggle DINE to 'disabled' of condition is not met so the policy does not show up as non-compliant
                }
            }
        },                      
        {   // Creating Policy Assignment Compliant Key Vault to Landing Zone scope
            "condition": "[contains(parameters('compliantAzureServices'), 'KeyVault')]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2021-04-01",
            "location": "[if(empty(parameters('location')), deployment().location, parameters('location'))]",
            "name": "[variables('deploymentNames').compliantKeyVaultAssignmentDeploymentName]",
            "scope": "[variables('scopes').lzsManagementGroup]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').policyIdentityRoleAssignmentDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').compliantKeyVaultDeploymentName)]",
                "dnsZones",
                "policyCompletion",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').monitoringDeploymentName)]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').compliantKeyVaultPolicyAssignment]"
                },
                "parameters": {
                    "topLevelManagementGroupPrefix": {
                        "value": "[parameters('industryPrefix')]"
                    },
                    "keyVaultDiagnostics": {
                        "value": "[if(equals(parameters('enableLogAnalytics'), 'Yes'), 'DeployIfNotExists', 'Disabled')]"
                    },
                    "keyVaultLogAnalyticsWorkspaceId": {
                        "value": "[if(equals(parameters('enableLogAnalytics'), 'Yes'), variables('platformResourceIds').logAnalyticsResourceId, '')]"
                    },
                    "hsmDiagnostics": {
                        "value": "[if(equals(parameters('enableLogAnalytics'), 'Yes'), 'DeployIfNotExists', 'Disabled')]"
                    },
                    "hsmLogAnalyticsWorkspaceId": {
                        "value": "[if(equals(parameters('enableLogAnalytics'), 'Yes'), variables('platformResourceIds').logAnalyticsResourceId, '')]"
                    },
                    "userAssignedIdentityResourceId": {
                        "value": "[variables('platformResourceIds').userAssignedIdentityResourceId]"
                    }
                    // Add parameter to toggle DINE to 'disabled' of condition is not met so the policy does not show up as non-compliant
                }
            }
        },
        {   // Creating Policy Assignment Compliant Event Grid to Landing Zone scope
            "condition": "[contains(parameters('compliantAzureServices'), 'EventGrid')]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2021-04-01",
            "location": "[if(empty(parameters('location')), deployment().location, parameters('location'))]",
            "name": "[variables('deploymentNames').compliantEventGridAssignmentDeploymentName]",
            "scope": "[variables('scopes').lzsManagementGroup]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').policyIdentityRoleAssignmentDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').compliantEventGridDeploymentName)]",
                "dnsZones",
                "policyCompletion",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').monitoringDeploymentName)]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').compliantEventGridPolicyAssignment]"
                },
                "parameters": {
                    "topLevelManagementGroupPrefix": {
                        "value": "[parameters('industryPrefix')]"
                    },
                    "eventGridPartnerDiagnostics": {
                        "value": "[if(equals(parameters('enableLogAnalytics'), 'Yes'), 'DeployIfNotExists', 'Disabled')]"
                    },
                    "eventGridPartnerLogAnalyticsWorkspaceId": {
                        "value": "[if(equals(parameters('enableLogAnalytics'), 'Yes'), variables('platformResourceIds').logAnalyticsResourceId, '')]"
                    },
                    "eventGridTopicDiagnostics": {
                        "value": "[if(equals(parameters('enableLogAnalytics'), 'Yes'), 'DeployIfNotExists', 'Disabled')]"
                    },
                    "eventGridTopicLogAnalyticsWorkspaceId": {
                        "value": "[if(equals(parameters('enableLogAnalytics'), 'Yes'), variables('platformResourceIds').logAnalyticsResourceId, '')]"
                    },
                    "eventGridDomainDiagnostics": {
                        "value": "[if(equals(parameters('enableLogAnalytics'), 'Yes'), 'DeployIfNotExists', 'Disabled')]"
                    },
                    "eventGridDomainLogAnalyticsWorkspaceId": {
                        "value": "[if(equals(parameters('enableLogAnalytics'), 'Yes'), variables('platformResourceIds').logAnalyticsResourceId, '')]"
                    },
                    "userAssignedIdentityResourceId": {
                        "value": "[variables('platformResourceIds').userAssignedIdentityResourceId]"
                    }
                    // Add parameter to toggle DINE to 'disabled' of condition is not met so the policy does not show up as non-compliant
                }
            }
        },
        {   // Creating Policy Assignment Compliant Event Hub to Landing Zone scope
            "condition": "[contains(parameters('compliantAzureServices'), 'EventHub')]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2021-04-01",
            "location": "[if(empty(parameters('location')), deployment().location, parameters('location'))]",
            "name": "[variables('deploymentNames').compliantEventHubAssignmentDeploymentName]",
            "scope": "[variables('scopes').lzsManagementGroup]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').policyIdentityRoleAssignmentDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').compliantEventHubDeploymentName)]",
                "dnsZones",
                "policyCompletion",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').monitoringDeploymentName)]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').compliantEventHubPolicyAssignment]"
                },
                "parameters": {
                    "topLevelManagementGroupPrefix": {
                        "value": "[parameters('industryPrefix')]"
                    },
                    "eventHubDiagnostics": {
                        "value": "[if(equals(parameters('enableLogAnalytics'), 'Yes'), 'DeployIfNotExists', 'Disabled')]"
                    },
                    "eventHubLogAnalyticsWorkspaceId": {
                        "value": "[if(equals(parameters('enableLogAnalytics'), 'Yes'), variables('platformResourceIds').logAnalyticsResourceId, '')]"
                    },
                    "userAssignedIdentityResourceId": {
                        "value": "[variables('platformResourceIds').userAssignedIdentityResourceId]"
                    }
                    // Add parameter to toggle DINE to 'disabled' of condition is not met so the policy does not show up as non-compliant
                }
            }
        },
        {   // Creating Policy Assignment Compliant Kubernetes to Landing Zone scope
            "condition": "[contains(parameters('compliantAzureServices'), 'Kubernetes')]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2021-04-01",
            "location": "[if(empty(parameters('location')), deployment().location, parameters('location'))]",
            "name": "[variables('deploymentNames').compliantKubernetesAssignmentDeploymentName]",
            "scope": "[variables('scopes').lzsManagementGroup]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').policyIdentityRoleAssignmentDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').compliantKubernetesDeploymentName)]",
                "dnsZones",
                "policyCompletion",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').monitoringDeploymentName)]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').compliantKubernetesPolicyAssignment]"
                },
                "parameters": {
                    "topLevelManagementGroupPrefix": {
                        "value": "[parameters('industryPrefix')]"
                    },
                    "aksDefender": {
                        "value": "[if(equals(parameters('enableAscForContainers'), 'Yes'), 'DeployIfNotExists', 'Disabled')]"
                    },
                    "aksDefenderLogAnalyticsWorkspaceResourceId": {
                        "value": "[if(equals(parameters('enableLogAnalytics'), 'Yes'), variables('platformResourceIds').logAnalyticsResourceId, '')]"
                    },
                    "aksDiagnostics": {
                        "value": "[if(equals(parameters('enableLogAnalytics'), 'Yes'), 'DeployIfNotExists', 'Disabled')]"
                    },
                    "aksLogAnalyticsWorkspaceId": {
                        "value": "[if(equals(parameters('enableLogAnalytics'), 'Yes'), variables('platformResourceIds').logAnalyticsResourceId, '')]"
                    },
                    "userAssignedIdentityResourceId": {
                        "value": "[variables('platformResourceIds').userAssignedIdentityResourceId]"
                    }
                    // Add parameter to toggle DINE to 'disabled' of condition is not met so the policy does not show up as non-compliant
                }
            }
        },
        {   // Creating Policy Assignment Compliant Machine Learning to Landing Zone scope
            "condition": "[contains(parameters('compliantAzureServices'), 'MachineLearning')]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2021-04-01",
            "location": "[if(empty(parameters('location')), deployment().location, parameters('location'))]",
            "name": "[variables('deploymentNames').compliantMachineLearningAssignmentDeploymentName]",
            "scope": "[variables('scopes').lzsManagementGroup]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').policyIdentityRoleAssignmentDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').compliantMachineLearningDeploymentName)]",
                "dnsZones",
                "policyCompletion",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').monitoringDeploymentName)]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').compliantMachineLearningPolicyAssignment]"
                },
                "parameters": {
                    "topLevelManagementGroupPrefix": {
                        "value": "[parameters('industryPrefix')]"
                    },
                    "mlDiagnostics": {
                        "value": "[if(equals(parameters('enableLogAnalytics'), 'Yes'), 'DeployIfNotExists', 'Disabled')]"
                    },
                    "mlLogAnalyticsWorkspaceId": {
                        "value": "[if(equals(parameters('enableLogAnalytics'), 'Yes'), variables('platformResourceIds').logAnalyticsResourceId, '')]"
                    },
                    "userAssignedIdentityResourceId": {
                        "value": "[variables('platformResourceIds').userAssignedIdentityResourceId]"
                    }
                    // Add parameter to toggle DINE to 'disabled' of condition is not met so the policy does not show up as non-compliant
                }
            }
        },
        {   // Creating Policy Assignment Compliant Network to Landing Zone scope
            "condition": "[contains(parameters('compliantAzureServices'), 'Networking')]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2021-04-01",
            "location": "[if(empty(parameters('location')), deployment().location, parameters('location'))]",
            "name": "[variables('deploymentNames').compliantNetworkAssignmentDeploymentName]",
            "scope": "[variables('scopes').lzsManagementGroup]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').policyIdentityRoleAssignmentDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').compliantNetworkDeploymentName)]",
                "dnsZones",
                "policyCompletion",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').monitoringDeploymentName)]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').compliantNetworkPolicyAssignment]"
                },
                "parameters": {
                    "topLevelManagementGroupPrefix": {
                        "value": "[parameters('industryPrefix')]"
                    },                    
                    "vnetModifyDdos": {
                        "value": "[if(equals(parameters('enableDdos'), 'Yes'), 'Modify', 'Disabled')]"
                    },
                    "ddosPlanResourceId": {
                        "value": "[if(equals(parameters('enableDdos'), 'Yes'), variables('platformResourceIds').ddosProtectionResourceId, '')]"
                    },
                    "nsgDiagnostics": {
                        "value": "[if(equals(parameters('enableLogAnalytics'), 'Yes'), 'DeployIfNotExists', 'Disabled')]"
                    },
                    "nsgLogAnalyticsWorkspaceId": {
                        "value": "[if(equals(parameters('enableLogAnalytics'), 'Yes'), variables('platformResourceIds').logAnalyticsResourceId, '')]"
                    },
                    "lbDiagnostics": {
                        "value": "[if(equals(parameters('enableLogAnalytics'), 'Yes'), 'DeployIfNotExists', 'Disabled')]"
                    },
                    "lbDiagnosticsLogAnalyticsWorkspaceId": {
                        "value": "[if(equals(parameters('enableLogAnalytics'), 'Yes'), variables('platformResourceIds').logAnalyticsResourceId, '')]"
                    },
                    "fdDiagnostics": {
                        "value": "[if(equals(parameters('enableLogAnalytics'), 'Yes'), 'DeployIfNotExists', 'Disabled')]"
                    },
                    "fdDiagnosticsLogAnalyticsWorkspaceId": {
                        "value": "[if(equals(parameters('enableLogAnalytics'), 'Yes'), variables('platformResourceIds').logAnalyticsResourceId, '')]"
                    },
                    "tmDiagnostics": {
                        "value": "[if(equals(parameters('enableLogAnalytics'), 'Yes'), 'DeployIfNotExists', 'Disabled')]"
                    },
                    "tmDiagnosticsLogAnalyticsWorkspaceId": {
                        "value": "[if(equals(parameters('enableLogAnalytics'), 'Yes'), variables('platformResourceIds').logAnalyticsResourceId, '')]"
                    },
                    "vnetDiagnostics": {
                        "value": "[if(equals(parameters('enableLogAnalytics'), 'Yes'), 'DeployIfNotExists', 'Disabled')]"
                    },
                    "vnetDiagnosticsLogAnalyticsWorkspaceId": {
                        "value": "[if(equals(parameters('enableLogAnalytics'), 'Yes'), variables('platformResourceIds').logAnalyticsResourceId, '')]"
                    },
                    "erDiagnostics": {
                        "value": "[if(equals(parameters('enableLogAnalytics'), 'Yes'), 'DeployIfNotExists', 'Disabled')]"
                    },
                    "erDiagnosticsLogAnalyticsWorkspaceId": {
                        "value": "[if(equals(parameters('enableLogAnalytics'), 'Yes'), variables('platformResourceIds').logAnalyticsResourceId, '')]"
                    },
                    "bastionDiagnostics": {
                        "value": "[if(equals(parameters('enableLogAnalytics'), 'Yes'), 'DeployIfNotExists', 'Disabled')]"
                    },
                    "bastionLogAnalyticsWorkspaceId": {
                        "value": "[if(equals(parameters('enableLogAnalytics'), 'Yes'), variables('platformResourceIds').logAnalyticsResourceId, '')]"
                    },
                    "fdCdnDiagnostics": {
                        "value": "[if(equals(parameters('enableLogAnalytics'), 'Yes'), 'DeployIfNotExists', 'Disabled')]"
                    },
                    "fdCdnLogAnalyticsWorkpaceId": {
                        "value": "[if(equals(parameters('enableLogAnalytics'), 'Yes'), variables('platformResourceIds').logAnalyticsResourceId, '')]"
                    },
                    "pipDiagnostics": {
                        "value": "[if(equals(parameters('enableLogAnalytics'), 'Yes'), 'DeployIfNotExists', 'Disabled')]"
                    },
                    "pipLogAnalyticsWorkspaceId": {
                        "value": "[if(equals(parameters('enableLogAnalytics'), 'Yes'), variables('platformResourceIds').logAnalyticsResourceId, '')]"
                    },
                    "gwDiagnostics": {
                        "value": "[if(equals(parameters('enableLogAnalytics'), 'Yes'), 'DeployIfNotExists', 'Disabled')]"
                    },
                    "gwLogAnalyticsWorkspaceId": {
                        "value": "[if(equals(parameters('enableLogAnalytics'), 'Yes'), variables('platformResourceIds').logAnalyticsResourceId, '')]"
                    },
                    "p2sDiagnostics": {
                        "value": "[if(equals(parameters('enableLogAnalytics'), 'Yes'), 'DeployIfNotExists', 'Disabled')]"
                    },
                    "p2sLogAnalyticsWorkspaceId": {
                        "value": "[if(equals(parameters('enableLogAnalytics'), 'Yes'), 'DeployIfNotExists', 'Disabled')]"
                    },
                    "userAssignedIdentityResourceId": {
                        "value": "[variables('platformResourceIds').userAssignedIdentityResourceId]"
                    }
                    // Add parameter to toggle DINE to 'disabled' of condition is not met so the policy does not show up as non-compliant
                }
            }
        },
        {   // Creating Policy Assignment Compliant Network to Platform Management group scope
            "condition": "[contains(parameters('compliantAzureServices'), 'Networking')]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2021-04-01",
            "location": "[if(empty(parameters('location')), deployment().location, parameters('location'))]",
            "name": "[variables('deploymentNames').compliantPlatformNetworkAssignmentDeploymentName]",
            "scope": "[variables('scopes').platformManagementGroup]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').policyIdentityRoleAssignmentDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').compliantNetworkDeploymentName)]",
                "dnsZones",
                "policyCompletion",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').monitoringDeploymentName)]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').compliantNetworkPolicyAssignment]"
                },
                "parameters": {
                    "topLevelManagementGroupPrefix": {
                        "value": "[parameters('industryPrefix')]"
                    },                    
                    "vnetModifyDdos": {
                        "value": "[if(equals(parameters('enableDdos'), 'Yes'), 'Modify', 'Disabled')]"
                    },
                    "ddosPlanResourceId": {
                        "value": "[if(equals(parameters('enableDdos'), 'Yes'), variables('platformResourceIds').ddosProtectionResourceId, '')]"
                    },
                    "nsgDiagnostics": {
                        "value": "[if(equals(parameters('enableLogAnalytics'), 'Yes'), 'DeployIfNotExists', 'Disabled')]"
                    },
                    "nsgLogAnalyticsWorkspaceId": {
                        "value": "[if(equals(parameters('enableLogAnalytics'), 'Yes'), variables('platformResourceIds').logAnalyticsResourceId, '')]"
                    },
                    "lbDiagnostics": {
                        "value": "[if(equals(parameters('enableLogAnalytics'), 'Yes'), 'DeployIfNotExists', 'Disabled')]"
                    },
                    "lbDiagnosticsLogAnalyticsWorkspaceId": {
                        "value": "[if(equals(parameters('enableLogAnalytics'), 'Yes'), variables('platformResourceIds').logAnalyticsResourceId, '')]"
                    },
                    "fdDiagnostics": {
                        "value": "[if(equals(parameters('enableLogAnalytics'), 'Yes'), 'DeployIfNotExists', 'Disabled')]"
                    },
                    "fdDiagnosticsLogAnalyticsWorkspaceId": {
                        "value": "[if(equals(parameters('enableLogAnalytics'), 'Yes'), variables('platformResourceIds').logAnalyticsResourceId, '')]"
                    },
                    "tmDiagnostics": {
                        "value": "[if(equals(parameters('enableLogAnalytics'), 'Yes'), 'DeployIfNotExists', 'Disabled')]"
                    },
                    "tmDiagnosticsLogAnalyticsWorkspaceId": {
                        "value": "[if(equals(parameters('enableLogAnalytics'), 'Yes'), variables('platformResourceIds').logAnalyticsResourceId, '')]"
                    },
                    "vnetDiagnostics": {
                        "value": "[if(equals(parameters('enableLogAnalytics'), 'Yes'), 'DeployIfNotExists', 'Disabled')]"
                    },
                    "vnetDiagnosticsLogAnalyticsWorkspaceId": {
                        "value": "[if(equals(parameters('enableLogAnalytics'), 'Yes'), variables('platformResourceIds').logAnalyticsResourceId, '')]"
                    },
                    "erDiagnostics": {
                        "value": "[if(equals(parameters('enableLogAnalytics'), 'Yes'), 'DeployIfNotExists', 'Disabled')]"
                    },
                    "erDiagnosticsLogAnalyticsWorkspaceId": {
                        "value": "[if(equals(parameters('enableLogAnalytics'), 'Yes'), variables('platformResourceIds').logAnalyticsResourceId, '')]"
                    },
                    "bastionDiagnostics": {
                        "value": "[if(equals(parameters('enableLogAnalytics'), 'Yes'), 'DeployIfNotExists', 'Disabled')]"
                    },
                    "bastionLogAnalyticsWorkspaceId": {
                        "value": "[if(equals(parameters('enableLogAnalytics'), 'Yes'), variables('platformResourceIds').logAnalyticsResourceId, '')]"
                    },
                    "fdCdnDiagnostics": {
                        "value": "[if(equals(parameters('enableLogAnalytics'), 'Yes'), 'DeployIfNotExists', 'Disabled')]"
                    },
                    "fdCdnLogAnalyticsWorkpaceId": {
                        "value": "[if(equals(parameters('enableLogAnalytics'), 'Yes'), variables('platformResourceIds').logAnalyticsResourceId, '')]"
                    },
                    "pipDiagnostics": {
                        "value": "[if(equals(parameters('enableLogAnalytics'), 'Yes'), 'DeployIfNotExists', 'Disabled')]"
                    },
                    "pipLogAnalyticsWorkspaceId": {
                        "value": "[if(equals(parameters('enableLogAnalytics'), 'Yes'), variables('platformResourceIds').logAnalyticsResourceId, '')]"
                    },
                    "gwDiagnostics": {
                        "value": "[if(equals(parameters('enableLogAnalytics'), 'Yes'), 'DeployIfNotExists', 'Disabled')]"
                    },
                    "gwLogAnalyticsWorkspaceId": {
                        "value": "[if(equals(parameters('enableLogAnalytics'), 'Yes'), variables('platformResourceIds').logAnalyticsResourceId, '')]"
                    },
                    "p2sDiagnostics": {
                        "value": "[if(equals(parameters('enableLogAnalytics'), 'Yes'), 'DeployIfNotExists', 'Disabled')]"
                    },
                    "p2sLogAnalyticsWorkspaceId": {
                        "value": "[if(equals(parameters('enableLogAnalytics'), 'Yes'), 'DeployIfNotExists', 'Disabled')]"
                    },
                    "userAssignedIdentityResourceId": {
                        "value": "[variables('platformResourceIds').userAssignedIdentityResourceId]"
                    }
                    // Add parameter to toggle DINE to 'disabled' of condition is not met so the policy does not show up as non-compliant
                }
            }
        },           
        {   // Creating Policy Assignment Compliant Open Ai to Landing Zone scope
            "condition": "[contains(parameters('compliantAzureServices'), 'OpenAi')]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2021-04-01",
            "location": "[if(empty(parameters('location')), deployment().location, parameters('location'))]",
            "name": "[variables('deploymentNames').compliantOpenAiAssignmentDeploymentName]",
            "scope": "[variables('scopes').lzsManagementGroup]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').policyIdentityRoleAssignmentDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').compliantOpenAiDeploymentName)]",
                "dnsZones",
                "policyCompletion",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').monitoringDeploymentName)]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').compliantOpenAiPolicyAssignment]"
                },
                "parameters": {
                    "topLevelManagementGroupPrefix": {
                        "value": "[parameters('industryPrefix')]"
                    },
                    "userAssignedIdentityResourceId": {
                        "value": "[variables('platformResourceIds').userAssignedIdentityResourceId]"
                    }
                    // Add parameter to toggle DINE to 'disabled' of condition is not met so the policy does not show up as non-compliant
                }
            }
        },
        {   // Creating Policy Assignment Compliant Postgre SQL to Landing Zone scope
            "condition": "[contains(parameters('compliantAzureServices'), 'PostgreSql')]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2021-04-01",
            "location": "[if(empty(parameters('location')), deployment().location, parameters('location'))]",
            "name": "[variables('deploymentNames').compliantPostgreAssignmentDeploymentName]",
            "scope": "[variables('scopes').lzsManagementGroup]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').policyIdentityRoleAssignmentDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').compliantPostgreDeploymentName)]",
                "dnsZones",
                "policyCompletion",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').monitoringDeploymentName)]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').compliantPostgrePolicyAssignment]"
                },
                "parameters": {
                    "topLevelManagementGroupPrefix": {
                        "value": "[parameters('industryPrefix')]"
                    },
                    "postgreDiagnostics": {
                        "value": "[if(equals(parameters('enableLogAnalytics'), 'Yes'), 'DeployIfNotExists', 'Disabled')]"
                    },
                    "postgreLogAnalyticsWorkspaceId": {
                        "value": "[if(equals(parameters('enableLogAnalytics'), 'Yes'), variables('platformResourceIds').logAnalyticsResourceId, '')]"
                    },
                    "userAssignedIdentityResourceId": {
                        "value": "[variables('platformResourceIds').userAssignedIdentityResourceId]"
                    }
                }
            }
        },
        {   // Creating Policy Assignment Compliant Service Bus to Landing Zone scope
            "condition": "[contains(parameters('compliantAzureServices'), 'ServiceBus')]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2021-04-01",
            "location": "[if(empty(parameters('location')), deployment().location, parameters('location'))]",
            "name": "[variables('deploymentNames').compliantServiceBusAssignmentDeploymentName]",
            "scope": "[variables('scopes').lzsManagementGroup]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').policyIdentityRoleAssignmentDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').compliantServiceBusDeploymentName)]",
                "dnsZones",
                "policyCompletion",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').monitoringDeploymentName)]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').compliantServiceBusPolicyAssignment]"
                },
                "parameters": {
                    "topLevelManagementGroupPrefix": {
                        "value": "[parameters('industryPrefix')]"
                    },
                    "ServiceBusLogAnalyticsEffect": {
                        "value": "[if(equals(parameters('enableLogAnalytics'), 'Yes'), 'DeployIfNotExists', 'Disabled')]"
                    },
                    "ServiceBusLogAnalyticsWorkspaceId": {
                        "value": "[if(equals(parameters('enableLogAnalytics'), 'Yes'), variables('platformResourceIds').logAnalyticsResourceId, '')]"
                    },
                    "userAssignedIdentityResourceId": {
                        "value": "[variables('platformResourceIds').userAssignedIdentityResourceId]"
                    }
                }
            }
        },
        {   // Creating Policy Assignment Compliant Sql to Landing Zone scope
            "condition": "[contains(parameters('compliantAzureServices'), 'Sql')]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2021-04-01",
            "location": "[if(empty(parameters('location')), deployment().location, parameters('location'))]",
            "name": "[variables('deploymentNames').compliantSqlAssignmentDeploymentName]",
            "scope": "[variables('scopes').lzsManagementGroup]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').policyIdentityRoleAssignmentDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').compliantSqlDeploymentName)]",
                "dnsZones",
                "policyCompletion",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').monitoringDeploymentName)]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').compliantSqlPolicyAssignment]"
                },
                "parameters": {
                    "topLevelManagementGroupPrefix": {
                        "value": "[parameters('industryPrefix')]"
                    },
                    "sqlServerDiagnostics": {
                        "value": "[if(equals(parameters('enableLogAnalytics'), 'Yes'), 'DeployIfNotExists', 'Disabled')]"
                    },
                    "sqlServerLogAnalyticsWorkspaceId": {
                        "value": "[if(equals(parameters('enableLogAnalytics'), 'Yes'), variables('platformResourceIds').logAnalyticsResourceId, '')]"
                    },
                    "sqlManagedDefender": {
                        "value": "[if(equals(parameters('enableAscForSql'), 'Yes'), 'DeployIfNotExists', 'Disabled')]"
                    },
                    "sqlDbServerDiagnostics": {
                        "value": "[if(equals(parameters('enableLogAnalytics'), 'Yes'), 'DeployIfNotExists', 'Disabled')]"
                    },
                    "sqlDbServerLogAnalyticsWorkspaceId": {
                        "value": "[if(equals(parameters('enableLogAnalytics'), 'Yes'), variables('platformResourceIds').logAnalyticsResourceId, '')]"
                    },
                    "sqlDbAllDiagnostics": {
                        "value": "[if(equals(parameters('enableLogAnalytics'), 'Yes'), 'DeployIfNotExists', 'Disabled')]"
                    },
                    "sqlDbAllLogAnalyticsWorkspaceId": {
                        "value": "[if(equals(parameters('enableLogAnalytics'), 'Yes'), variables('platformResourceIds').logAnalyticsResourceId, '')]"
                    },
                    "userAssignedIdentityResourceId": {
                        "value": "[variables('platformResourceIds').userAssignedIdentityResourceId]"
                    }
                }
            }
        },
        {   // Creating Policy Assignment Compliant Storage to Landing Zone scope
            "condition": "[contains(parameters('compliantAzureServices'), 'StorageAccount')]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2021-04-01",
            "location": "[if(empty(parameters('location')), deployment().location, parameters('location'))]",
            "name": "[variables('deploymentNames').compliantStorageAssignmentDeploymentName]",
            "scope": "[variables('scopes').lzsManagementGroup]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').policyIdentityRoleAssignmentDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').compliantStorageDeploymentName)]",
                "dnsZones",
                "policyCompletion",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').monitoringDeploymentName)]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').compliantStoragePolicyAssignment]"
                },
                "parameters": {
                    "topLevelManagementGroupPrefix": {
                        "value": "[parameters('industryPrefix')]"
                    },
                    "storageFileSyncDiagnostics": {
                        "value": "[if(equals(parameters('enableLogAnalytics'), 'Yes'), 'DeployIfNotExists', 'Disabled')]"
                    },
                    "storageFileSyncLogAnalyticsWorkspaceId": {
                        "value": "[if(equals(parameters('enableLogAnalytics'), 'Yes'), variables('platformResourceIds').logAnalyticsResourceId, '')]"
                    },
                    "storageTableDiagnostics": {
                        "value": "[if(equals(parameters('enableLogAnalytics'), 'Yes'), 'DeployIfNotExists', 'Disabled')]"
                    },
                    "storageTableLogAnalyticsWorkspaceId": {
                        "value": "[if(equals(parameters('enableLogAnalytics'), 'Yes'), variables('platformResourceIds').logAnalyticsResourceId, '')]"
                    },
                    "storageAccountsDiagnostics": {
                        "value": "[if(equals(parameters('enableLogAnalytics'), 'Yes'), 'DeployIfNotExists', 'Disabled')]"
                    },
                    "storageAccountsLogAnalyticsWorkspaceId": {
                        "value": "[if(equals(parameters('enableLogAnalytics'), 'Yes'), variables('platformResourceIds').logAnalyticsResourceId, '')]"
                    },
                    "storageQueueDiagnostics": {
                        "value": "[if(equals(parameters('enableLogAnalytics'), 'Yes'), 'DeployIfNotExists', 'Disabled')]"
                    },
                    "storageQueueLogAnalyticsWorkspaceId": {
                        "value": "[if(equals(parameters('enableLogAnalytics'), 'Yes'), variables('platformResourceIds').logAnalyticsResourceId, '')]"
                    },
                    "storageBlobDiagnostics": {
                        "value": "[if(equals(parameters('enableLogAnalytics'), 'Yes'), 'DeployIfNotExists', 'Disabled')]"
                    },
                    "storageBlobLogAnalyticsWorkspaceId": {
                        "value": "[if(equals(parameters('enableLogAnalytics'), 'Yes'), variables('platformResourceIds').logAnalyticsResourceId, '')]"
                    },
                    "userAssignedIdentityResourceId": {
                        "value": "[variables('platformResourceIds').userAssignedIdentityResourceId]"
                    }
                    // Add parameter to toggle DINE to 'disabled' of condition is not met so the policy does not show up as non-compliant
                }
            }
        },
        {   // Creating Policy Assignment Compliant Corp Connected to Corp Landing Zone scope
            "condition": "[equals(parameters('enablePrivateDnsZones'), 'Yes')]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2021-04-01",
            "location": "[if(empty(parameters('location')), deployment().location, parameters('location'))]",
            "name": "[variables('deploymentNames').compliantCorpLzAssignmentDeploymentName]",
            "scope": "[variables('scopes').corpManagementGroup]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').policyIdentityRoleAssignmentDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').compliantCorpLzDeploymentName)]",
                "dnsZones",
                "policyCompletion",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').monitoringDeploymentName)]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').compliantCorpLzPolicyAssignment]"
                },
                "parameters": {
                    "topLevelManagementGroupPrefix": {
                        "value": "[parameters('industryPrefix')]"
                    },
                    "avdHostPoolPrivateDnsZone": {
                        "value": "[if(contains(parameters('compliantAzureServices'), 'DesktopVirtualization'), 'DeployIfNotExists', 'Disabled')]"
                    },
                    "avdHostPoolPrivateDnsZoneId": {
                        "value": "[if(contains(parameters('compliantAzureServices'), 'DesktopVirtualization'), variables('privateDnsPolicyParameterMapping').azureDesktopVirtualizationPrivateDnsZoneId, '')]"
                    },
                    "avdWorkspacePrivateDnsZone": {
                        "value": "[if(contains(parameters('compliantAzureServices'), 'DesktopVirtualization'), 'DeployIfNotExists', 'Disabled')]"
                    },
                    "avdWorkspacePrivateDnsZoneId": {
                        "value": "[if(contains(parameters('compliantAzureServices'), 'DesktopVirtualization'), variables('privateDnsPolicyParameterMapping').azureDesktopVirtualizationPrivateDnsZoneId, '')]"
                    },
                    "storageTablePrivateDnsZone": {
                        "value": "[if(contains(parameters('compliantAzureServices'), 'StorageAccount'), 'DeployIfNotExists', 'Disabled')]"
                    },
                    "storageTablePrivateDnsZoneId": {
                        "value": "[if(contains(parameters('compliantAzureServices'), 'StorageAccount'), variables('privateDnsPolicyParameterMapping').azureStorageTablePrivateDnsZoneId, '')]"
                    },
                    "storageSecondaryTablePrivateDnsZone": {
                        "value": "[if(contains(parameters('compliantAzureServices'), 'StorageAccount'), 'DeployIfNotExists', 'Disabled')]"
                    },
                    "storageSecondaryTablePrivateDnsZoneId": {
                        "value": "[if(contains(parameters('compliantAzureServices'), 'StorageAccount'), variables('privateDnsPolicyParameterMapping').azureSecondaryStorageTablePrivateDnsZoneId, '')]"
                    },
                    "storageFileSyncPrivateDnsZone": {
                        "value": "[if(contains(parameters('compliantAzureServices'), 'StorageAccount'), 'DeployIfNotExists', 'Disabled')]"
                    },
                    "storageFileSyncPrivateDnsZoneId": {
                        "value": "[if(contains(parameters('compliantAzureServices'), 'StorageAccount'), variables('privateDnsPolicyParameterMapping').azureStorageFileSyncPrivateDnsZoneId, '')]"
                    },
                    "storageFileDnsZone": {
                        "value": "[if(contains(parameters('compliantAzureServices'), 'StorageAccount'), 'DeployIfNotExists', 'Disabled')]"
                    },
                    "storageFileDnsZoneId": {
                        "value": "[if(contains(parameters('compliantAzureServices'), 'StorageAccount'), variables('privateDnsPolicyParameterMapping').azureStorageFilePrivateDnsZoneId, '')]"
                    },
                    "storageBlobPrivateDnsZone": {
                        "value": "[if(contains(parameters('compliantAzureServices'), 'StorageAccount'), 'DeployIfNotExists', 'Disabled')]"
                    },
                    "storageBlobPrivateDnsZoneId": {
                        "value": "[if(contains(parameters('compliantAzureServices'), 'StorageAccount'), variables('privateDnsPolicyParameterMapping').azureStorageBlobPrivateDnsZoneId, '')]"
                    },
                    "storageSecondaryBlobPrivateDnsZone": {
                        "value": "[if(contains(parameters('compliantAzureServices'), 'StorageAccount'), 'DeployIfNotExists', 'Disabled')]"
                    },
                    "storageSecondaryBlobPrivateDnsZoneId": {
                        "value": "[if(contains(parameters('compliantAzureServices'), 'StorageAccount'), variables('privateDnsPolicyParameterMapping').azureSecondaryStorageBlobPrivateDnsZoneId, '')]"
                    },
                    "storageDfsPrivateDnsZone": {
                        "value": "[if(contains(parameters('compliantAzureServices'), 'StorageAccount'), 'DeployIfNotExists', 'Disabled')]"
                    },
                    "storageDfsPrivateDnsZoneId": {
                        "value": "[if(contains(parameters('compliantAzureServices'), 'StorageAccount'), variables('privateDnsPolicyParameterMapping').azureStorageDfsPrivateDnsZoneId, '')]"
                    },
                    "storageSecondaryDfsPrivateDnsZone": {
                        "value": "[if(contains(parameters('compliantAzureServices'), 'StorageAccount'), 'DeployIfNotExists', 'Disabled')]"
                    },
                    "storageSecondaryDfsPrivateDnsZoneId": {
                        "value": "[if(contains(parameters('compliantAzureServices'), 'StorageAccount'), variables('privateDnsPolicyParameterMapping').azureSecondaryStorageDfsPrivateDnsZoneId, '')]"
                    },
                    "storageQueuePrivateDnsZone": {
                        "value": "[if(contains(parameters('compliantAzureServices'), 'StorageAccount'), 'DeployIfNotExists', 'Disabled')]"
                    },
                    "storageQueuePrivateDnsZoneId": {
                        "value": "[if(contains(parameters('compliantAzureServices'), 'StorageAccount'), variables('privateDnsPolicyParameterMapping').azureStorageQueuePrivateDnsZoneId, '')]"
                    },
                    "storageSecondaryQueuePrivateDnsZone": {
                        "value": "[if(contains(parameters('compliantAzureServices'), 'StorageAccount'), 'DeployIfNotExists', 'Disabled')]"
                    },
                    "storageSecondaryQueuePrivateDnsZoneId": {
                        "value": "[if(contains(parameters('compliantAzureServices'), 'StorageAccount'), variables('privateDnsPolicyParameterMapping').azureSecondaryStorageQueuePrivateDnsZoneId, '')]"
                    },
                    "storageWebPrivateDnsZone": {
                        "value": "[if(contains(parameters('compliantAzureServices'), 'StorageAccount'), 'DeployIfNotExists', 'Disabled')]"
                    },
                    "storageWebPrivateDnsZoneId": {
                        "value": "[if(contains(parameters('compliantAzureServices'), 'StorageAccount'), variables('privateDnsPolicyParameterMapping').azureStorageWebPrivateDnsZoneId, '')]"
                    },
                    "storageSecondaryWebPrivateDnsZone": {
                        "value": "[if(contains(parameters('compliantAzureServices'), 'StorageAccount'), 'DeployIfNotExists', 'Disabled')]"
                    },
                    "storageSecondaryWebPrivateDnsZoneId": {
                        "value": "[if(contains(parameters('compliantAzureServices'), 'StorageAccount'), variables('privateDnsPolicyParameterMapping').azureSecondaryStorageWebPrivateDnsZoneId, '')]"
                    },
                    "appServiceAppsPrivateDnsZone": {
                        "value": "[if(contains(parameters('compliantAzureServices'), 'AppService'), 'DeployIfNotExists', 'Disabled')]"
                    },
                    "appServiceAppsPrivateDnsZoneId": {
                        "value": "[if(contains(parameters('compliantAzureServices'), 'AppService'), variables('privateDnsPolicyParameterMapping').azureAppServicesPrivateDnsZoneId, '')]"
                    },
                    "aaPrivateDnsZone": {
                        "value": "[if(contains(parameters('compliantAzureServices'), 'Automation'), 'DeployIfNotExists', 'Disabled')]"
                    },
                    "aaPrivateDnsZoneId": {
                        "value": "[if(contains(parameters('compliantAzureServices'), 'Automation'), variables('privateDnsPolicyParameterMapping').azureAutomationPrivateDnsZoneId, '')]"
                    },
                    "asrPrivateDnsZone": {
                        "value": "[if(contains(parameters('compliantAzureServices'), 'Backup'), 'DeployIfNotExists', 'Disabled')]"
                    },
                    "asrPrivateDnsZone-Backup": {
                        "value": "[if(contains(parameters('compliantAzureServices'), 'Backup'), variables('privateDnsPolicyParameterMapping').azureBackupPrivateDnsZoneId, '')]"
                    },
                    "asrPrivateDnsZone-Blob": {
                        "value": "[if(contains(parameters('compliantAzureServices'), 'Backup'), variables('privateDnsPolicyParameterMapping').azureBackupBlobPrivateDnsZoneId, '')]"
                    },
                    "asrPrivateDnsZone-Queue": {
                        "value": "[if(contains(parameters('compliantAzureServices'), 'Backup'), variables('privateDnsPolicyParameterMapping').azureBackupQueuePrivateDnsZoneId, '')]"
                    },
                    "diskPrivateDns": {
                        "value": "[if(contains(parameters('compliantAzureServices'), 'Compute'), 'DeployIfNotExists', 'Disabled')]"
                    },
                    "diskPrivateDnsZoneId": {
                        "value": "[if(contains(parameters('compliantAzureServices'), 'Compute'), variables('privateDnsPolicyParameterMapping').azureManagedDiskPrivateDnsZoneId, '')]"
                    },
                    "containerRegistryPrivateDnsZone": {
                        "value": "[if(contains(parameters('compliantAzureServices'), 'ContainerRegistry'), 'DeployIfNotExists', 'Disabled')]"
                    },
                    "containerRegistryPrivateDnsZoneId": {
                        "value": "[if(contains(parameters('compliantAzureServices'), 'ContainerRegistry'), variables('privateDnsPolicyParameterMapping').azureContainerRegistryPrivateDnsZoneId, '')]"
                    },
                    "cosmosDbPrivateDnsZone": {
                        "value": "[if(contains(parameters('compliantAzureServices'), 'CosmosDb'), 'DeployIfNotExists', 'Disabled')]"
                    },
                    "cosmosDbPrivateDnsZoneId": {
                        "value": "[if(contains(parameters('compliantAzureServices'), 'CosmosDb'), variables('privateDnsPolicyParameterMapping').azureCosmosSqlPrivateDnsZoneId, '')]"
                    },
                    "cosmosDbPrivateEndpointGroupId": {
                        "value": "Sql"
                    },
                    "adfPrivateDnsZone": {
                        "value": "[if(contains(parameters('compliantAzureServices'), 'DataFactory'), 'DeployIfNotExists', 'Disabled')]"
                    },
                    "adfPrivateDnsZoneId": {
                        "value": "[if(contains(parameters('compliantAzureServices'), 'DataFactory'), variables('privateDnsPolicyParameterMapping').azureDataFactoryPrivateDnsZoneId, '')]"
                    },
                    "keyVaultPrivateDnsZone": {
                        "value": "[if(contains(parameters('compliantAzureServices'), 'KeyVault'), 'DeployIfNotExists', 'Disabled')]"
                    },
                    "keyVaultPrivateDnsZoneId": {
                        "value": "[if(contains(parameters('compliantAzureServices'), 'KeyVault'), variables('privateDnsPolicyParameterMapping').azureKeyVaultPrivateDnsZoneId, '')]"
                    },
                    "eventGridDomainPrivateDnsZone": {
                        "value": "[if(contains(parameters('compliantAzureServices'), 'EventGrid'), 'DeployIfNotExists', 'Disabled')]"
                    },
                    "eventGridDomainPrivateDnsZoneId": {
                        "value": "[if(contains(parameters('compliantAzureServices'), 'EventGrid'), variables('privateDnsPolicyParameterMapping').azureEventGridPrivateDnsZoneId, '')]"
                    },
                    "eventGridTopicPrivateDnsZone": {
                        "value": "[if(contains(parameters('compliantAzureServices'), 'EventGrid'), 'DeployIfNotExists', 'Disabled')]"
                    },
                    "eventGridTopicPrivateDnsZoneId": {
                        "value": "[if(contains(parameters('compliantAzureServices'), 'EventGrid'), variables('privateDnsPolicyParameterMapping').azureEventGridPrivateDnsZoneId, '')]"
                    },
                    "eventHubNamespacesPrivateDnsZone": {
                        "value": "[if(contains(parameters('compliantAzureServices'), 'EventHub'), 'DeployIfNotExists', 'Disabled')]"
                    },
                    "eventHubNamespacesPrivateDnsZoneId": {
                        "value": "[if(contains(parameters('compliantAzureServices'), 'EventHub'), variables('privateDnsPolicyParameterMapping').azureEventHubNamespacePrivateDnsZoneId, '')]"
                    },
                    "mlPrivateDnsZone": {
                        "value": "[if(contains(parameters('compliantAzureServices'), 'MachineLearning'), 'DeployIfNotExists', 'Disabled')]"
                    },
                    "mlPrivateDnsZoneId": {
                        "value": "[if(contains(parameters('compliantAzureServices'), 'MachineLearning'), variables('privateDnsPolicyParameterMapping').azureMlPrivateDnsZoneId, '')]"
                    },
                    "mlSecondPrivateDnsZoneId": {
                        "value": "[if(contains(parameters('compliantAzureServices'), 'MachineLearning'), variables('privateDnsPolicyParameterMapping').azureMlSecondaryPrivateDnsZoneId, '')]"
                    },
                    "cognitiveServicesPrivateDnsZone": {
                        "value": "[if(contains(parameters('compliantAzureServices'), 'OpenAi'), 'DeployIfNotExists', 'Disabled')]"
                    },
                    "cognitiveServicesPrivateDnsZoneId": {
                        "value": "[if(contains(parameters('compliantAzureServices'), 'OpenAi'), variables('privateDnsPolicyParameterMapping').azureCognitiveServicesPrivateDnsZoneId, '')]"
                    },
                    "cognitiveServicesOpenAiPrivateDnsZone": {
                        "value": "[if(contains(parameters('compliantAzureServices'), 'OpenAi'), 'DeployIfNotExists', 'Disabled')]"
                    },
                    "cognitiveServicesOpenAiPrivateDnsZoneId": {
                        "value": "[if(contains(parameters('compliantAzureServices'), 'OpenAi'), variables('privateDnsPolicyParameterMapping').azureCognitiveServicesOpenAiPrivateDnsZoneId, '')]"
                    },
                    "serviceBusDinePrivateDnsZone": {
                        "value": "[if(contains(parameters('compliantAzureServices'), 'ServiceBus'), 'DeployIfNotExists', 'Disabled')]"
                    },
                    "serviceBusPrivateDnsZoneId": {
                        "value": "[if(contains(parameters('compliantAzureServices'), 'ServiceBus'), variables('privateDnsPolicyParameterMapping').azureServiceBusNamespacePrivateDnsZoneId, '')]"
                    },
                    "synapsePrivateDnsZone": {
                        "value": "[if(contains(parameters('compliantAzureServices'), 'Synapse'), 'DeployIfNotExists', 'Disabled')]"
                    },
                    "synapsePrivateDnsZoneId": {
                        "value": "[if(contains(parameters('compliantAzureServices'), 'Synapse'), variables('privateDnsPolicyParameterMapping').azureServiceBusNamespacePrivateDnsZoneId, '')]"
                    },
                    "userAssignedIdentityResourceId": {
                        "value": "[variables('platformResourceIds').userAssignedIdentityResourceId]"
                    }
                    // Add parameter to toggle DINE to 'disabled' of condition is not met so the policy does not show up as non-compliant
                }
            }
        },        
        {   // Creating Policy Assignment Compliant Synapse to Landing Zone scope
            "condition": "[contains(parameters('compliantAzureServices'), 'Synapse')]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2021-04-01",
            "location": "[if(empty(parameters('location')), deployment().location, parameters('location'))]",
            "name": "[variables('deploymentNames').compliantSynapseAssignmentDeploymentName]",
            "scope": "[variables('scopes').lzsManagementGroup]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').policyIdentityRoleAssignmentDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').compliantSynapseDeploymentName)]",
                "dnsZones",
                "policyCompletion",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').monitoringDeploymentName)]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').compliantSynapsePolicyAssignment]"
                },
                "parameters": {
                    "topLevelManagementGroupPrefix": {
                        "value": "[parameters('industryPrefix')]"
                    },
                    "synapseDefender": {
                        "value": "[if(equals(parameters('enableAscForSynapse'), 'Yes'), 'DeployIfNotExists', 'Disabled')]"
                    },
                    "synapseDiagnostics": {
                        "value": "[if(equals(parameters('enableLogAnalytics'), 'Yes'), 'DeployIfNotExists', 'Disabled')]"
                    },
                    "synapseLogAnalyticsWorkspaceId": {
                        "value": "[if(equals(parameters('enableLogAnalytics'), 'Yes'), variables('platformResourceIds').logAnalyticsResourceId, '')]"
                    },
                    "userAssignedIdentityResourceId": {
                        "value": "[variables('platformResourceIds').userAssignedIdentityResourceId]"
                    }
                }
            }
        },
        {   // Creating Policy Assignment Virtual Desktop to Landing Zone scope
            "condition": "[contains(parameters('compliantAzureServices'), 'DesktopVirtualization')]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2021-04-01",
            "location": "[if(empty(parameters('location')), deployment().location, parameters('location'))]",
            "name": "[variables('deploymentNames').compliantVirtualDesktopAssignmentDeploymentName]",
            "scope": "[variables('scopes').lzsManagementGroup]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').policyIdentityRoleAssignmentDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').compliantVirtualDesktopDeploymentName)]",
                "dnsZones",
                "policyCompletion",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').monitoringDeploymentName)]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').compliantVirtualDesktopPolicyAssignment]"
                },
                "parameters": {
                    "topLevelManagementGroupPrefix": {
                        "value": "[parameters('industryPrefix')]"
                    },
                    "avdAppGroupDiagnostics": {
                        "value": "[if(equals(parameters('enableLogAnalytics'), 'Yes'), 'DeployIfNotExists', 'Disabled')]"
                    },
                    "avdAppGroupLogAnalyticsWorkspaceId": {
                        "value": "[if(equals(parameters('enableLogAnalytics'), 'Yes'), variables('platformResourceIds').logAnalyticsResourceId, '')]"
                    },
                    "avdHostPoolDiagnostics": {
                        "value": "[if(equals(parameters('enableLogAnalytics'), 'Yes'), 'DeployIfNotExists', 'Disabled')]"
                    },
                    "avdHostPoolLogAnalyticsWorkspaceId": {
                        "value": "[if(equals(parameters('enableLogAnalytics'), 'Yes'), variables('platformResourceIds').logAnalyticsResourceId, '')]"
                    },
                    "avdWorkspaceDiagnostics": {
                        "value": "[if(equals(parameters('enableLogAnalytics'), 'Yes'), 'DeployIfNotExists', 'Disabled')]"
                    },
                    "avdWorkspaceLogAnalyticsWorkspaceId": {
                        "value": "[if(equals(parameters('enableLogAnalytics'), 'Yes'), variables('platformResourceIds').logAnalyticsResourceId, '')]"
                    },
                    "userAssignedIdentityResourceId": {
                        "value": "[variables('platformResourceIds').userAssignedIdentityResourceId]"
                    }
                }
            }
        },                                      
        /*
            The following section will optionally configure the governance for the Identity management group for the platform
        */
        {
            // Assigning Azure Backup policy to identity management group if condition is true
            "condition": "[and(equals(parameters('enableVmBackupForIdentity'), 'Yes'), not(empty(parameters('identitySubscriptionId'))))]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-10-01",
            "name": "[variables('deploymentNames').azBackupIdentityPolicyDeploymentName]",
            "scope": "[variables('scopes').identityManagementGroup]",
            "location": "[deployment().location]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').centralizedLoggingDeploymentName)]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').azVmBackupPolicyAssignment]"
                },
                "parameters": {
                    "topLevelManagementGroupPrefix": {
                        "value": "[variables('deterministicRoleAssignmentGuids').backupForIdentity]"
                    },
                    "enforcementMode": {
                        "value": "Default"
                    }                    
                }
            }
        },
        {
            // Assigning deny Public Ip policy to identity management group if condition is true
            "condition": "[and(equals(parameters('denyPipForIdentity'), 'Yes'), not(empty(parameters('identitySubscriptionId'))))]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-10-01",
            "name": "[variables('deploymentNames').pipPolicyDeploymentName]",
            "scope": "[variables('scopes').identityManagementGroup]",
            "location": "[deployment().location]",
            "dependsOn": [
                "policyCompletion",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').identitySubscriptionPlacement)]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').pipPolicyAssignment]"
                },
                "parameters": {
                    "topLevelManagementGroupPrefix": {
                        "value": "[parameters('industryPrefix')]"
                    },
                    "enforcementMode": {
                        "value": "Default"
                    }                    
                }
            }
        },
        {
            // Assigning deny subnet without nsg policy to identity management group if condition is true
            "condition": "[and(equals(parameters('denySubnetWithoutNsgForIdentity'), 'Yes'), not(empty(parameters('identitySubscriptionId'))))]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-10-01",
            "name": "[variables('deploymentNames').subnetNsgIdentityPolicyDeploymentName]",
            "scope": "[variables('scopes').identityManagementGroup]",
            "location": "[deployment().location]",
            "dependsOn": [
                "policyCompletion",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').identitySubscriptionPlacement)]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').subnetNsgPolicyAssignment]"
                },
                "parameters": {
                    "topLevelManagementGroupPrefix": {
                        "value": "[parameters('industryPrefix')]"
                    },
                    "enforcementMode": {
                        "value": "Default"
                    }                    
                }
            }
        },
        {
            // Assigning deny rpd from internet on identity management group if condition is true
            "condition": "[and(equals(parameters('denyRdpForIdentity'), 'Yes'), not(empty(parameters('identitySubscriptionId'))))]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-10-01",
            "name": "[variables('deploymentNames').rdpFromInternetIdentityPolicyDeploymentName]",
            "scope": "[variables('scopes').identityManagementGroup]",
            "location": "[deployment().location]",
            "dependsOn": [
                "policyCompletion",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').identitySubscriptionPlacement)]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').rdpFromInternetPolicyAssignment]"
                },
                "parameters": {
                    "topLevelManagementGroupPrefix": {
                        "value": "[parameters('industryPrefix')]"
                    },
                    "enforcementMode": {
                        "value": "Default"
                    }                    
                }
            }
        },
        {
            // Peer vnet in identity subscription to connectivity hub if vhub or nva contidion is true
            "condition": "[and(or(equals(parameters('enableHub'), 'nva'), equals(parameters('enableHub'), 'vhub')), not(empty(parameters('identityAddressPrefix'))))]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-06-01",
            "name": "[variables('deploymentNames').identityPeeringDeploymentName]",
            "subscriptionId": "[parameters('identitySubscriptionId')]",
            "location": "[parameters('location')]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').vnetConnectivityHubDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').vwanConnectivityHubDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').nvaConnectivityHubDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').activityDiagnosticsPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').ascPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').ascGovPolicyDeploymentName)]",                
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').centralizedPlatformLogsAssignmentDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').identitySubscriptionPlacement)]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').corpVnetPeering]"
                },
                "parameters": {
                    "vNetRgName": {
                        "value": "[variables('platformRgNames').identityVnetRg]"
                    },
                    "vNetName": {
                        "value": "[concat(parameters('identitySubscriptionId'), variables('platformResourceNames').identityVnet)]"
                    },
                    "vNetLocation": {
                        "value": "[parameters('location')]"
                    },
                    "vNetCidrRange": {
                        "value": "[parameters('identityAddressPrefix')]"
                    },
                    "hubResourceId": {
                        "value": "[variables('platformResourceIds').vNetHubResourceId]"
                    },
                    "azureFirewallResourceId": {
                        "value": "[if(equals(parameters('enableAzFwDnsProxy'), 'Yes'), variables('platformResourceIds').azFirewallResourceId, '')]"
                    }
                }
            }
        },
        {
            // Peer vnet in identity subscription to connectivity hub if vwan contidion is true
            "condition": "[and(equals(parameters('enableHub'), 'vwan'), not(empty(parameters('identityAddressPrefix'))))]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-06-01",
            "name": "[variables('deploymentNames').identityVwanPeeringDeploymentName]",
            "subscriptionId": "[parameters('identitySubscriptionId')]",
            "location": "[parameters('location')]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').vnetConnectivityHubDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').vwanConnectivityHubDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').nvaConnectivityHubDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').activityDiagnosticsPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').ascPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').ascGovPolicyDeploymentName)]",                
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').centralizedPlatformLogsAssignmentDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').identitySubscriptionPlacement)]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').corpVwanPeering]"
                },
                "parameters": {
                    "vNetRgName": {
                        "value": "[variables('platformRgNames').identityVnetRg]"
                    },
                    "vNetName": {
                        "value": "[concat(parameters('identitySubscriptionId'), variables('platformResourceNames').identityVnet)]"
                    },
                    "vNetLocation": {
                        "value": "[parameters('location')]"
                    },
                    "vNetCidrRange": {
                        "value": "[parameters('identityAddressPrefix')]"
                    },
                    "vWanHubResourceId": {
                        "value": "[variables('platformResourceIds').vWanHubResourceId]"
                    },
                    "azureFirewallResourceId": {
                        "value": "[if(equals(parameters('enableAzFwDnsProxy'), 'Yes'), variables('platformResourceIds').azFirewallResourceId, '')]"
                    }
                }
            }
        },
        {
            // Placing subscription(s) into playground management group
            "condition": "[not(empty(parameters('playgroundSubscriptionId')))]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-10-01",
            "name": "[concat(variables('deploymentNames').playgroundSubs, copyIndex())]",
            "scope": "[variables('scopes').playgroundManagementGroup]",
            "location": "[deployment().location]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').centralizedLoggingDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').activityDiagnosticsPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').ascPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').ascGovPolicyDeploymentName)]",                
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').centralizedPlatformLogsAssignmentDeploymentName)]"
            ],
            "copy": {
                "name": "playgroundSubs",
                "count": "[length(parameters('playgroundSubscriptionId'))]"
            },
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').subscriptionPlacement]"
                },
                "parameters": {
                    "targetManagementGroupId": {
                        "value": "[variables('mgmtGroups').playground]"
                    },
                    "subscriptionId": {
                        "value": "[concat(parameters('playgroundSubscriptionId')[copyIndex()])]"
                    }
                }
            }
        },
        {
            // Assigning VNet peering policy to playground management group if condition is true
            "condition": "[equals(parameters('denyVnetPeering'), 'Yes')]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-10-01",
            "name": "[variables('deploymentNames').denyVnetPeeringDeploymentName]",
            "scope": "[variables('scopes').playgroundManagementGroup]",
            "location": "[deployment().location]",
            "dependsOn": [
                "policyCompletion"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').denyVnetPeeringPolicyAssignment]"
                },
                "parameters": {
                    "enforcementMode": {
                        "value": "Default"
                    }    
                }
            }
        }, 
        {
            // Assigning budget policy to playground management group if condition is true
            "condition": "[and(not(empty(parameters('budgetAmount'))), equals(parameters('enableBudget'), 'Yes'))]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-10-01",
            "name": "[variables('deploymentNames').budgetDeploymentName]",
            "scope": "[variables('scopes').playgroundManagementGroup]",
            "location": "[deployment().location]",
            "dependsOn": [
                "policyCompletion"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').budgetPolicyAssignment]"
                },
                "parameters": {
                    "topLevelManagementGroupPrefix": {
                        "value": "[parameters('industryPrefix')]"
                    },
                    "budgetName": {
                        "value": "DefaultBudget"
                    },
                    "amount": {
                        "value": "[parameters('budgetAmount')]"
                    }
                }
            }
        },                          
        /*
            The following deployments will place landing zone subscriptions into online/corp (connected, disconnected)
        */
        {
            // Placing subscription(s) into online landing zone management group
            "condition": "[not(empty(parameters('onlineLzSubscriptionId')))]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-10-01",
            "name": "[concat(variables('deploymentNames').onlineLzSubs, copyIndex())]",
            "scope": "[variables('scopes').onlineManagementGroup]",
            "location": "[deployment().location]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').policyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').activityDiagnosticsPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').ascPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').ascGovPolicyDeploymentName)]",                
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').centralizedPlatformLogsAssignmentDeploymentName)]"
            ],
            "copy": {
                "name": "onlineLzs",
                "count": "[length(parameters('onlineLzSubscriptionId'))]"
            },
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').subscriptionPlacement]"
                },
                "parameters": {
                    "targetManagementGroupId": {
                        "value": "[variables('mgmtGroups').online]"
                    },
                    "subscriptionId": {
                        "value": "[concat(parameters('onlineLzSubscriptionId')[copyIndex()])]"
                    }
                }
            }
        },
        {
            // Placing subscriptions into corp landing zone management group
            "condition": "[not(empty(parameters('corpLzSubscriptionId')))]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-10-01",
            "name": "[concat(variables('deploymentNames').corpLzSubs, copyIndex())]",
            "scope": "[variables('scopes').corpManagementGroup]",
            "location": "[deployment().location]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').policyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').activityDiagnosticsPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').ascPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').ascGovPolicyDeploymentName)]",                
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').centralizedPlatformLogsAssignmentDeploymentName)]"
            ],
            "copy": {
                "name": "corpLzs",
                "count": "[length(parameters('corpLzSubscriptionId'))]"
            },
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').subscriptionPlacement]"
                },
                "parameters": {
                    "targetManagementGroupId": {
                        "value": "[variables('mgmtGroups').corp]"
                    },
                    "subscriptionId": {
                        "value": "[concat(parameters('corpLzSubscriptionId')[copyIndex()])]"
                    }
                }
            }
        },
        {
            // Placing subscriptions into corp landing zone management group (and do subsequent peering)
            "condition": "[not(empty(parameters('corpConnectedLzSubscriptionId')))]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-10-01",
            "name": "[concat(variables('deploymentNames').corpConnectedMoveLzSubs, copyIndex())]",
            "scope": "[variables('scopes').corpManagementGroup]",
            "location": "[deployment().location]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').policyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').activityDiagnosticsPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').ascPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').ascGovPolicyDeploymentName)]",                
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').centralizedPlatformLogsAssignmentDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').vnetConnectivityHubDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').vwanConnectivityHubDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').nvaConnectivityHubDeploymentName)]"
            ],
            "copy": {
                "name": "corpConnectedMoveLzs",
                "count": "[length(parameters('corpConnectedLzSubscriptionId'))]"
            },
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').subscriptionPlacement]"
                },
                "parameters": {
                    "targetManagementGroupId": {
                        "value": "[variables('mgmtGroups').corp]"
                    },
                    "subscriptionId": {
                        "value": "[parameters('corpConnectedLzSubscriptionId')[copyIndex()].subs]"
                    }
                }
            }
        },
        {
            // Peering corp connected lz vnet to connectivity sub (when nva or vhub is selected)
            "condition": "[and(or(equals(parameters('enableHub'), 'nva'), equals(parameters('enableHub'), 'vhub')), not(empty(parameters('corpConnectedLzSubscriptionId'))))]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-06-01",
            "name": "[concat(variables('deploymentNames').corpPeeringDeploymentName, copyIndex())]",
            "subscriptionId": "[if(not(empty(parameters('corpConnectedLzSubscriptionId'))), parameters('corpConnectedLzSubscriptionId')[copyIndex()].subs, '')]",
            "location": "[parameters('location')]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').vnetConnectivityHubDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').vwanConnectivityHubDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').nvaConnectivityHubDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').ddosDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').compliantNetworkAssignmentDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').policyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').activityDiagnosticsPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').ascPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').ascGovPolicyDeploymentName)]",
                "corpConnectedMoveLzs"
            ],
            "copy": {
                "name": "corpConnectedPeering",
                "count": "[length(parameters('corpConnectedLzSubscriptionId'))]"
            },
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').corpVnetPeering]"
                },
                "parameters": {
                    "vNetRgName": {
                        "value": "[variables('platformRgNames').lzVnetRg]"
                    },
                    "vNetName": {
                        "value": "[concat(parameters('corpConnectedLzSubscriptionId')[copyIndex()].subs, '-', variables('platformResourceNames').lzVnet)]"
                    },
                    "vNetLocation": {
                        "value": "[parameters('location')]"
                    },
                    "vNetCidrRange": {
                        "value": "[parameters('corpConnectedLzSubscriptionId')[copyIndex()].addresses]"
                    },
                    "hubResourceId": {
                        "value": "[variables('platformResourceIds').vNetHubResourceId]"
                    },
                    "azureFirewallResourceId": {
                        "value": "[if(equals(parameters('enableAzFwDnsProxy'), 'Yes'), variables('platformResourceIds').azFirewallResourceId, '')]"
                    },
                    "ddosPlanResourceId": {
                        "value": "[variables('platformResourceIds').ddosProtectionResourceId]"
                    },
                    "enableDdoS": {
                        "value": "[parameters('enableDdoS')]"
                    }
                }
            }
        }
    ],
    "outputs": {
        "deployment": {
            "type": "string",
            "value": "[concat(deployment().name, ' has successfully deployed.')]"
        }
    }
}
